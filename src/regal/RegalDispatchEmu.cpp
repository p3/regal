/* NOTE: Do not edit this file, it is generated by a script:
   Export.py --api gl 4.2 --api wgl 4.0 --api glx 4.0 --api cgl 1.4 --api egl 1.0 --outdir src/regal
*/

/*
  Copyright (c) 2011 NVIDIA Corporation
  Copyright (c) 2011-2012 Cass Everitt
  Copyright (c) 2012 Scott Nations
  Copyright (c) 2012 Mathias Schott
  Copyright (c) 2012 Nigel Stewart
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "pch.h" /* For MS precompiled header support */

#include "RegalUtil.h"

#if REGAL_EMULATION

REGAL_GLOBAL_BEGIN

#include <string>
using namespace std;

#include "RegalLog.h"
#include "RegalToken.h"
#include "RegalHelper.h"
#include "RegalPrivate.h"
#include "RegalContext.h"

#include "RegalBin.h"
#include "RegalEmu.h"
#include "RegalPpa.h"
#include "RegalIff.h"
#include "RegalMarker.h"
#include "RegalObj.h"
#include "RegalDsa.h"
#include "RegalVao.h"

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

using namespace ::REGAL_NAMESPACE_INTERNAL::Logging;
using namespace ::REGAL_NAMESPACE_INTERNAL::Token;

// GL_VERSION_1_0

static void REGAL_CALL emu_glAlphaFunc(GLenum func, GLclampf ref)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AlphaFunc( func, ref );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glAlphaFunc)(func, ref);
         break;
       }

   }

}

static void REGAL_CALL emu_glBegin(GLenum mode)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->Restore( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Begin( _context, mode );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glBegin)(mode);
         break;
       }

   }

}

static void REGAL_CALL emu_glClearDepth(GLclampd depth)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
         #if REGAL_EMU_PPA
         if (_context->ppa) {
             RegalEmuScopedActivate activate( _context, _context->ppa );
             _context->ppa->glClearDepth( depth );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   if (_context->info->gles)
     _context->dispatcher.call(&_context->dispatcher.table().glClearDepthf)((GLclampf)depth);
   else
     _context->dispatcher.call(&_context->dispatcher.table().glClearDepth)(depth);
}

static void REGAL_CALL emu_glClearStencil(GLint s)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
         #if REGAL_EMU_PPA
         if (_context->ppa) {
             RegalEmuScopedActivate activate( _context, _context->ppa );
             _context->ppa->glClearStencil( s );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glClearStencil)(s);
}

static void REGAL_CALL emu_glClipPlane(GLenum plane, const GLdouble *equation)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->ClipPlane( plane, equation );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glClipPlane)(plane, equation);
         break;
       }

   }

}

static void REGAL_CALL emu_glColor3b(GLbyte red, GLbyte green, GLbyte blue)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Color ), red, green, blue );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColor3b)(red, green, blue);
         break;
       }

   }

}

static void REGAL_CALL emu_glColor3bv(const GLbyte *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Color ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColor3bv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glColor3d(GLdouble red, GLdouble green, GLdouble blue)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_Color ), red, green, blue );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColor3d)(red, green, blue);
         break;
       }

   }

}

static void REGAL_CALL emu_glColor3dv(const GLdouble *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_Color ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColor3dv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glColor3f(GLfloat red, GLfloat green, GLfloat blue)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_Color ), red, green, blue );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColor3f)(red, green, blue);
         break;
       }

   }

}

static void REGAL_CALL emu_glColor3fv(const GLfloat *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_Color ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColor3fv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glColor3i(GLint red, GLint green, GLint blue)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Color ), red, green, blue );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColor3i)(red, green, blue);
         break;
       }

   }

}

static void REGAL_CALL emu_glColor3iv(const GLint *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Color ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColor3iv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glColor3s(GLshort red, GLshort green, GLshort blue)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Color ), red, green, blue );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColor3s)(red, green, blue);
         break;
       }

   }

}

static void REGAL_CALL emu_glColor3sv(const GLshort *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Color ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColor3sv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glColor3ub(GLubyte red, GLubyte green, GLubyte blue)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Color ), red, green, blue );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColor3ub)(red, green, blue);
         break;
       }

   }

}

static void REGAL_CALL emu_glColor3ubv(const GLubyte *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Color ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColor3ubv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glColor3ui(GLuint red, GLuint green, GLuint blue)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Color ), red, green, blue );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColor3ui)(red, green, blue);
         break;
       }

   }

}

static void REGAL_CALL emu_glColor3uiv(const GLuint *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Color ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColor3uiv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glColor3us(GLushort red, GLushort green, GLushort blue)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Color ), red, green, blue );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColor3us)(red, green, blue);
         break;
       }

   }

}

static void REGAL_CALL emu_glColor3usv(const GLushort *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Color ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColor3usv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<4>( _context, _context->iff->AttrIndex( RFF2A_Color ), red, green, blue, alpha );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColor4b)(red, green, blue, alpha);
         break;
       }

   }

}

static void REGAL_CALL emu_glColor4bv(const GLbyte *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<4>( _context, _context->iff->AttrIndex( RFF2A_Color ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColor4bv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_Color ), red, green, blue, alpha );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColor4d)(red, green, blue, alpha);
         break;
       }

   }

}

static void REGAL_CALL emu_glColor4dv(const GLdouble *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_Color ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColor4dv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_Color ), red, green, blue, alpha );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColor4f)(red, green, blue, alpha);
         break;
       }

   }

}

static void REGAL_CALL emu_glColor4fv(const GLfloat *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_Color ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColor4fv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glColor4i(GLint red, GLint green, GLint blue, GLint alpha)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<4>( _context, _context->iff->AttrIndex( RFF2A_Color ), red, green, blue, alpha );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColor4i)(red, green, blue, alpha);
         break;
       }

   }

}

static void REGAL_CALL emu_glColor4iv(const GLint *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<4>( _context, _context->iff->AttrIndex( RFF2A_Color ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColor4iv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<4>( _context, _context->iff->AttrIndex( RFF2A_Color ), red, green, blue, alpha );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColor4s)(red, green, blue, alpha);
         break;
       }

   }

}

static void REGAL_CALL emu_glColor4sv(const GLshort *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<4>( _context, _context->iff->AttrIndex( RFF2A_Color ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColor4sv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<4>( _context, _context->iff->AttrIndex( RFF2A_Color ), red, green, blue, alpha );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColor4ub)(red, green, blue, alpha);
         break;
       }

   }

}

static void REGAL_CALL emu_glColor4ubv(const GLubyte *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<4>( _context, _context->iff->AttrIndex( RFF2A_Color ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColor4ubv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<4>( _context, _context->iff->AttrIndex( RFF2A_Color ), red, green, blue, alpha );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColor4ui)(red, green, blue, alpha);
         break;
       }

   }

}

static void REGAL_CALL emu_glColor4uiv(const GLuint *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<4>( _context, _context->iff->AttrIndex( RFF2A_Color ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColor4uiv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<4>( _context, _context->iff->AttrIndex( RFF2A_Color ), red, green, blue, alpha );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColor4us)(red, green, blue, alpha);
         break;
       }

   }

}

static void REGAL_CALL emu_glColor4usv(const GLushort *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<4>( _context, _context->iff->AttrIndex( RFF2A_Color ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColor4usv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glColorMaterial(GLenum face, GLenum mode)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->ColorMaterial( face, mode );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColorMaterial)(face, mode);
         break;
       }

   }

}

static void REGAL_CALL emu_glCullFace(GLenum mode)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
         #if REGAL_EMU_PPA
         if (_context->ppa) {
             RegalEmuScopedActivate activate( _context, _context->ppa );
             _context->ppa->glCullFace( mode );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glCullFace)(mode);
}

static void REGAL_CALL emu_glDepthFunc(GLenum func)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
         #if REGAL_EMU_PPA
         if (_context->ppa) {
             RegalEmuScopedActivate activate( _context, _context->ppa );
             _context->ppa->glDepthFunc( func );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glDepthFunc)(func);
}

static void REGAL_CALL emu_glDepthMask(GLboolean flag)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
         #if REGAL_EMU_PPA
         if (_context->ppa) {
             RegalEmuScopedActivate activate( _context, _context->ppa );
             _context->ppa->glDepthMask( flag );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glDepthMask)(flag);
}

static void REGAL_CALL emu_glDepthRange(GLclampd zNear, GLclampd zFar)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   if (_context->info->gles)
     _context->dispatcher.call(&_context->dispatcher.table().glDepthRangef)((GLclampf)zNear,(GLclampf)zFar);
   else
     _context->dispatcher.call(&_context->dispatcher.table().glDepthRange)(zNear, zFar);
}

static void REGAL_CALL emu_glDisable(GLenum cap)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
         #if REGAL_EMU_PPA
         if (_context->ppa) {
             RegalEmuScopedActivate activate( _context, _context->ppa );
             _context->ppa->Disable( cap );
         }
         #endif
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreActiveTexture( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             if( ! _context->iff->ShadowDisable( cap ) ) {
                 _context->dispatcher.emulation.glDisable( cap );
             }
             return;
         }
         #endif
       default: {
         if (_context->info->gles)
           switch (cap)
           {
             case GL_BLEND:
             case GL_CULL_FACE:
             case GL_DEPTH_TEST:
             case GL_DITHER:
             case GL_POLYGON_OFFSET_FILL:
             case GL_SCISSOR_TEST:
             case GL_STENCIL_TEST:
             case GL_SAMPLE_ALPHA_TO_COVERAGE:
             case GL_SAMPLE_COVERAGE:
             case GL_TEXTURE_2D:
               break;
             default:
               Warning("glDisable does not support ",GLenumToString(cap)," for ES 2.0.");
               return;
           }
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glDisable)(cap);
         break;
       }

   }

}

static void REGAL_CALL emu_glEnable(GLenum cap)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
         #if REGAL_EMU_PPA
         if (_context->ppa) {
             RegalEmuScopedActivate activate( _context, _context->ppa );
             _context->ppa->Enable( cap );
         }
         #endif
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreActiveTexture( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             if( ! _context->iff->ShadowEnable( cap ) ) {
                 _context->dispatcher.emulation.glEnable( cap );
             }
             return;
         }
         #endif
       default: {
         if (_context->info->gles)
           switch (cap)
           {
             case GL_BLEND:
             case GL_CULL_FACE:
             case GL_DEPTH_TEST:
             case GL_DITHER:
             case GL_POLYGON_OFFSET_FILL:
             case GL_SCISSOR_TEST:
             case GL_STENCIL_TEST:
             case GL_SAMPLE_ALPHA_TO_COVERAGE:
             case GL_SAMPLE_COVERAGE:
             case GL_TEXTURE_2D:
               break;
             default:
               Warning("glEnable does not support ",GLenumToString(cap)," for ES 2.0.");
               return;
           }
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glEnable)(cap);
         break;
       }

   }

}

static void REGAL_CALL emu_glEnd(void)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->End( _context );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glEnd)();
         break;
       }

   }

}

static void REGAL_CALL emu_glFogf(GLenum pname, GLfloat param)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Fog( pname, param );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glFogf)(pname, param);
         break;
       }

   }

}

static void REGAL_CALL emu_glFogfv(GLenum pname, const GLfloat *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Fog( pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glFogfv)(pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glFogi(GLenum pname, GLint param)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Fog( pname, param );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glFogi)(pname, param);
         break;
       }

   }

}

static void REGAL_CALL emu_glFogiv(GLenum pname, const GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Fog( pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glFogiv)(pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glFrontFace(GLenum mode)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
         #if REGAL_EMU_PPA
         if (_context->ppa) {
             RegalEmuScopedActivate activate( _context, _context->ppa );
             _context->ppa->glFrontFace( mode );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glFrontFace)(mode);
}

static void REGAL_CALL emu_glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Frustum( left, right, bottom, top, zNear, zFar );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glFrustum)(left, right, bottom, top, zNear, zFar);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetBooleanv(GLenum pname, GLboolean *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGet( _context, pname );
         }
         #endif
       case 2 :
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             if( !_context->vao->Get( pname, params ) ) {
                _context->dispatcher.emulation.glGetBooleanv( pname, params );
             }
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetBooleanv)(pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetDoublev(GLenum pname, GLdouble *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGet( _context, pname );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->RestoreVao( _context );
             if ( ! _context->iff->Get( _context, pname, params ) ) {
                 _context->dispatcher.emulation.glGetDoublev( pname, params );
             }
             return;
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             if( !_context->vao->Get( pname, params ) ) {
                _context->dispatcher.emulation.glGetDoublev( pname, params );
             }
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetDoublev)(pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetFloatv(GLenum pname, GLfloat *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGet( _context, pname );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->RestoreVao( _context );
             if ( ! _context->iff->Get( _context, pname, params ) ) {
                 _context->dispatcher.emulation.glGetFloatv( pname, params );
             }
             return;
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             if( !_context->vao->Get( pname, params ) ) {
                _context->dispatcher.emulation.glGetFloatv( pname, params );
             }
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetFloatv)(pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetIntegerv(GLenum pname, GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGet( _context, pname );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->RestoreVao( _context );
             if ( ! _context->iff->Get( _context, pname, params ) ) {
                 _context->dispatcher.emulation.glGetIntegerv( pname, params );
             }
             return;
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             if( !_context->vao->Get( pname, params ) ) {
                _context->dispatcher.emulation.glGetIntegerv( pname, params );
             }
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetIntegerv)(pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->GetMaterial( face, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetMaterialfv)(face, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetMaterialiv(GLenum face, GLenum pname, GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->GetMaterial( face, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetMaterialiv)(face, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreTexture( _context );
             _context->dsa->RestoreActiveTexture( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->GetTexEnv( target, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetTexEnvfv)(target, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetTexEnviv(GLenum target, GLenum pname, GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreTexture( _context );
             _context->dsa->RestoreActiveTexture( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->GetTexEnv( target, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetTexEnviv)(target, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetTexGendv(GLenum coord, GLenum pname, GLdouble *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->RestoreVao( _context );
             if ( ! _context->iff->GetTexGenv( _context, coord, pname, params ) ) {
                 _context->dispatcher.emulation.glGetTexGendv( coord, pname, params );
             }
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetTexGendv)(coord, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->RestoreVao( _context );
             if ( ! _context->iff->GetTexGenv( _context, coord, pname, params ) ) {
                 _context->dispatcher.emulation.glGetTexGenfv( coord, pname, params );
             }
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetTexGenfv)(coord, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetTexGeniv(GLenum coord, GLenum pname, GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->RestoreVao( _context );
             if ( ! _context->iff->GetTexGenv( _context, coord, pname, params ) ) {
                 _context->dispatcher.emulation.glGetTexGeniv( coord, pname, params );
             }
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetTexGeniv)(coord, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreTexture( _context );
             _context->dsa->RestoreActiveTexture( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glGetTexParameterfv)(target, pname, params);
}

static void REGAL_CALL emu_glGetTexParameteriv(GLenum target, GLenum pname, GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreTexture( _context );
             _context->dsa->RestoreActiveTexture( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glGetTexParameteriv)(target, pname, params);
}

static void REGAL_CALL emu_glHint(GLenum target, GLenum mode)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             return _context->iff->Hint( _context, target, mode );
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glHint)(target, mode);
         break;
       }

   }

}

static GLboolean REGAL_CALL emu_glIsEnabled(GLenum cap)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreIsEnabled( _context, cap );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             {
                 GLboolean enabled;
                 if ( !_context->iff->IsEnabled( _context, cap, enabled ) )
                     return _context->dispatcher.emulation.glIsEnabled( cap );
                 return enabled;
             }
         }
         #endif
       default: {
         if (_context->info->gles)
           switch (cap)
           {
             case GL_BLEND:
             case GL_CULL_FACE:
             case GL_DEPTH_TEST:
             case GL_DITHER:
             case GL_POLYGON_OFFSET_FILL:
             case GL_SCISSOR_TEST:
             case GL_STENCIL_TEST:
             case GL_SAMPLE_ALPHA_TO_COVERAGE:
             case GL_SAMPLE_COVERAGE:
             case GL_TEXTURE_2D:
               break;
             default:
               Warning("glIsEnabled does not support ",GLenumToString(cap)," for ES 2.0.");
               return GL_FALSE;
           }
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         return _context->dispatcher.call(&_context->dispatcher.table().glIsEnabled)(cap);
       }

   }

}

static void REGAL_CALL emu_glLightModelf(GLenum pname, GLfloat param)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->LightModel( pname, param );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glLightModelf)(pname, param);
         break;
       }

   }

}

static void REGAL_CALL emu_glLightModelfv(GLenum pname, const GLfloat *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->LightModel( pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glLightModelfv)(pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glLightModeli(GLenum pname, GLint param)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->LightModel( pname, param );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glLightModeli)(pname, param);
         break;
       }

   }

}

static void REGAL_CALL emu_glLightModeliv(GLenum pname, const GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->LightModel( pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glLightModeliv)(pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glLightf(GLenum light, GLenum pname, GLfloat param)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Light( light, pname, param );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glLightf)(light, pname, param);
         break;
       }

   }

}

static void REGAL_CALL emu_glLightfv(GLenum light, GLenum pname, const GLfloat *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Light( light, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glLightfv)(light, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glLighti(GLenum light, GLenum pname, GLint param)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Light( light, pname, param );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glLighti)(light, pname, param);
         break;
       }

   }

}

static void REGAL_CALL emu_glLightiv(GLenum light, GLenum pname, const GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Light( light, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glLightiv)(light, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glLoadIdentity(void)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreMatrixMode( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->LoadIdentity(  );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glLoadIdentity)();
         break;
       }

   }

}

static void REGAL_CALL emu_glLoadMatrixd(const GLdouble *m)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreMatrixMode( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->LoadMatrix( m );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glLoadMatrixd)(m);
         break;
       }

   }

}

static void REGAL_CALL emu_glLoadMatrixf(const GLfloat *m)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreMatrixMode( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->LoadMatrix( m );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glLoadMatrixf)(m);
         break;
       }

   }

}

static void REGAL_CALL emu_glMaterialf(GLenum face, GLenum pname, GLfloat param)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Material( face, pname, param );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMaterialf)(face, pname, param);
         break;
       }

   }

}

static void REGAL_CALL emu_glMaterialfv(GLenum face, GLenum pname, const GLfloat *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Material( face, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMaterialfv)(face, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glMateriali(GLenum face, GLenum pname, GLint param)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Material( face, pname, param );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMateriali)(face, pname, param);
         break;
       }

   }

}

static void REGAL_CALL emu_glMaterialiv(GLenum face, GLenum pname, const GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Material( face, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMaterialiv)(face, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glMatrixMode(GLenum mode)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             if( false == _context->dsa->ShadowMatrixMode( mode ) ) {
                 _context->dispatcher.emulation.glMatrixMode( mode );
             }
             return;
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             if( ! _context->iff->ShadowMatrixMode( mode ) ) {
                 _context->dispatcher.emulation.glMatrixMode( mode );
             }
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMatrixMode)(mode);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultMatrixd(const GLdouble *m)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreMatrixMode( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->MultMatrix( m );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultMatrixd)(m);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultMatrixf(const GLfloat *m)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreMatrixMode( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->MultMatrix( m );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultMatrixf)(m);
         break;
       }

   }

}

static void REGAL_CALL emu_glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Normal ), nx, ny, nz );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNormal3b)(nx, ny, nz);
         break;
       }

   }

}

static void REGAL_CALL emu_glNormal3bv(const GLbyte *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Normal ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNormal3bv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_Normal ), nx, ny, nz );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNormal3d)(nx, ny, nz);
         break;
       }

   }

}

static void REGAL_CALL emu_glNormal3dv(const GLdouble *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_Normal ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNormal3dv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_Normal ), nx, ny, nz );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNormal3f)(nx, ny, nz);
         break;
       }

   }

}

static void REGAL_CALL emu_glNormal3fv(const GLfloat *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_Normal ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNormal3fv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glNormal3i(GLint nx, GLint ny, GLint nz)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Normal ), nx, ny, nz );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNormal3i)(nx, ny, nz);
         break;
       }

   }

}

static void REGAL_CALL emu_glNormal3iv(const GLint *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Normal ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNormal3iv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glNormal3s(GLshort nx, GLshort ny, GLshort nz)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Normal ), nx, ny, nz );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNormal3s)(nx, ny, nz);
         break;
       }

   }

}

static void REGAL_CALL emu_glNormal3sv(const GLshort *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_Normal ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNormal3sv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Ortho( left, right, bottom, top, zNear, zFar );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glOrtho)(left, right, bottom, top, zNear, zFar);
         break;
       }

   }

}

static void REGAL_CALL emu_glPolygonMode(GLenum face, GLenum mode)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
         #if REGAL_EMU_PPA
         if (_context->ppa) {
             RegalEmuScopedActivate activate( _context, _context->ppa );
             _context->ppa->glPolygonMode( face, mode );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glPolygonMode)(face, mode);
}

static void REGAL_CALL emu_glPopAttrib(void)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
         #if REGAL_EMU_PPA
         if (_context->ppa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
         #if REGAL_EMU_PPA
         if (_context->ppa) {
             RegalEmuScopedActivate activate( _context, _context->ppa );
             _context->ppa->PopAttrib( _context );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glPopAttrib)();
         break;
       }

   }

}

static void REGAL_CALL emu_glPopMatrix(void)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreMatrixMode( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->PopMatrix(  );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glPopMatrix)();
         break;
       }

   }

}

static void REGAL_CALL emu_glPushAttrib(GLbitfield mask)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
         #if REGAL_EMU_PPA
         if (_context->ppa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
         #if REGAL_EMU_PPA
         if (_context->ppa) {
             RegalEmuScopedActivate activate( _context, _context->ppa );
             _context->ppa->PushAttrib( _context, mask );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glPushAttrib)(mask);
         break;
       }

   }

}

static void REGAL_CALL emu_glPushMatrix(void)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreMatrixMode( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->PushMatrix(  );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glPushMatrix)();
         break;
       }

   }

}

static void REGAL_CALL emu_glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreMatrixMode( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Rotate( angle, x, y, z );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glRotated)(angle, x, y, z);
         break;
       }

   }

}

static void REGAL_CALL emu_glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreMatrixMode( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Rotate( angle, x, y, z );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glRotatef)(angle, x, y, z);
         break;
       }

   }

}

static void REGAL_CALL emu_glScaled(GLdouble x, GLdouble y, GLdouble z)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreMatrixMode( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Scale( x, y, z );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glScaled)(x, y, z);
         break;
       }

   }

}

static void REGAL_CALL emu_glScalef(GLfloat x, GLfloat y, GLfloat z)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreMatrixMode( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Scale( x, y, z );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glScalef)(x, y, z);
         break;
       }

   }

}

static void REGAL_CALL emu_glShadeModel(GLenum mode)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->ShadeModel( mode );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glShadeModel)(mode);
}

static void REGAL_CALL emu_glStencilFunc(GLenum func, GLint ref, GLuint mask)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
         #if REGAL_EMU_PPA
         if (_context->ppa) {
             RegalEmuScopedActivate activate( _context, _context->ppa );
             _context->ppa->glStencilFunc( func, ref, mask );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glStencilFunc)(func, ref, mask);
}

static void REGAL_CALL emu_glStencilMask(GLuint mask)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
         #if REGAL_EMU_PPA
         if (_context->ppa) {
             RegalEmuScopedActivate activate( _context, _context->ppa );
             _context->ppa->glStencilMask( mask );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glStencilMask)(mask);
}

static void REGAL_CALL emu_glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
         #if REGAL_EMU_PPA
         if (_context->ppa) {
             RegalEmuScopedActivate activate( _context, _context->ppa );
             _context->ppa->glStencilOp( fail, zfail, zpass );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glStencilOp)(fail, zfail, zpass);
}

static void REGAL_CALL emu_glTexCoord1d(GLdouble s)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), s );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoord1d)(s);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexCoord1dv(const GLdouble *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoord1dv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexCoord1f(GLfloat s)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), s );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoord1f)(s);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexCoord1fv(const GLfloat *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoord1fv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexCoord1i(GLint s)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), s );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoord1i)(s);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexCoord1iv(const GLint *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoord1iv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexCoord1s(GLshort s)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), s );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoord1s)(s);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexCoord1sv(const GLshort *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoord1sv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexCoord2d(GLdouble s, GLdouble t)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), s, t );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoord2d)(s, t);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexCoord2dv(const GLdouble *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoord2dv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexCoord2f(GLfloat s, GLfloat t)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), s, t );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoord2f)(s, t);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexCoord2fv(const GLfloat *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoord2fv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexCoord2i(GLint s, GLint t)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), s, t );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoord2i)(s, t);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexCoord2iv(const GLint *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoord2iv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexCoord2s(GLshort s, GLshort t)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), s, t );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoord2s)(s, t);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexCoord2sv(const GLshort *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoord2sv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexCoord3d(GLdouble s, GLdouble t, GLdouble r)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), s, t, r );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoord3d)(s, t, r);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexCoord3dv(const GLdouble *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoord3dv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexCoord3f(GLfloat s, GLfloat t, GLfloat r)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), s, t, r );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoord3f)(s, t, r);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexCoord3fv(const GLfloat *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoord3fv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexCoord3i(GLint s, GLint t, GLint r)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), s, t, r );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoord3i)(s, t, r);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexCoord3iv(const GLint *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoord3iv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexCoord3s(GLshort s, GLshort t, GLshort r)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), s, t, r );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoord3s)(s, t, r);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexCoord3sv(const GLshort *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoord3sv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), s, t, r, q );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoord4d)(s, t, r, q);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexCoord4dv(const GLdouble *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoord4dv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), s, t, r, q );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoord4f)(s, t, r, q);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexCoord4fv(const GLfloat *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoord4fv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexCoord4i(GLint s, GLint t, GLint r, GLint q)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), s, t, r, q );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoord4i)(s, t, r, q);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexCoord4iv(const GLint *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoord4iv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), s, t, r, q );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoord4s)(s, t, r, q);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexCoord4sv(const GLshort *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoord4sv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexEnvf(GLenum target, GLenum pname, GLfloat param)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreTexture( _context );
             _context->dsa->RestoreActiveTexture( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->TexEnv( target, pname, param );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexEnvf)(target, pname, param);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreTexture( _context );
             _context->dsa->RestoreActiveTexture( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->TexEnv( target, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexEnvfv)(target, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexEnvi(GLenum target, GLenum pname, GLint param)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreTexture( _context );
             _context->dsa->RestoreActiveTexture( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->TexEnv( target, pname, param );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexEnvi)(target, pname, param);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexEnviv(GLenum target, GLenum pname, const GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreTexture( _context );
             _context->dsa->RestoreActiveTexture( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->TexEnv( target, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexEnviv)(target, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexGend(GLenum coord, GLenum pname, GLdouble param)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->TexGen( coord, pname, param );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexGend)(coord, pname, param);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexGendv(GLenum coord, GLenum pname, const GLdouble *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->TexGen( coord, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexGendv)(coord, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexGenf(GLenum coord, GLenum pname, GLfloat param)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreActiveTexture( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->TexGen( coord, pname, param );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexGenf)(coord, pname, param);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexGenfv(GLenum coord, GLenum pname, const GLfloat *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreActiveTexture( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->TexGen( coord, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexGenfv)(coord, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexGeni(GLenum coord, GLenum pname, GLint param)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreActiveTexture( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->TexGen( coord, pname, param );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexGeni)(coord, pname, param);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexGeniv(GLenum coord, GLenum pname, const GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreActiveTexture( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->TexGen( coord, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexGeniv)(coord, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->ShadowTexInfo( target, internalformat );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glTexImage1D)(target, level, internalformat, width, border, format, type, pixels);
}

static void REGAL_CALL emu_glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->ShadowTexInfo( target, internalformat );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glTexImage2D)(target, level, internalformat, width, height, border, format, type, pixels);
}

static void REGAL_CALL emu_glTexParameterf(GLenum target, GLenum pname, GLfloat param)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreTexture( _context );
             _context->dsa->RestoreActiveTexture( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glTexParameterf)(target, pname, param);
}

static void REGAL_CALL emu_glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreTexture( _context );
             _context->dsa->RestoreActiveTexture( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glTexParameterfv)(target, pname, params);
}

static void REGAL_CALL emu_glTexParameteri(GLenum target, GLenum pname, GLint param)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreTexture( _context );
             _context->dsa->RestoreActiveTexture( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glTexParameteri)(target, pname, param);
}

static void REGAL_CALL emu_glTexParameteriv(GLenum target, GLenum pname, const GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreTexture( _context );
             _context->dsa->RestoreActiveTexture( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glTexParameteriv)(target, pname, params);
}

static void REGAL_CALL emu_glTranslated(GLdouble x, GLdouble y, GLdouble z)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreMatrixMode( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Translate( x, y, z );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTranslated)(x, y, z);
         break;
       }

   }

}

static void REGAL_CALL emu_glTranslatef(GLfloat x, GLfloat y, GLfloat z)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreMatrixMode( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Translate( x, y, z );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTranslatef)(x, y, z);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertex2d(GLdouble x, GLdouble y)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), x, y );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertex2d)(x, y);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertex2dv(const GLdouble *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertex2dv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertex2f(GLfloat x, GLfloat y)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), x, y );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertex2f)(x, y);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertex2fv(const GLfloat *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertex2fv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertex2i(GLint x, GLint y)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), x, y );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertex2i)(x, y);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertex2iv(const GLint *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertex2iv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertex2s(GLshort x, GLshort y)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), x, y );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertex2s)(x, y);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertex2sv(const GLshort *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertex2sv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertex3d(GLdouble x, GLdouble y, GLdouble z)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), x, y, z );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertex3d)(x, y, z);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertex3dv(const GLdouble *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertex3dv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertex3f(GLfloat x, GLfloat y, GLfloat z)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), x, y, z );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertex3f)(x, y, z);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertex3fv(const GLfloat *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertex3fv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertex3i(GLint x, GLint y, GLint z)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), x, y, z );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertex3i)(x, y, z);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertex3iv(const GLint *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertex3iv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertex3s(GLshort x, GLshort y, GLshort z)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), x, y, z );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertex3s)(x, y, z);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertex3sv(const GLshort *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertex3sv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), x, y, z, w );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertex4d)(x, y, z, w);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertex4dv(const GLdouble *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertex4dv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), x, y, z, w );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertex4f)(x, y, z, w);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertex4fv(const GLfloat *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertex4fv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertex4i(GLint x, GLint y, GLint z, GLint w)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), x, y, z, w );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertex4i)(x, y, z, w);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertex4iv(const GLint *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertex4iv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), x, y, z, w );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertex4s)(x, y, z, w);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertex4sv(const GLshort *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_Vertex ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertex4sv)(v);
         break;
       }

   }

}

// GL_VERSION_1_1

static void REGAL_CALL emu_glBindTexture(GLenum target, GLuint texture)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->ShadowTexBinding( target, texture );
         }
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             if( false == _context->dsa->ShadowTexture( target, texture ) ) {
                 _context->dispatcher.emulation.glBindTexture( target, texture );
             }
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glBindTexture)(target, texture);
         break;
       }

   }

}

static void REGAL_CALL emu_glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreBuffer( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->ColorPointer( _context, size, type, stride, pointer );
             return;
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             _context->vao->ColorPointer( _context, size, type, stride, pointer );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glColorPointer)(size, type, stride, pointer);
         break;
       }

   }

}

static void REGAL_CALL emu_glDisableClientState(GLenum cap)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreClientActiveTexture( _context );
             _context->dsa->RestoreBuffer( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->DisableClientState( _context, cap );
             return;
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             _context->vao->DisableClientState( _context, cap );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glDisableClientState)(cap);
         break;
       }

   }

}

static void REGAL_CALL emu_glDrawArrays(GLenum mode, GLint first, GLsizei count)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->Restore( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->PreDraw( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             // _context->vao->Validate( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glDrawArrays)(mode, first, count);
}

static void REGAL_CALL emu_glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->Restore( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->PreDraw( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             // _context->vao->Validate( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glDrawElements)(mode, count, type, indices);
}

static void REGAL_CALL emu_glEdgeFlagPointer(GLsizei stride, const GLvoid *pointer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->EdgeFlagPointer( _context, stride, pointer );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glEdgeFlagPointer)(stride, pointer);
         break;
       }

   }

}

static void REGAL_CALL emu_glEnableClientState(GLenum cap)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreClientActiveTexture( _context );
             _context->dsa->RestoreBuffer( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->EnableClientState( _context, cap );
             return;
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             _context->vao->EnableClientState( _context, cap );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glEnableClientState)(cap);
         break;
       }

   }

}

static void REGAL_CALL emu_glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             _context->vao->InterleavedArrays( _context, format, stride, pointer );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glInterleavedArrays)(format, stride, pointer);
         break;
       }

   }

}

static void REGAL_CALL emu_glNormalPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreBuffer( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->NormalPointer( _context, type, stride, pointer );
             return;
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             _context->vao->NormalPointer( _context, type, stride, pointer );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNormalPointer)(type, stride, pointer);
         break;
       }

   }

}

static void REGAL_CALL emu_glPolygonOffset(GLfloat factor, GLfloat units)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
         #if REGAL_EMU_PPA
         if (_context->ppa) {
             RegalEmuScopedActivate activate( _context, _context->ppa );
             _context->ppa->glPolygonOffset( factor, units );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glPolygonOffset)(factor, units);
}

static void REGAL_CALL emu_glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreClientActiveTexture( _context );
             _context->dsa->RestoreBuffer( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->TexCoordPointer( _context, size, type, stride, pointer );
             return;
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             _context->vao->TexCoordPointer( _context, size, type, stride, pointer );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTexCoordPointer)(size, type, stride, pointer);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreBuffer( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->VertexPointer( _context, size, type, stride, pointer );
             return;
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             _context->vao->VertexPointer( _context, size, type, stride, pointer );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexPointer)(size, type, stride, pointer);
         break;
       }

   }

}

// GL_VERSION_1_2

static void REGAL_CALL emu_glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->ShadowTexInfo( target, internalformat );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glTexImage3D)(target, level, internalformat, width, height, depth, border, format, type, pixels);
}

// GL_VERSION_1_3

static void REGAL_CALL emu_glActiveTexture(GLenum texture)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             if( false == _context->dsa->ShadowActiveTexture( texture ) ) {
                 _context->dispatcher.emulation.glActiveTexture( texture );
             }
             return;
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             if( ! _context->iff->ShadowActiveTexture( texture ) ) {
                 _context->dispatcher.emulation.glActiveTexture( texture );
             }
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glActiveTexture)(texture);
         break;
       }

   }

}

static void REGAL_CALL emu_glClientActiveTexture(GLenum texture)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->ShadowClientActiveTexture( texture );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             _context->vao->ClientActiveTexture( _context, texture );
         }
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             if( false == _context->dsa->ShadowClientActiveTexture( texture ) ) {
                 _context->dispatcher.emulation.glClientActiveTexture( texture );
             }
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glClientActiveTexture)(texture);
         break;
       }

   }

}

static void REGAL_CALL emu_glLoadTransposeMatrixd(const GLdouble *m)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreMatrixMode( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->LoadTransposeMatrix( m );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glLoadTransposeMatrixd)(m);
         break;
       }

   }

}

static void REGAL_CALL emu_glLoadTransposeMatrixf(const GLfloat *m)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreMatrixMode( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->LoadTransposeMatrix( m );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glLoadTransposeMatrixf)(m);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultTransposeMatrixd(const GLdouble *m)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreMatrixMode( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->MultTransposeMatrix( m );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultTransposeMatrixd)(m);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultTransposeMatrixf(const GLfloat *m)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreMatrixMode( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->MultTransposeMatrix( m );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultTransposeMatrixf)(m);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoord1d(GLenum target, GLdouble s)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoord1d)(target, s);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoord1dv(GLenum target, const GLdouble *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoord1dv)(target, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoord1f(GLenum target, GLfloat s)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoord1f)(target, s);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoord1fv(GLenum target, const GLfloat *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoord1fv)(target, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoord1i(GLenum target, GLint s)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoord1i)(target, s);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoord1iv(GLenum target, const GLint *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoord1iv)(target, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoord1s(GLenum target, GLshort s)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoord1s)(target, s);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoord1sv(GLenum target, const GLshort *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<1>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoord1sv)(target, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoord2d)(target, s, t);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoord2dv(GLenum target, const GLdouble *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoord2dv)(target, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoord2f)(target, s, t);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoord2fv(GLenum target, const GLfloat *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoord2fv)(target, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoord2i(GLenum target, GLint s, GLint t)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoord2i)(target, s, t);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoord2iv(GLenum target, const GLint *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoord2iv)(target, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoord2s(GLenum target, GLshort s, GLshort t)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoord2s)(target, s, t);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoord2sv(GLenum target, const GLshort *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<2>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoord2sv)(target, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t, r );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoord3d)(target, s, t, r);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoord3dv(GLenum target, const GLdouble *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoord3dv)(target, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t, r );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoord3f)(target, s, t, r);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoord3fv(GLenum target, const GLfloat *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoord3fv)(target, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t, r );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoord3i)(target, s, t, r);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoord3iv(GLenum target, const GLint *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoord3iv)(target, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t, r );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoord3s)(target, s, t, r);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoord3sv(GLenum target, const GLshort *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoord3sv)(target, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t, r, q );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoord4d)(target, s, t, r, q);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoord4dv(GLenum target, const GLdouble *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoord4dv)(target, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t, r, q );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoord4f)(target, s, t, r, q);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoord4fv(GLenum target, const GLfloat *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoord4fv)(target, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t, r, q );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoord4i)(target, s, t, r, q);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoord4iv(GLenum target, const GLint *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoord4iv)(target, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), s, t, r, q );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoord4s)(target, s, t, r, q);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoord4sv(GLenum target, const GLshort *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, _context->iff->AttrIndex( RFF2A_TexCoord, target - GL_TEXTURE0 ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoord4sv)(target, v);
         break;
       }

   }

}

// GL_VERSION_1_4

static void REGAL_CALL emu_glFogCoordPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->FogCoordPointer( _context, type, stride, pointer );
             return;
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             _context->vao->FogCoordPointer( _context, type, stride, pointer );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glFogCoordPointer)(type, stride, pointer);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->Restore( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->PreDraw( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             // _context->vao->Validate( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glMultiDrawArrays)(mode, first, count, primcount);
}

static void REGAL_CALL emu_glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->Restore( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->PreDraw( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             // _context->vao->Validate( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glMultiDrawElements)(mode, count, type, indices, primcount);
}

static void REGAL_CALL emu_glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), red, green, blue );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColor3b)(red, green, blue);
         break;
       }

   }

}

static void REGAL_CALL emu_glSecondaryColor3bv(const GLbyte *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColor3bv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), red, green, blue );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColor3d)(red, green, blue);
         break;
       }

   }

}

static void REGAL_CALL emu_glSecondaryColor3dv(const GLdouble *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColor3dv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), red, green, blue );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColor3f)(red, green, blue);
         break;
       }

   }

}

static void REGAL_CALL emu_glSecondaryColor3fv(const GLfloat *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColor3fv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glSecondaryColor3i(GLint red, GLint green, GLint blue)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), red, green, blue );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColor3i)(red, green, blue);
         break;
       }

   }

}

static void REGAL_CALL emu_glSecondaryColor3iv(const GLint *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColor3iv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glSecondaryColor3s(GLshort red, GLshort green, GLshort blue)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), red, green, blue );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColor3s)(red, green, blue);
         break;
       }

   }

}

static void REGAL_CALL emu_glSecondaryColor3sv(const GLshort *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColor3sv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), red, green, blue );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColor3ub)(red, green, blue);
         break;
       }

   }

}

static void REGAL_CALL emu_glSecondaryColor3ubv(const GLubyte *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColor3ubv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), red, green, blue );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColor3ui)(red, green, blue);
         break;
       }

   }

}

static void REGAL_CALL emu_glSecondaryColor3uiv(const GLuint *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColor3uiv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glSecondaryColor3us(GLushort red, GLushort green, GLushort blue)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), red, green, blue );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColor3us)(red, green, blue);
         break;
       }

   }

}

static void REGAL_CALL emu_glSecondaryColor3usv(const GLushort *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColor3usv)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreBuffer( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->SecondaryColorPointer( _context, size, type, stride, pointer );
             return;
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             _context->vao->SecondaryColorPointer( _context, size, type, stride, pointer );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColorPointer)(size, type, stride, pointer);
         break;
       }

   }

}

// GL_VERSION_1_5

static void REGAL_CALL emu_glBindBuffer(GLenum target, GLuint buffer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
         #if REGAL_EMU_OBJ
         if (_context->obj) break;
         #endif
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->RestoreVao( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             _context->vao->ShadowBufferBinding( target, buffer );
         }
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
         #if REGAL_EMU_OBJ
         if (_context->obj) {
             RegalEmuScopedActivate activate( _context, _context->obj );
             _context->obj->BindBuffer( _context, target, buffer );
             return;
         }
         #endif
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             if( false == _context->dsa->ShadowBuffer( target, buffer ) ) {
                 _context->dispatcher.emulation.glBindBuffer( target, buffer );
             }
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glBindBuffer)(target, buffer);
         break;
       }

   }

}

static void REGAL_CALL emu_glBufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreBuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glBufferData)(target, size, data, usage);
}

static void REGAL_CALL emu_glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreBuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glBufferSubData)(target, offset, size, data);
}

static void REGAL_CALL emu_glDeleteBuffers(GLsizei n, const GLuint *buffers)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
         #if REGAL_EMU_OBJ
         if (_context->obj) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
         #if REGAL_EMU_OBJ
         if (_context->obj) {
             RegalEmuScopedActivate activate( _context, _context->obj );
             _context->obj->DeleteBuffers( _context, n, buffers );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glDeleteBuffers)(n, buffers);
         break;
       }

   }

}

static void REGAL_CALL emu_glGenBuffers(GLsizei n, GLuint *buffers)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
         #if REGAL_EMU_OBJ
         if (_context->obj) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
         #if REGAL_EMU_OBJ
         if (_context->obj) {
             RegalEmuScopedActivate activate( _context, _context->obj );
             _context->obj->GenBuffers( _context, n, buffers );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGenBuffers)(n, buffers);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreBuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glGetBufferParameteriv)(target, pname, params);
}

static void REGAL_CALL emu_glGetBufferPointerv(GLenum target, GLenum pname, GLvoid **params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreBuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glGetBufferPointerv)(target, pname, params);
}

static void REGAL_CALL emu_glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreBuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glGetBufferSubData)(target, offset, size, data);
}

static GLboolean REGAL_CALL emu_glIsBuffer(GLuint buffer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
         #if REGAL_EMU_OBJ
         if (_context->obj) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
         #if REGAL_EMU_OBJ
         if (_context->obj) {
             RegalEmuScopedActivate activate( _context, _context->obj );
             return _context->obj->IsBuffer( _context, buffer );
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         return _context->dispatcher.call(&_context->dispatcher.table().glIsBuffer)(buffer);
       }

   }

}

static GLvoid *REGAL_CALL emu_glMapBuffer(GLenum target, GLenum access)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreBuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   return _context->dispatcher.call(&_context->dispatcher.table().glMapBuffer)(target, access);
}

static GLboolean REGAL_CALL emu_glUnmapBuffer(GLenum target)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreBuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   return _context->dispatcher.call(&_context->dispatcher.table().glUnmapBuffer)(target);
}

// GL_VERSION_2_0

static GLuint REGAL_CALL emu_glCreateShader(GLenum type)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             return _context->iff->CreateShader( _context, type );
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         return _context->dispatcher.call(&_context->dispatcher.table().glCreateShader)(type);
       }

   }

}

static void REGAL_CALL emu_glDisableVertexAttribArray(GLuint index)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->RestoreVao( _context );
             _context->iff->DisableArray( _context, index );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             return _context->vao->DisableVertexAttribArray( _context, index );
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glDisableVertexAttribArray)(index);
         break;
       }

   }

}

static void REGAL_CALL emu_glEnableVertexAttribArray(GLuint index)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->RestoreVao( _context );
             _context->iff->EnableArray( _context, index );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             return _context->vao->EnableVertexAttribArray( _context, index );
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glEnableVertexAttribArray)(index);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid **pointer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->RestoreVao( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             _context->vao->GetAttrib( index, pname, pointer );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetVertexAttribPointerv)(index, pname, pointer);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->RestoreVao( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             _context->vao->GetAttrib( index, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetVertexAttribdv)(index, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->RestoreVao( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             _context->vao->GetAttrib( index, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetVertexAttribfv)(index, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->RestoreVao( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             _context->vao->GetAttrib( index, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetVertexAttribiv)(index, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glLinkProgram(GLuint program)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->LinkProgram( _context, program );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glLinkProgram)(program);
         break;
       }

   }

}

static void REGAL_CALL emu_glShaderSource(GLuint shader, GLsizei count, const GLchar **string, const GLint *length)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->ShaderSource( _context, shader, count, string, length );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glShaderSource)(shader, count, string, length);
         break;
       }

   }

}

static void REGAL_CALL emu_glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
         #if REGAL_EMU_PPA
         if (_context->ppa) {
             RegalEmuScopedActivate activate( _context, _context->ppa );
             _context->ppa->glStencilFuncSeparate( face, func, ref, mask );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glStencilFuncSeparate)(face, func, ref, mask);
}

static void REGAL_CALL emu_glStencilMaskSeparate(GLenum face, GLuint mask)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
         #if REGAL_EMU_PPA
         if (_context->ppa) {
             RegalEmuScopedActivate activate( _context, _context->ppa );
             _context->ppa->glStencilMaskSeparate( face, mask );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glStencilMaskSeparate)(face, mask);
}

static void REGAL_CALL emu_glStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
         #if REGAL_EMU_PPA
         if (_context->ppa) {
             RegalEmuScopedActivate activate( _context, _context->ppa );
             _context->ppa->glStencilOpSeparate( face, fail, zfail, zpass );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glStencilOpSeparate)(face, fail, zfail, zpass);
}

static void REGAL_CALL emu_glUniform1f(GLint location, GLfloat v0)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniform1f)(location, v0);
}

static void REGAL_CALL emu_glUniform1fv(GLint location, GLsizei count, const GLfloat *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniform1fv)(location, count, value);
}

static void REGAL_CALL emu_glUniform1i(GLint location, GLint v0)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniform1i)(location, v0);
}

static void REGAL_CALL emu_glUniform1iv(GLint location, GLsizei count, const GLint *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniform1iv)(location, count, value);
}

static void REGAL_CALL emu_glUniform2f(GLint location, GLfloat v0, GLfloat v1)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniform2f)(location, v0, v1);
}

static void REGAL_CALL emu_glUniform2fv(GLint location, GLsizei count, const GLfloat *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniform2fv)(location, count, value);
}

static void REGAL_CALL emu_glUniform2i(GLint location, GLint v0, GLint v1)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniform2i)(location, v0, v1);
}

static void REGAL_CALL emu_glUniform2iv(GLint location, GLsizei count, const GLint *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniform2iv)(location, count, value);
}

static void REGAL_CALL emu_glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniform3f)(location, v0, v1, v2);
}

static void REGAL_CALL emu_glUniform3fv(GLint location, GLsizei count, const GLfloat *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniform3fv)(location, count, value);
}

static void REGAL_CALL emu_glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniform3i)(location, v0, v1, v2);
}

static void REGAL_CALL emu_glUniform3iv(GLint location, GLsizei count, const GLint *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniform3iv)(location, count, value);
}

static void REGAL_CALL emu_glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniform4f)(location, v0, v1, v2, v3);
}

static void REGAL_CALL emu_glUniform4fv(GLint location, GLsizei count, const GLfloat *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniform4fv)(location, count, value);
}

static void REGAL_CALL emu_glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniform4i)(location, v0, v1, v2, v3);
}

static void REGAL_CALL emu_glUniform4iv(GLint location, GLsizei count, const GLint *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniform4iv)(location, count, value);
}

static void REGAL_CALL emu_glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniformMatrix2fv)(location, count, transpose, value);
}

static void REGAL_CALL emu_glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniformMatrix3fv)(location, count, transpose, value);
}

static void REGAL_CALL emu_glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniformMatrix4fv)(location, count, transpose, value);
}

static void REGAL_CALL emu_glUseProgram(GLuint program)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             if( false == _context->dsa->ShadowGlslProgram( program ) ) {
                 _context->dispatcher.emulation.glUseProgram( program );
             }
             return;
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             if( ! _context->iff->ShadowUseProgram( program ) ) {
                 _context->dispatcher.emulation.glUseProgram( program );
             }
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glUseProgram)(program);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib1d(GLuint index, GLdouble x)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<1>( _context, index, x );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib1d)(index, x);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib1dv(GLuint index, const GLdouble *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<1>( _context, index, v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib1dv)(index, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib1f(GLuint index, GLfloat x)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<1>( _context, index, x );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib1f)(index, x);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib1fv(GLuint index, const GLfloat *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<1>( _context, index, v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib1fv)(index, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib1s(GLuint index, GLshort x)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<1>( _context, index, x );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib1s)(index, x);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib1sv(GLuint index, const GLshort *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<1>( _context, index, v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib1sv)(index, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<2>( _context, index, x, y );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib2d)(index, x, y);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib2dv(GLuint index, const GLdouble *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<2>( _context, index, v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib2dv)(index, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<2>( _context, index, x, y );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib2f)(index, x, y);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib2fv(GLuint index, const GLfloat *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<2>( _context, index, v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib2fv)(index, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib2s(GLuint index, GLshort x, GLshort y)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<2>( _context, index, x, y );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib2s)(index, x, y);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib2sv(GLuint index, const GLshort *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<2>( _context, index, v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib2sv)(index, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, index, x, y, z );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib3d)(index, x, y, z);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib3dv(GLuint index, const GLdouble *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, index, v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib3dv)(index, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, index, x, y, z );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib3f)(index, x, y, z);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib3fv(GLuint index, const GLfloat *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, index, v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib3fv)(index, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, index, x, y, z );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib3s)(index, x, y, z);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib3sv(GLuint index, const GLshort *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, index, v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib3sv)(index, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib4Nbv(GLuint index, const GLbyte *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<4>( _context, index, v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib4Nbv)(index, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib4Niv(GLuint index, const GLint *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<4>( _context, index, v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib4Niv)(index, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib4Nsv(GLuint index, const GLshort *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<4>( _context, index, v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib4Nsv)(index, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<4>( _context, index, x, y, z, w );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib4Nub)(index, x, y, z, w);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib4Nubv(GLuint index, const GLubyte *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<4>( _context, index, v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib4Nubv)(index, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib4Nusv(GLuint index, const GLushort *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<4>( _context, index, v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib4Nusv)(index, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib4bv(GLuint index, const GLbyte *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, index, v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib4bv)(index, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, index, x, y, z, w );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib4d)(index, x, y, z, w);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib4dv(GLuint index, const GLdouble *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, index, v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib4dv)(index, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, index, x, y, z, w );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib4f)(index, x, y, z, w);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib4fv(GLuint index, const GLfloat *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, index, v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib4fv)(index, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib4iv(GLuint index, const GLint *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, index, v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib4iv)(index, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, index, x, y, z, w );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib4s)(index, x, y, z, w);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib4sv(GLuint index, const GLshort *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, index, v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib4sv)(index, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib4ubv(GLuint index, const GLubyte *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, index, v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib4ubv)(index, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttrib4usv(GLuint index, const GLushort *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<4>( _context, index, v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttrib4usv)(index, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->RestoreVao( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             return _context->vao->AttribPointer( _context, index, size, type, normalized, stride, pointer );
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttribPointer)(index, size, type, normalized, stride, pointer);
         break;
       }

   }

}

// GL_VERSION_2_1

static void REGAL_CALL emu_glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniformMatrix2x3fv)(location, count, transpose, value);
}

static void REGAL_CALL emu_glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniformMatrix2x4fv)(location, count, transpose, value);
}

static void REGAL_CALL emu_glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniformMatrix3x2fv)(location, count, transpose, value);
}

static void REGAL_CALL emu_glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniformMatrix3x4fv)(location, count, transpose, value);
}

static void REGAL_CALL emu_glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniformMatrix4x2fv)(location, count, transpose, value);
}

static void REGAL_CALL emu_glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniformMatrix4x3fv)(location, count, transpose, value);
}

// GL_VERSION_3_0

static void REGAL_CALL emu_glDisablei(GLenum cap, GLuint index)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->DisableIndexed( cap, index );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glDisablei)(cap, index);
         break;
       }

   }

}

static void REGAL_CALL emu_glEnablei(GLenum cap, GLuint index)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->EnableIndexed( cap, index );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glEnablei)(cap, index);
         break;
       }

   }

}

static void REGAL_CALL emu_glUniform1ui(GLint location, GLuint v0)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniform1ui)(location, v0);
}

static void REGAL_CALL emu_glUniform1uiv(GLint location, GLsizei count, const GLuint *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniform1uiv)(location, count, value);
}

static void REGAL_CALL emu_glUniform2ui(GLint location, GLuint v0, GLuint v1)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniform2ui)(location, v0, v1);
}

static void REGAL_CALL emu_glUniform2uiv(GLint location, GLsizei count, const GLuint *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniform2uiv)(location, count, value);
}

static void REGAL_CALL emu_glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniform3ui)(location, v0, v1, v2);
}

static void REGAL_CALL emu_glUniform3uiv(GLint location, GLsizei count, const GLuint *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniform3uiv)(location, count, value);
}

static void REGAL_CALL emu_glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniform4ui)(location, v0, v1, v2, v3);
}

static void REGAL_CALL emu_glUniform4uiv(GLint location, GLsizei count, const GLuint *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniform4uiv)(location, count, value);
}

// GL_VERSION_3_1

static void REGAL_CALL emu_glDrawArraysInstanced(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->Restore( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->PreDraw( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             // _context->vao->Validate( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glDrawArraysInstanced)(mode, start, count, primcount);
}

static void REGAL_CALL emu_glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->Restore( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->PreDraw( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             // _context->vao->Validate( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glDrawElementsInstanced)(mode, count, type, indices, primcount);
}

static void REGAL_CALL emu_glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreTexture( _context );
             _context->dsa->RestoreActiveTexture( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glTexBuffer)(target, internalformat, buffer);
}

// GL_VERSION_3_2

static void REGAL_CALL emu_glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreFramebuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glFramebufferTexture)(target, attachment, texture, level);
}

static void REGAL_CALL emu_glFramebufferTextureFace(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreFramebuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glFramebufferTextureFace)(target, attachment, texture, level, face);
}

// GL_VERSION_3_3

// GL_VERSION_4_0

// GL_3DFX_tbuffer

// GL_AMD_debug_output

// GL_AMD_draw_buffers_blend

// GL_AMD_multi_draw_indirect

static void REGAL_CALL emu_glMultiDrawArraysIndirectAMD(GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->Restore( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->PreDraw( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             // _context->vao->Validate( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glMultiDrawArraysIndirectAMD)(mode, indirect, primcount, stride);
}

static void REGAL_CALL emu_glMultiDrawElementsIndirectAMD(GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->Restore( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->PreDraw( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             // _context->vao->Validate( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glMultiDrawElementsIndirectAMD)(mode, type, indirect, primcount, stride);
}

// GL_AMD_name_gen_delete

// GL_AMD_performance_monitor

// GL_AMD_sample_positions

// GL_AMD_stencil_operation_extended

// GL_AMD_vertex_shader_tessellator

// GL_APPLE_element_array

static void REGAL_CALL emu_glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->Restore( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->PreDraw( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             // _context->vao->Validate( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glDrawElementArrayAPPLE)(mode, first, count);
}

static void REGAL_CALL emu_glMultiDrawElementArrayAPPLE(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->Restore( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->PreDraw( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             // _context->vao->Validate( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glMultiDrawElementArrayAPPLE)(mode, first, count, primcount);
}

// GL_APPLE_fence

// GL_APPLE_flush_buffer_range

// GL_APPLE_flush_render

// GL_APPLE_object_purgeable

// GL_APPLE_texture_range

// GL_APPLE_vertex_array_object

static void REGAL_CALL emu_glBindVertexArrayAPPLE(GLuint array)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->ShadowVao( _context, array );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glBindVertexArrayAPPLE)(array);
}

// GL_APPLE_vertex_array_range

// GL_APPLE_vertex_program_evaluators

// GL_ARB_ES2_compatibility

static void REGAL_CALL emu_glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
         #if REGAL_EMU_BIN
         if (_context->bin) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
         #if REGAL_EMU_BIN
         if (_context->bin) {
             RegalEmuScopedActivate activate( _context, _context->bin );
             _context->bin->ShaderBinary( _context, count, shaders, binaryformat, binary, length );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glShaderBinary)(count, shaders, binaryformat, binary, length);
         break;
       }

   }

}

// GL_ARB_base_instance

// GL_ARB_blend_func_extended

// GL_ARB_cl_event

// GL_ARB_clear_buffer_object

// GL_ARB_color_buffer_float

// GL_ARB_compute_shader

// GL_ARB_copy_buffer

static void REGAL_CALL emu_glCopyBufferSubData(GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreBuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glCopyBufferSubData)(readtarget, writetarget, readoffset, writeoffset, size);
}

// GL_ARB_copy_image

// GL_ARB_debug_output

// GL_ARB_draw_buffers

// GL_ARB_draw_buffers_blend

// GL_ARB_draw_elements_base_vertex

static void REGAL_CALL emu_glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, GLvoid *indices, GLint basevertex)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->Restore( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->PreDraw( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             // _context->vao->Validate( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glDrawElementsBaseVertex)(mode, count, type, indices, basevertex);
}

static void REGAL_CALL emu_glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->Restore( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->PreDraw( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             // _context->vao->Validate( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glDrawElementsInstancedBaseVertex)(mode, count, type, indices, primcount, basevertex);
}

static void REGAL_CALL emu_glMultiDrawElementsBaseVertex(GLenum mode, GLsizei *count, GLenum type, GLvoid **indices, GLsizei primcount, GLint *basevertex)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->Restore( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->PreDraw( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             // _context->vao->Validate( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glMultiDrawElementsBaseVertex)(mode, count, type, indices, primcount, basevertex);
}

// GL_ARB_draw_indirect

static void REGAL_CALL emu_glDrawArraysIndirect(GLenum mode, const GLvoid *indirect)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->Restore( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->PreDraw( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             // _context->vao->Validate( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glDrawArraysIndirect)(mode, indirect);
}

static void REGAL_CALL emu_glDrawElementsIndirect(GLenum mode, GLenum type, const GLvoid *indirect)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->Restore( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->PreDraw( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             // _context->vao->Validate( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glDrawElementsIndirect)(mode, type, indirect);
}

// GL_ARB_draw_instanced

static void REGAL_CALL emu_glDrawArraysInstancedARB(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->Restore( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->PreDraw( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             // _context->vao->Validate( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glDrawArraysInstancedARB)(mode, start, count, primcount);
}

static void REGAL_CALL emu_glDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->Restore( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->PreDraw( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             // _context->vao->Validate( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glDrawElementsInstancedARB)(mode, count, type, indices, primcount);
}

// GL_ARB_framebuffer_no_attachments

// GL_ARB_framebuffer_object

static void REGAL_CALL emu_glBindFramebuffer(GLenum target, GLuint framebuffer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             if( false == _context->dsa->ShadowFramebuffer( target, framebuffer ) ) {
                 _context->dispatcher.emulation.glBindFramebuffer( target, framebuffer );
             }
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glBindFramebuffer)(target, framebuffer);
         break;
       }

   }

}

static void REGAL_CALL emu_glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreFramebuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glFramebufferRenderbuffer)(target, attachment, renderbuffertarget, renderbuffer);
}

static void REGAL_CALL emu_glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreFramebuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glFramebufferTexture1D)(target, attachment, textarget, texture, level);
}

static void REGAL_CALL emu_glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreFramebuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glFramebufferTexture2D)(target, attachment, textarget, texture, level);
}

static void REGAL_CALL emu_glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreFramebuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glFramebufferTexture3D)(target, attachment, textarget, texture, level, layer);
}

static void REGAL_CALL emu_glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreFramebuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glFramebufferTextureLayer)(target, attachment, texture, level, layer);
}

static void REGAL_CALL emu_glGenerateMipmap(GLenum target)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreTexture( _context );
             _context->dsa->RestoreActiveTexture( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glGenerateMipmap)(target);
}

static void REGAL_CALL emu_glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreFramebuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glRenderbufferStorage)(target, internalformat, width, height);
}

static void REGAL_CALL emu_glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreFramebuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glRenderbufferStorageMultisample)(target, samples, internalformat, width, height);
}

// GL_ARB_geometry_shader4

static void REGAL_CALL emu_glFramebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreFramebuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glFramebufferTextureARB)(target, attachment, texture, level);
}

static void REGAL_CALL emu_glFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreFramebuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glFramebufferTextureFaceARB)(target, attachment, texture, level, face);
}

static void REGAL_CALL emu_glFramebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreFramebuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glFramebufferTextureLayerARB)(target, attachment, texture, level, layer);
}

// GL_ARB_get_program_binary

// GL_ARB_gpu_shader_fp64

static void REGAL_CALL emu_glUniform1d(GLint location, GLdouble x)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniform1d)(location, x);
}

static void REGAL_CALL emu_glUniform1dv(GLint location, GLsizei count, const GLdouble *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniform1dv)(location, count, value);
}

static void REGAL_CALL emu_glUniform2d(GLint location, GLdouble x, GLdouble y)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniform2d)(location, x, y);
}

static void REGAL_CALL emu_glUniform2dv(GLint location, GLsizei count, const GLdouble *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniform2dv)(location, count, value);
}

static void REGAL_CALL emu_glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniform3d)(location, x, y, z);
}

static void REGAL_CALL emu_glUniform3dv(GLint location, GLsizei count, const GLdouble *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniform3dv)(location, count, value);
}

static void REGAL_CALL emu_glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniform4d)(location, x, y, z, w);
}

static void REGAL_CALL emu_glUniform4dv(GLint location, GLsizei count, const GLdouble *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniform4dv)(location, count, value);
}

static void REGAL_CALL emu_glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniformMatrix2dv)(location, count, transpose, value);
}

static void REGAL_CALL emu_glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniformMatrix2x3dv)(location, count, transpose, value);
}

static void REGAL_CALL emu_glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniformMatrix2x4dv)(location, count, transpose, value);
}

static void REGAL_CALL emu_glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniformMatrix3dv)(location, count, transpose, value);
}

static void REGAL_CALL emu_glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniformMatrix3x2dv)(location, count, transpose, value);
}

static void REGAL_CALL emu_glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniformMatrix3x4dv)(location, count, transpose, value);
}

static void REGAL_CALL emu_glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniformMatrix4dv)(location, count, transpose, value);
}

static void REGAL_CALL emu_glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniformMatrix4x2dv)(location, count, transpose, value);
}

static void REGAL_CALL emu_glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreGlslProgram( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glUniformMatrix4x3dv)(location, count, transpose, value);
}

// GL_ARB_imaging

// GL_ARB_instanced_arrays

// GL_ARB_internalformat_query

// GL_ARB_internalformat_query2

// GL_ARB_invalidate_subdata

// GL_ARB_map_buffer_range

static void REGAL_CALL emu_glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreBuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glFlushMappedBufferRange)(target, offset, length);
}

static GLvoid *REGAL_CALL emu_glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreBuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   return _context->dispatcher.call(&_context->dispatcher.table().glMapBufferRange)(target, offset, length, access);
}

// GL_ARB_matrix_palette

// GL_ARB_multi_draw_indirect

static void REGAL_CALL emu_glMultiDrawArraysIndirect(GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->Restore( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->PreDraw( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             // _context->vao->Validate( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glMultiDrawArraysIndirect)(mode, indirect, primcount, stride);
}

static void REGAL_CALL emu_glMultiDrawElementsIndirect(GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->Restore( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->PreDraw( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             // _context->vao->Validate( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glMultiDrawElementsIndirect)(mode, type, indirect, primcount, stride);
}

// GL_ARB_multisample

// GL_ARB_multitexture

static void REGAL_CALL emu_glActiveTextureARB(GLenum texture)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             if( ! _context->iff->ShadowActiveTexture( texture ) ) {
                 _context->dispatcher.emulation.glActiveTextureARB( texture );
             }
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glActiveTextureARB)(texture);
         break;
       }

   }

}

static void REGAL_CALL emu_glClientActiveTextureARB(GLenum texture)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->ShadowClientActiveTexture( texture );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glClientActiveTextureARB)(texture);
}

// GL_ARB_occlusion_query

// GL_ARB_point_parameters

// GL_ARB_program_interface_query

// GL_ARB_provoking_vertex

// GL_ARB_robustness

// GL_ARB_sample_shading

// GL_ARB_sampler_objects

// GL_ARB_separate_shader_objects

// GL_ARB_shader_atomic_counters

// GL_ARB_shader_image_load_store

// GL_ARB_shader_objects

// GL_ARB_shader_storage_buffer_object

// GL_ARB_shader_subroutine

// GL_ARB_shading_language_include

// GL_ARB_sync

static void REGAL_CALL emu_glGetInteger64v(GLenum pname, GLint64 *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             if( !_context->vao->Get( pname, params ) ) {
                _context->dispatcher.emulation.glGetInteger64v( pname, params );
             }
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetInteger64v)(pname, params);
         break;
       }

   }

}

// GL_ARB_tessellation_shader

// GL_ARB_texture_buffer_object

// GL_ARB_texture_buffer_range

// GL_ARB_texture_compression

// GL_ARB_texture_multisample

static void REGAL_CALL emu_glTexImage2DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->ShadowTexInfo( target, internalformat );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glTexImage2DMultisample)(target, samples, internalformat, width, height, fixedsamplelocations);
}

static void REGAL_CALL emu_glTexImage3DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->ShadowTexInfo( target, internalformat );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glTexImage3DMultisample)(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}

// GL_ARB_texture_storage

// GL_ARB_texture_storage_multisample

// GL_ARB_texture_view

// GL_ARB_timer_query

// GL_ARB_transform_feedback2

// GL_ARB_transform_feedback3

// GL_ARB_transform_feedback_instanced

// GL_ARB_transpose_matrix

// GL_ARB_uniform_buffer_object

// GL_ARB_vertex_array_object

static void REGAL_CALL emu_glBindVertexArray(GLuint array)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
         #if REGAL_EMU_OBJ
         if (_context->obj) break;
         #endif
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->ShadowVao( _context, array );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
         #if REGAL_EMU_OBJ
         if (_context->obj) {
             RegalEmuScopedActivate activate( _context, _context->obj );
             _context->obj->BindVertexArray( _context, array );
             return;
         }
         #endif
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             if( false == _context->dsa->ShadowVao( array ) ) {
                 _context->dispatcher.emulation.glBindVertexArray( array );
             }
             return;
         }
         #endif
       case 2 :
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             _context->vao->BindVertexArray( _context, array );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glBindVertexArray)(array);
         break;
       }

   }

}

static void REGAL_CALL emu_glDeleteVertexArrays(GLsizei n, const GLuint *arrays)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
         #if REGAL_EMU_OBJ
         if (_context->obj) break;
         #endif
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
         #if REGAL_EMU_OBJ
         if (_context->obj) {
             RegalEmuScopedActivate activate( _context, _context->obj );
             _context->obj->DeleteVertexArrays( _context, n, arrays );
             return;
         }
         #endif
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->DeleteVertexArrays( _context, n, arrays );
             return;
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             _context->vao->DeleteVertexArrays( n, arrays );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glDeleteVertexArrays)(n, arrays);
         break;
       }

   }

}

static void REGAL_CALL emu_glGenVertexArrays(GLsizei n, GLuint *arrays)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
         #if REGAL_EMU_OBJ
         if (_context->obj) break;
         #endif
       case 5 :
       case 4 :
       case 3 :
       case 2 :
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
         #if REGAL_EMU_OBJ
         if (_context->obj) {
             RegalEmuScopedActivate activate( _context, _context->obj );
             _context->obj->GenVertexArrays( _context, n, arrays );
             return;
         }
         #endif
       case 5 :
       case 4 :
       case 3 :
       case 2 :
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             _context->vao->GenVertexArrays( n, arrays );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGenVertexArrays)(n, arrays);
         break;
       }

   }

}

static GLboolean REGAL_CALL emu_glIsVertexArray(GLuint array)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
         #if REGAL_EMU_OBJ
         if (_context->obj) break;
         #endif
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
         #if REGAL_EMU_OBJ
         if (_context->obj) {
             RegalEmuScopedActivate activate( _context, _context->obj );
             return _context->obj->IsVertexArray( _context, array );
         }
         #endif
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             return _context->iff->IsVertexArray( _context, array );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             return _context->vao->IsVertexArray( array );
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         return _context->dispatcher.call(&_context->dispatcher.table().glIsVertexArray)(array);
       }

   }

}

// GL_ARB_vertex_attrib_64bit

// GL_ARB_vertex_attrib_binding

// GL_ARB_vertex_blend

// GL_ARB_vertex_buffer_object

static void REGAL_CALL emu_glBindBufferARB(GLenum target, GLuint buffer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
         #if REGAL_EMU_OBJ
         if (_context->obj) break;
         #endif
       case 5 :
       case 4 :
       case 3 :
       case 2 :
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             _context->vao->ShadowBufferBinding( target, buffer );
         }
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
         #if REGAL_EMU_OBJ
         if (_context->obj) {
             RegalEmuScopedActivate activate( _context, _context->obj );
             _context->obj->BindBuffer( _context, target, buffer );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glBindBufferARB)(target, buffer);
         break;
       }

   }

}

static void REGAL_CALL emu_glDeleteBuffersARB(GLsizei n, const GLuint *buffers)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
         #if REGAL_EMU_OBJ
         if (_context->obj) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
         #if REGAL_EMU_OBJ
         if (_context->obj) {
             RegalEmuScopedActivate activate( _context, _context->obj );
             _context->obj->DeleteBuffers( _context, n, buffers );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glDeleteBuffersARB)(n, buffers);
         break;
       }

   }

}

static void REGAL_CALL emu_glGenBuffersARB(GLsizei n, GLuint *buffers)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
         #if REGAL_EMU_OBJ
         if (_context->obj) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
         #if REGAL_EMU_OBJ
         if (_context->obj) {
             RegalEmuScopedActivate activate( _context, _context->obj );
             _context->obj->GenBuffers( _context, n, buffers );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGenBuffersARB)(n, buffers);
         break;
       }

   }

}

static GLboolean REGAL_CALL emu_glIsBufferARB(GLuint buffer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
         #if REGAL_EMU_OBJ
         if (_context->obj) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
         #if REGAL_EMU_OBJ
         if (_context->obj) {
             RegalEmuScopedActivate activate( _context, _context->obj );
             return _context->obj->IsBuffer( _context, buffer );
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         return _context->dispatcher.call(&_context->dispatcher.table().glIsBufferARB)(buffer);
       }

   }

}

static GLvoid *REGAL_CALL emu_glMapBufferARB(GLenum target, GLenum access)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreBuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   return _context->dispatcher.call(&_context->dispatcher.table().glMapBufferARB)(target, access);
}

static GLboolean REGAL_CALL emu_glUnmapBufferARB(GLenum target)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreBuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   return _context->dispatcher.call(&_context->dispatcher.table().glUnmapBufferARB)(target);
}

// GL_ARB_vertex_program

static void REGAL_CALL emu_glBindProgramARB(GLenum target, GLuint program)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             if( false == _context->dsa->ShadowAsmProgram( target, program ) ) {
                 _context->dispatcher.emulation.glBindProgramARB( target, program );
             }
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glBindProgramARB)(target, program);
         break;
       }

   }

}

static void REGAL_CALL emu_glDisableVertexAttribArrayARB(GLuint index)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->RestoreVao( _context );
             _context->iff->DisableArray( _context, index );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             return _context->vao->DisableVertexAttribArray( _context, index );
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glDisableVertexAttribArrayARB)(index);
         break;
       }

   }

}

static void REGAL_CALL emu_glEnableVertexAttribArrayARB(GLuint index)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->RestoreVao( _context );
             _context->iff->EnableArray( _context, index );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             return _context->vao->EnableVertexAttribArray( _context, index );
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glEnableVertexAttribArrayARB)(index);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreAsmProgram( _context, target );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glGetProgramEnvParameterdvARB)(target, index, params);
}

static void REGAL_CALL emu_glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreAsmProgram( _context, target );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glGetProgramEnvParameterfvARB)(target, index, params);
}

static void REGAL_CALL emu_glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreAsmProgram( _context, target );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glGetProgramLocalParameterdvARB)(target, index, params);
}

static void REGAL_CALL emu_glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreAsmProgram( _context, target );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glGetProgramLocalParameterfvARB)(target, index, params);
}

static void REGAL_CALL emu_glGetVertexAttribPointervARB(GLuint index, GLenum pname, GLvoid **pointer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->RestoreVao( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             _context->vao->GetAttrib( index, pname, pointer );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetVertexAttribPointervARB)(index, pname, pointer);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->RestoreVao( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             _context->vao->GetAttrib( index, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetVertexAttribdvARB)(index, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->RestoreVao( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             _context->vao->GetAttrib( index, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetVertexAttribfvARB)(index, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetVertexAttribivARB(GLuint index, GLenum pname, GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->RestoreVao( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             _context->vao->GetAttrib( index, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetVertexAttribivARB)(index, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreAsmProgram( _context, target );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glProgramEnvParameter4dARB)(target, index, x, y, z, w);
}

static void REGAL_CALL emu_glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreAsmProgram( _context, target );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glProgramEnvParameter4dvARB)(target, index, params);
}

static void REGAL_CALL emu_glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreAsmProgram( _context, target );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glProgramEnvParameter4fARB)(target, index, x, y, z, w);
}

static void REGAL_CALL emu_glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreAsmProgram( _context, target );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glProgramEnvParameter4fvARB)(target, index, params);
}

static void REGAL_CALL emu_glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreAsmProgram( _context, target );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glProgramLocalParameter4dARB)(target, index, x, y, z, w);
}

static void REGAL_CALL emu_glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreAsmProgram( _context, target );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glProgramLocalParameter4dvARB)(target, index, params);
}

static void REGAL_CALL emu_glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreAsmProgram( _context, target );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glProgramLocalParameter4fARB)(target, index, x, y, z, w);
}

static void REGAL_CALL emu_glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreAsmProgram( _context, target );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glProgramLocalParameter4fvARB)(target, index, params);
}

static void REGAL_CALL emu_glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->RestoreVao( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             return _context->vao->AttribPointer( _context, index, size, type, normalized, stride, pointer );
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glVertexAttribPointerARB)(index, size, type, normalized, stride, pointer);
         break;
       }

   }

}

// GL_ARB_vertex_shader

// GL_ARB_vertex_type_2_10_10_10_rev

// GL_ARB_viewport_array

static void REGAL_CALL emu_glGetDoublei_v(GLenum target, GLuint index, GLdouble *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             if ( ! _context->dsa->GetIndexedv( _context, target, index, v ) ) {
                 _context->dispatcher.emulation.glGetDoublei_v( target, index, v );
             }
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetDoublei_v)(target, index, v);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetFloati_v(GLenum target, GLuint index, GLfloat *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             if ( ! _context->dsa->GetIndexedv( _context, target, index, v ) ) {
                 _context->dispatcher.emulation.glGetFloati_v( target, index, v );
             }
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetFloati_v)(target, index, v);
         break;
       }

   }

}

// GL_ARB_window_pos

// GL_ATI_draw_buffers

// GL_ATI_element_array

static void REGAL_CALL emu_glDrawElementArrayATI(GLenum mode, GLsizei count)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->Restore( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->PreDraw( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             // _context->vao->Validate( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glDrawElementArrayATI)(mode, count);
}

// GL_ATI_envmap_bumpmap

// GL_ATI_fragment_shader

// GL_ATI_map_object_buffer

// GL_ATI_pn_triangles

// GL_ATI_separate_stencil

// GL_ATI_vertex_array_object

// GL_ATI_vertex_attrib_array_object

// GL_ATI_vertex_streams

// GL_EXT_bindable_uniform

// GL_EXT_blend_color

// GL_EXT_blend_equation_separate

// GL_EXT_blend_func_separate

// GL_EXT_blend_minmax

// GL_EXT_color_subtable

// GL_EXT_compiled_vertex_array

// GL_EXT_convolution

// GL_EXT_coordinate_frame

// GL_EXT_copy_texture

// GL_EXT_cull_vertex

// GL_EXT_debug_marker

// GL_EXT_depth_bounds_test

// GL_EXT_direct_state_access

static void REGAL_CALL emu_glBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->ShadowMultiTexBinding( texunit, target, texture );
         }
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dsa->ShadowDsaTexture( target, texture );
             _context->dispatcher.emulation.glBindTexture( target, texture );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glBindMultiTextureEXT)(texunit, target, texture);
         break;
       }

   }

}

static GLenum REGAL_CALL emu_glCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, framebuffer);
             return _context->dispatcher.emulation.glCheckFramebufferStatus( target );
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         return _context->dispatcher.call(&_context->dispatcher.table().glCheckNamedFramebufferStatusEXT)(framebuffer, target);
       }

   }

}

static void REGAL_CALL emu_glClientAttribDefaultEXT(GLbitfield mask)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->ClientAttribDefault( _context, mask );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glClientAttribDefaultEXT)(mask);
         break;
       }

   }

}

static void REGAL_CALL emu_glCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glCompressedTexImage1D( target, level, internalformat, width, border, imageSize, data );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glCompressedMultiTexImage1DEXT)(texunit, target, level, internalformat, width, border, imageSize, data);
         break;
       }

   }

}

static void REGAL_CALL emu_glCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glCompressedTexImage2D( target, level, internalformat, width, height, border, imageSize, bits );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glCompressedMultiTexImage2DEXT)(texunit, target, level, internalformat, width, height, border, imageSize, bits);
         break;
       }

   }

}

static void REGAL_CALL emu_glCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glCompressedTexImage3D( target, level, internalformat, width, height, depth, border, imageSize, bits );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glCompressedMultiTexImage3DEXT)(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
         break;
       }

   }

}

static void REGAL_CALL emu_glCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glCompressedTexSubImage1D( target, level, xoffset, width, format, imageSize, data );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glCompressedMultiTexSubImage1DEXT)(texunit, target, level, xoffset, width, format, imageSize, data);
         break;
       }

   }

}

static void REGAL_CALL emu_glCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glCompressedTexSubImage2D( target, level, xoffset, yoffset, width, height, format, imageSize, data );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glCompressedMultiTexSubImage2DEXT)(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, data);
         break;
       }

   }

}

static void REGAL_CALL emu_glCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glCompressedTexSubImage3D( target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glCompressedMultiTexSubImage3DEXT)(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
         break;
       }

   }

}

static void REGAL_CALL emu_glCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glCompressedTexImage1D( target, level, internalformat, width, border, imageSize, bits );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glCompressedTextureImage1DEXT)(texture, target, level, internalformat, width, border, imageSize, bits);
         break;
       }

   }

}

static void REGAL_CALL emu_glCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glCompressedTexImage2D( target, level, internalformat, width, height, border, imageSize, bits );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glCompressedTextureImage2DEXT)(texture, target, level, internalformat, width, height, border, imageSize, bits);
         break;
       }

   }

}

static void REGAL_CALL emu_glCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glCompressedTexImage3D( target, level, internalformat, width, height, depth, border, imageSize, bits );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glCompressedTextureImage3DEXT)(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
         break;
       }

   }

}

static void REGAL_CALL emu_glCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glCompressedTexSubImage1D( target, level, xoffset, width, format, imageSize, bits );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glCompressedTextureSubImage1DEXT)(texture, target, level, xoffset, width, format, imageSize, bits);
         break;
       }

   }

}

static void REGAL_CALL emu_glCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glCompressedTexSubImage2D( target, level, xoffset, yoffset, width, height, format, imageSize, bits );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glCompressedTextureSubImage2DEXT)(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
         break;
       }

   }

}

static void REGAL_CALL emu_glCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glCompressedTexSubImage3D( target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glCompressedTextureSubImage3DEXT)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
         break;
       }

   }

}

static void REGAL_CALL emu_glCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glCopyTexImage1D( target, level, internalformat, x, y, width, border );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glCopyMultiTexImage1DEXT)(texunit, target, level, internalformat, x, y, width, border);
         break;
       }

   }

}

static void REGAL_CALL emu_glCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glCopyTexImage2D( target, level, internalformat, x, y, width, height, border );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glCopyMultiTexImage2DEXT)(texunit, target, level, internalformat, x, y, width, height, border);
         break;
       }

   }

}

static void REGAL_CALL emu_glCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glCopyTexSubImage1D( target, level, xoffset, x, y, width );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glCopyMultiTexSubImage1DEXT)(texunit, target, level, xoffset, x, y, width);
         break;
       }

   }

}

static void REGAL_CALL emu_glCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glCopyTexSubImage2D( target, level, xoffset, yoffset, x, y, width, height );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glCopyMultiTexSubImage2DEXT)(texunit, target, level, xoffset, yoffset, x, y, width, height);
         break;
       }

   }

}

static void REGAL_CALL emu_glCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glCopyTexSubImage3D( target, level, xoffset, yoffset, zoffset, x, y, width, height );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glCopyMultiTexSubImage3DEXT)(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
         break;
       }

   }

}

static void REGAL_CALL emu_glCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glCopyTexImage1D( target, level, internalformat, x, y, width, border );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glCopyTextureImage1DEXT)(texture, target, level, internalformat, x, y, width, border);
         break;
       }

   }

}

static void REGAL_CALL emu_glCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glCopyTexImage2D( target, level, internalformat, x, y, width, height, border );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glCopyTextureImage2DEXT)(texture, target, level, internalformat, x, y, width, height, border);
         break;
       }

   }

}

static void REGAL_CALL emu_glCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glCopyTexSubImage1D( target, level, xoffset, x, y, width );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glCopyTextureSubImage1DEXT)(texture, target, level, xoffset, x, y, width);
         break;
       }

   }

}

static void REGAL_CALL emu_glCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glCopyTexSubImage2D( target, level, xoffset, yoffset, x, y, width, height );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glCopyTextureSubImage2DEXT)(texture, target, level, xoffset, yoffset, x, y, width, height);
         break;
       }

   }

}

static void REGAL_CALL emu_glCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glCopyTexSubImage3D( target, level, xoffset, yoffset, zoffset, x, y, width, height );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glCopyTextureSubImage3DEXT)(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
         break;
       }

   }

}

static void REGAL_CALL emu_glDisableClientStateIndexedEXT(GLenum array, GLuint index)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaClientActiveTexture( _context, index + GL_TEXTURE0 );
             _context->dispatcher.emulation.glDisableClientState( array );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glDisableClientStateIndexedEXT)(array, index);
         break;
       }

   }

}

static void REGAL_CALL emu_glDisableClientStateiEXT(GLenum array, GLuint index)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaClientActiveTexture( _context, index + GL_TEXTURE0 );
             _context->dispatcher.emulation.glDisableClientState( array );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glDisableClientStateiEXT)(array, index);
         break;
       }

   }

}

static void REGAL_CALL emu_glEnableClientStateIndexedEXT(GLenum array, GLuint index)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaClientActiveTexture( _context, index + GL_TEXTURE0 );
             _context->dispatcher.emulation.glEnableClientState( array );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glEnableClientStateIndexedEXT)(array, index);
         break;
       }

   }

}

static void REGAL_CALL emu_glEnableClientStateiEXT(GLenum array, GLuint index)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaClientActiveTexture( _context, index + GL_TEXTURE0 );
             _context->dispatcher.emulation.glEnableClientState( array );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glEnableClientStateiEXT)(array, index);
         break;
       }

   }

}

static void REGAL_CALL emu_glFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaBuffer( _context, buffer);
             _context->dispatcher.emulation.glFlushMappedBufferRange( GL_ARRAY_BUFFER, offset, length );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glFlushMappedNamedBufferRangeEXT)(buffer, offset, length);
         break;
       }

   }

}

static void REGAL_CALL emu_glFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, framebuffer);
             _context->dispatcher.emulation.glDrawBuffer( mode );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glFramebufferDrawBufferEXT)(framebuffer, mode);
         break;
       }

   }

}

static void REGAL_CALL emu_glFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum *bufs)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, framebuffer);
             _context->dispatcher.emulation.glDrawBuffers( n, bufs );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glFramebufferDrawBuffersEXT)(framebuffer, n, bufs);
         break;
       }

   }

}

static void REGAL_CALL emu_glFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, framebuffer);
             _context->dispatcher.emulation.glReadBuffer( mode );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glFramebufferReadBufferEXT)(framebuffer, mode);
         break;
       }

   }

}

static void REGAL_CALL emu_glGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glGenerateMipmap( target );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGenerateMultiTexMipmapEXT)(texunit, target);
         break;
       }

   }

}

static void REGAL_CALL emu_glGenerateTextureMipmapEXT(GLuint texture, GLenum target)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glGenerateMipmap( target );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGenerateTextureMipmapEXT)(texture, target);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, GLvoid *img)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glGetCompressedTexImage( target, lod, img );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetCompressedMultiTexImageEXT)(texunit, target, lod, img);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, GLvoid *img)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glGetCompressedTexImage( target, lod, img );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetCompressedTextureImageEXT)(texture, target, lod, img);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetDoubleIndexedvEXT(GLenum target, GLuint index, GLdouble *data)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             if ( ! _context->dsa->GetIndexedv( _context, target, index, data ) ) {
                 _context->dispatcher.emulation.glGetDoubleIndexedvEXT( target, index, data );
             }
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetDoubleIndexedvEXT)(target, index, data);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetDoublei_vEXT(GLenum target, GLuint index, GLdouble *data)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             if ( ! _context->dsa->GetIndexedv( _context, target, index, data ) ) {
                 _context->dispatcher.emulation.glGetDoublei_vEXT( target, index, data );
             }
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetDoublei_vEXT)(target, index, data);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetFloatIndexedvEXT(GLenum target, GLuint index, GLfloat *data)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             if ( ! _context->dsa->GetIndexedv( _context, target, index, data ) ) {
                 _context->dispatcher.emulation.glGetFloatIndexedvEXT( target, index, data );
             }
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetFloatIndexedvEXT)(target, index, data);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetFloati_vEXT(GLenum target, GLuint index, GLfloat *data)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             if ( ! _context->dsa->GetIndexedv( _context, target, index, data ) ) {
                 _context->dispatcher.emulation.glGetFloati_vEXT( target, index, data );
             }
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetFloati_vEXT)(target, index, data);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, framebuffer );
             _context->dispatcher.emulation.glGetIntegerv( pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetFramebufferParameterivEXT)(framebuffer, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glGetTexEnvfv( target, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetMultiTexEnvfvEXT)(texunit, target, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glGetTexEnviv( target, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetMultiTexEnvivEXT)(texunit, target, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glGetTexGendv( coord, pname, params );
             return;
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->RestoreVao( _context );
             if ( ! _context->iff->GetMultiTexGenv( _context, texunit, coord, pname, params ) ) {
                 _context->dispatcher.emulation.glGetMultiTexGendvEXT( texunit, coord, pname, params );
             }
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetMultiTexGendvEXT)(texunit, coord, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glGetTexGenfv( coord, pname, params );
             return;
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->RestoreVao( _context );
             if ( ! _context->iff->GetMultiTexGenv( _context, texunit, coord, pname, params ) ) {
                 _context->dispatcher.emulation.glGetMultiTexGenfvEXT( texunit, coord, pname, params );
             }
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetMultiTexGenfvEXT)(texunit, coord, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glGetTexGeniv( coord, pname, params );
             return;
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->RestoreVao( _context );
             if ( ! _context->iff->GetMultiTexGenv( _context, texunit, coord, pname, params ) ) {
                 _context->dispatcher.emulation.glGetMultiTexGenivEXT( texunit, coord, pname, params );
             }
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetMultiTexGenivEXT)(texunit, coord, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glGetTexImage( target, level, format, type, pixels );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetMultiTexImageEXT)(texunit, target, level, format, type, pixels);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glGetTexLevelParameterfv( target, level, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetMultiTexLevelParameterfvEXT)(texunit, target, level, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glGetTexLevelParameteriv( target, level, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetMultiTexLevelParameterivEXT)(texunit, target, level, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glGetTexParameterIiv( target, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetMultiTexParameterIivEXT)(texunit, target, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glGetTexParameterIuiv( target, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetMultiTexParameterIuivEXT)(texunit, target, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glGetTexParameterfv( target, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetMultiTexParameterfvEXT)(texunit, target, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glGetTexParameteriv( target, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetMultiTexParameterivEXT)(texunit, target, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaBuffer( _context, buffer);
             _context->dispatcher.emulation.glGetBufferParameteriv( GL_ARRAY_BUFFER, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetNamedBufferParameterivEXT)(buffer, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, GLvoid **params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaBuffer( _context, buffer);
             _context->dispatcher.emulation.glGetBufferPointerv( GL_ARRAY_BUFFER, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetNamedBufferPointervEXT)(buffer, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaBuffer( _context, buffer);
             _context->dispatcher.emulation.glGetBufferSubData( GL_ARRAY_BUFFER, offset, size, data );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetNamedBufferSubDataEXT)(buffer, offset, size, data);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, framebuffer);
             _context->dispatcher.emulation.glGetFramebufferAttachmentParameteriv( GL_FRAMEBUFFER, attachment, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetNamedFramebufferAttachmentParameterivEXT)(framebuffer, attachment, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaAsmProgram( _context, target, program);
             _context->dispatcher.emulation.glGetProgramLocalParameterIivNV( target, index, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetNamedProgramLocalParameterIivEXT)(program, target, index, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, GLuint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaAsmProgram( _context, target, program);
             _context->dispatcher.emulation.glGetProgramLocalParameterIuivNV( target, index, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetNamedProgramLocalParameterIuivEXT)(program, target, index, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaAsmProgram( _context, target, program);
             _context->dispatcher.emulation.glGetProgramLocalParameterdvARB( target, index, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetNamedProgramLocalParameterdvEXT)(program, target, index, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaAsmProgram( _context, target, program);
             _context->dispatcher.emulation.glGetProgramLocalParameterfvARB( target, index, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetNamedProgramLocalParameterfvEXT)(program, target, index, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, GLvoid *string)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaAsmProgram( _context, target, program);
             _context->dispatcher.emulation.glGetProgramStringARB( target, pname, string );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetNamedProgramStringEXT)(program, target, pname, string);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaAsmProgram( _context, target, program);
             _context->dispatcher.emulation.glGetProgramivARB( target, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetNamedProgramivEXT)(program, target, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, renderbuffer);
             _context->dispatcher.emulation.glGetRenderbufferParameteriv( GL_FRAMEBUFFER, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetNamedRenderbufferParameterivEXT)(renderbuffer, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetPointerIndexedvEXT(GLenum target, GLuint index, GLvoid **data)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             // if ( ! _context->dsa->GetIndexedv( _context, target, index, data ) ) {
             //     _context->dispatcher.emulation.glGetPointerIndexedvEXT( target, index, data );
             // }
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetPointerIndexedvEXT)(target, index, data);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glGetTexImage( target, level, format, type, pixels );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetTextureImageEXT)(texture, target, level, format, type, pixels);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glGetTexLevelParameterfv( target, level, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetTextureLevelParameterfvEXT)(texture, target, level, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glGetTexLevelParameteriv( target, level, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetTextureLevelParameterivEXT)(texture, target, level, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glGetTexParameterIiv( target, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetTextureParameterIivEXT)(texture, target, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glGetTexParameterIuiv( target, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetTextureParameterIuivEXT)(texture, target, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, GLfloat *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glGetTexParameterfv( target, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetTextureParameterfvEXT)(texture, target, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glGetTexParameteriv( target, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glGetTextureParameterivEXT)(texture, target, pname, params);
         break;
       }

   }

}

static GLvoid *REGAL_CALL emu_glMapNamedBufferEXT(GLuint buffer, GLenum access)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaBuffer( _context, buffer);
             return _context->dispatcher.emulation.glMapBuffer( GL_ARRAY_BUFFER, access );
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         return _context->dispatcher.call(&_context->dispatcher.table().glMapNamedBufferEXT)(buffer, access);
       }

   }

}

static GLvoid *REGAL_CALL emu_glMapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaBuffer( _context, buffer);
             return _context->dispatcher.emulation.glMapBufferRange( GL_ARRAY_BUFFER, offset, length, access );
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         return _context->dispatcher.call(&_context->dispatcher.table().glMapNamedBufferRangeEXT)(buffer, offset, length, access);
       }

   }

}

static void REGAL_CALL emu_glMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaMatrixMode( _context, mode );
             _context->dispatcher.emulation.glFrustum( left, right, bottom, top, zNear, zFar );
             return;
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->MatrixFrustum( mode, left, right, bottom, top, zNear, zFar );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMatrixFrustumEXT)(mode, left, right, bottom, top, zNear, zFar);
         break;
       }

   }

}

static void REGAL_CALL emu_glMatrixLoadIdentityEXT(GLenum mode)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaMatrixMode( _context, mode );
             _context->dispatcher.emulation.glLoadIdentity(  );
             return;
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->MatrixLoadIdentity( mode );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMatrixLoadIdentityEXT)(mode);
         break;
       }

   }

}

static void REGAL_CALL emu_glMatrixLoadTransposedEXT(GLenum mode, const GLdouble *m)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaMatrixMode( _context, mode );
             _context->dispatcher.emulation.glLoadTransposeMatrixd( m );
             return;
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->MatrixLoadTranspose( mode, m );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMatrixLoadTransposedEXT)(mode, m);
         break;
       }

   }

}

static void REGAL_CALL emu_glMatrixLoadTransposefEXT(GLenum mode, const GLfloat *m)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaMatrixMode( _context, mode );
             _context->dispatcher.emulation.glLoadTransposeMatrixf( m );
             return;
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->MatrixLoadTranspose( mode, m );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMatrixLoadTransposefEXT)(mode, m);
         break;
       }

   }

}

static void REGAL_CALL emu_glMatrixLoaddEXT(GLenum mode, const GLdouble *m)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaMatrixMode( _context, mode );
             _context->dispatcher.emulation.glLoadMatrixd( m );
             return;
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->MatrixLoad( mode, m );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMatrixLoaddEXT)(mode, m);
         break;
       }

   }

}

static void REGAL_CALL emu_glMatrixLoadfEXT(GLenum mode, const GLfloat *m)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaMatrixMode( _context, mode );
             _context->dispatcher.emulation.glLoadMatrixf( m );
             return;
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->MatrixLoad( mode, m );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMatrixLoadfEXT)(mode, m);
         break;
       }

   }

}

static void REGAL_CALL emu_glMatrixMultTransposedEXT(GLenum mode, const GLdouble *m)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaMatrixMode( _context, mode );
             _context->dispatcher.emulation.glMultTransposeMatrixd( m );
             return;
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->MatrixMultTranspose( mode, m );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMatrixMultTransposedEXT)(mode, m);
         break;
       }

   }

}

static void REGAL_CALL emu_glMatrixMultTransposefEXT(GLenum mode, const GLfloat *m)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaMatrixMode( _context, mode );
             _context->dispatcher.emulation.glMultTransposeMatrixf( m );
             return;
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->MatrixMultTranspose( mode, m );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMatrixMultTransposefEXT)(mode, m);
         break;
       }

   }

}

static void REGAL_CALL emu_glMatrixMultdEXT(GLenum mode, const GLdouble *m)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaMatrixMode( _context, mode );
             _context->dispatcher.emulation.glMultMatrixd( m );
             return;
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->MatrixMult( mode, m );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMatrixMultdEXT)(mode, m);
         break;
       }

   }

}

static void REGAL_CALL emu_glMatrixMultfEXT(GLenum mode, const GLfloat *m)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaMatrixMode( _context, mode );
             _context->dispatcher.emulation.glMultMatrixf( m );
             return;
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->MatrixMult( mode, m );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMatrixMultfEXT)(mode, m);
         break;
       }

   }

}

static void REGAL_CALL emu_glMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaMatrixMode( _context, mode );
             _context->dispatcher.emulation.glOrtho( left, right, bottom, top, zNear, zFar );
             return;
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->MatrixOrtho( mode, left, right, bottom, top, zNear, zFar );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMatrixOrthoEXT)(mode, left, right, bottom, top, zNear, zFar);
         break;
       }

   }

}

static void REGAL_CALL emu_glMatrixPopEXT(GLenum mode)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaMatrixMode( _context, mode );
             _context->dispatcher.emulation.glPopMatrix(  );
             return;
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->MatrixPop( mode );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMatrixPopEXT)(mode);
         break;
       }

   }

}

static void REGAL_CALL emu_glMatrixPushEXT(GLenum mode)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaMatrixMode( _context, mode );
             _context->dispatcher.emulation.glPushMatrix(  );
             return;
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->MatrixPush( mode );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMatrixPushEXT)(mode);
         break;
       }

   }

}

static void REGAL_CALL emu_glMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaMatrixMode( _context, mode );
             _context->dispatcher.emulation.glRotated( angle, x, y, z );
             return;
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->MatrixRotate( mode, angle, x, y, z );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMatrixRotatedEXT)(mode, angle, x, y, z);
         break;
       }

   }

}

static void REGAL_CALL emu_glMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaMatrixMode( _context, mode );
             _context->dispatcher.emulation.glRotatef( angle, x, y, z );
             return;
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->MatrixRotate( mode, angle, x, y, z );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMatrixRotatefEXT)(mode, angle, x, y, z);
         break;
       }

   }

}

static void REGAL_CALL emu_glMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaMatrixMode( _context, mode );
             _context->dispatcher.emulation.glScaled( x, y, z );
             return;
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->MatrixScale( mode, x, y, z );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMatrixScaledEXT)(mode, x, y, z);
         break;
       }

   }

}

static void REGAL_CALL emu_glMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaMatrixMode( _context, mode );
             _context->dispatcher.emulation.glScalef( x, y, z );
             return;
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->MatrixScale( mode, x, y, z );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMatrixScalefEXT)(mode, x, y, z);
         break;
       }

   }

}

static void REGAL_CALL emu_glMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaMatrixMode( _context, mode );
             _context->dispatcher.emulation.glTranslated( x, y, z );
             return;
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->MatrixTranslate( mode, x, y, z );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMatrixTranslatedEXT)(mode, x, y, z);
         break;
       }

   }

}

static void REGAL_CALL emu_glMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaMatrixMode( _context, mode );
             _context->dispatcher.emulation.glTranslatef( x, y, z );
             return;
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->MatrixTranslate( mode, x, y, z );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMatrixTranslatefEXT)(mode, x, y, z);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glTexBuffer( target, internalformat, buffer );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexBufferEXT)(texunit, target, internalformat, buffer);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaClientActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glTexCoordPointer( size, type, stride, pointer );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexCoordPointerEXT)(texunit, size, type, stride, pointer);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glTexEnvf( target, pname, param );
             return;
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->TexEnv( texunit, target, pname, param );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexEnvfEXT)(texunit, target, pname, param);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glTexEnvfv( target, pname, params );
             return;
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->TexEnv( texunit, target, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexEnvfvEXT)(texunit, target, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glTexEnvi( target, pname, param );
             return;
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->TexEnv( texunit, target, pname, param );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexEnviEXT)(texunit, target, pname, param);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glTexEnviv( target, pname, params );
             return;
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->TexEnv( texunit, target, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexEnvivEXT)(texunit, target, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glTexGend( coord, pname, param );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexGendEXT)(texunit, coord, pname, param);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glTexGendv( coord, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexGendvEXT)(texunit, coord, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glTexGenf( coord, pname, param );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexGenfEXT)(texunit, coord, pname, param);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glTexGenfv( coord, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexGenfvEXT)(texunit, coord, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glTexGeni( coord, pname, param );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexGeniEXT)(texunit, coord, pname, param);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glTexGeniv( coord, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexGenivEXT)(texunit, coord, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->ShadowMultiTexInfo( texunit, target, internalformat );
         }
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glTexImage1D( target, level, internalformat, width, border, format, type, pixels );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexImage1DEXT)(texunit, target, level, internalformat, width, border, format, type, pixels);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->ShadowMultiTexInfo( texunit, target, internalformat );
         }
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glTexImage2D( target, level, internalformat, width, height, border, format, type, pixels );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexImage2DEXT)(texunit, target, level, internalformat, width, height, border, format, type, pixels);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->ShadowMultiTexInfo( texunit, target, internalformat );
         }
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glTexImage3D( target, level, internalformat, width, height, depth, border, format, type, pixels );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexImage3DEXT)(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glTexParameterIiv( target, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexParameterIivEXT)(texunit, target, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glTexParameterIuiv( target, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexParameterIuivEXT)(texunit, target, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glTexParameterf( target, pname, param );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexParameterfEXT)(texunit, target, pname, param);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *param)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glTexParameterfv( target, pname, param );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexParameterfvEXT)(texunit, target, pname, param);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glTexParameteri( target, pname, param );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexParameteriEXT)(texunit, target, pname, param);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *param)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glTexParameteriv( target, pname, param );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexParameterivEXT)(texunit, target, pname, param);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glTexRenderbufferNV( target, renderbuffer );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexRenderbufferEXT)(texunit, target, renderbuffer);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glTexSubImage1D( target, level, xoffset, width, format, type, pixels );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexSubImage1DEXT)(texunit, target, level, xoffset, width, format, type, pixels);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glTexSubImage2D( target, level, xoffset, yoffset, width, height, format, type, pixels );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexSubImage2DEXT)(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
         break;
       }

   }

}

static void REGAL_CALL emu_glMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, texunit );
             _context->dispatcher.emulation.glTexSubImage3D( target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glMultiTexSubImage3DEXT)(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
         break;
       }

   }

}

static void REGAL_CALL emu_glNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaBuffer( _context, buffer);
             _context->dispatcher.emulation.glBufferData( GL_ARRAY_BUFFER, size, data, usage );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNamedBufferDataEXT)(buffer, size, data, usage);
         break;
       }

   }

}

static void REGAL_CALL emu_glNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaBuffer( _context, buffer);
             _context->dispatcher.emulation.glBufferSubData( GL_ARRAY_BUFFER, offset, size, data );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNamedBufferSubDataEXT)(buffer, offset, size, data);
         break;
       }

   }

}

static void REGAL_CALL emu_glNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaBuffer( _context, readBuffer);
             _context->dispatcher.emulation.glCopyBufferSubData( GL_ARRAY_BUFFER, writeBuffer, readOffset, writeOffset, size );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNamedCopyBufferSubDataEXT)(readBuffer, writeBuffer, readOffset, writeOffset, size);
         break;
       }

   }

}

static void REGAL_CALL emu_glNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, framebuffer);
             _context->dispatcher.emulation.glFramebufferRenderbuffer( GL_FRAMEBUFFER, attachment, renderbuffertarget, renderbuffer );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNamedFramebufferRenderbufferEXT)(framebuffer, attachment, renderbuffertarget, renderbuffer);
         break;
       }

   }

}

static void REGAL_CALL emu_glNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, framebuffer);
             _context->dispatcher.emulation.glFramebufferTexture1D( GL_FRAMEBUFFER, attachment, textarget, texture, level );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNamedFramebufferTexture1DEXT)(framebuffer, attachment, textarget, texture, level);
         break;
       }

   }

}

static void REGAL_CALL emu_glNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, framebuffer);
             _context->dispatcher.emulation.glFramebufferTexture2D( GL_FRAMEBUFFER, attachment, textarget, texture, level );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNamedFramebufferTexture2DEXT)(framebuffer, attachment, textarget, texture, level);
         break;
       }

   }

}

static void REGAL_CALL emu_glNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, framebuffer);
             _context->dispatcher.emulation.glFramebufferTexture3D( GL_FRAMEBUFFER, attachment, textarget, texture, level, zoffset );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNamedFramebufferTexture3DEXT)(framebuffer, attachment, textarget, texture, level, zoffset);
         break;
       }

   }

}

static void REGAL_CALL emu_glNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, framebuffer);
             _context->dispatcher.emulation.glFramebufferTexture( GL_FRAMEBUFFER, attachment, texture, level );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNamedFramebufferTextureEXT)(framebuffer, attachment, texture, level);
         break;
       }

   }

}

static void REGAL_CALL emu_glNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, framebuffer);
             _context->dispatcher.emulation.glFramebufferTextureFace( GL_FRAMEBUFFER, attachment, texture, level, face );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNamedFramebufferTextureFaceEXT)(framebuffer, attachment, texture, level, face);
         break;
       }

   }

}

static void REGAL_CALL emu_glNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, framebuffer);
             _context->dispatcher.emulation.glFramebufferTextureLayer( GL_FRAMEBUFFER, attachment, texture, level, layer );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNamedFramebufferTextureLayerEXT)(framebuffer, attachment, texture, level, layer);
         break;
       }

   }

}

static void REGAL_CALL emu_glNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaAsmProgram( _context, target, program);
             _context->dispatcher.emulation.glProgramLocalParameter4dARB( target, index, x, y, z, w );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNamedProgramLocalParameter4dEXT)(program, target, index, x, y, z, w);
         break;
       }

   }

}

static void REGAL_CALL emu_glNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaAsmProgram( _context, target, program);
             _context->dispatcher.emulation.glProgramLocalParameter4dvARB( target, index, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNamedProgramLocalParameter4dvEXT)(program, target, index, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaAsmProgram( _context, target, program);
             _context->dispatcher.emulation.glProgramLocalParameter4fARB( target, index, x, y, z, w );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNamedProgramLocalParameter4fEXT)(program, target, index, x, y, z, w);
         break;
       }

   }

}

static void REGAL_CALL emu_glNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaAsmProgram( _context, target, program);
             _context->dispatcher.emulation.glProgramLocalParameter4fvARB( target, index, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNamedProgramLocalParameter4fvEXT)(program, target, index, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaAsmProgram( _context, target, program);
             _context->dispatcher.emulation.glProgramLocalParameterI4iNV( target, index, x, y, z, w );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNamedProgramLocalParameterI4iEXT)(program, target, index, x, y, z, w);
         break;
       }

   }

}

static void REGAL_CALL emu_glNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, const GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaAsmProgram( _context, target, program);
             _context->dispatcher.emulation.glProgramLocalParameterI4ivNV( target, index, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNamedProgramLocalParameterI4ivEXT)(program, target, index, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaAsmProgram( _context, target, program);
             _context->dispatcher.emulation.glProgramLocalParameterI4uiNV( target, index, x, y, z, w );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNamedProgramLocalParameterI4uiEXT)(program, target, index, x, y, z, w);
         break;
       }

   }

}

static void REGAL_CALL emu_glNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, const GLuint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaAsmProgram( _context, target, program);
             _context->dispatcher.emulation.glProgramLocalParameterI4uivNV( target, index, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNamedProgramLocalParameterI4uivEXT)(program, target, index, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaAsmProgram( _context, target, program);
             _context->dispatcher.emulation.glProgramLocalParameters4fvEXT( target, index, count, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNamedProgramLocalParameters4fvEXT)(program, target, index, count, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaAsmProgram( _context, target, program);
             _context->dispatcher.emulation.glProgramLocalParametersI4ivNV( target, index, count, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNamedProgramLocalParametersI4ivEXT)(program, target, index, count, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaAsmProgram( _context, target, program);
             _context->dispatcher.emulation.glProgramLocalParametersI4uivNV( target, index, count, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNamedProgramLocalParametersI4uivEXT)(program, target, index, count, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid *string)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaAsmProgram( _context, target, program);
             _context->dispatcher.emulation.glProgramStringARB( target, format, len, string );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNamedProgramStringEXT)(program, target, format, len, string);
         break;
       }

   }

}

static void REGAL_CALL emu_glNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, renderbuffer);
             _context->dispatcher.emulation.glRenderbufferStorage( GL_FRAMEBUFFER, internalformat, width, height );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNamedRenderbufferStorageEXT)(renderbuffer, internalformat, width, height);
         break;
       }

   }

}

static void REGAL_CALL emu_glNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, renderbuffer);
             _context->dispatcher.emulation.glRenderbufferStorageMultisampleCoverageNV( GL_FRAMEBUFFER, coverageSamples, colorSamples, internalformat, width, height );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNamedRenderbufferStorageMultisampleCoverageEXT)(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
         break;
       }

   }

}

static void REGAL_CALL emu_glNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaFramebuffer( _context, GL_FRAMEBUFFER, renderbuffer);
             _context->dispatcher.emulation.glRenderbufferStorageMultisampleEXT( GL_FRAMEBUFFER, samples, internalformat, width, height );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glNamedRenderbufferStorageMultisampleEXT)(renderbuffer, samples, internalformat, width, height);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniform1dEXT(GLuint program, GLint location, GLdouble x)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniform1d( location, x );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniform1dEXT)(program, location, x);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniform1dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniform1dv( location, count, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniform1dvEXT)(program, location, count, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniform1f( location, v0 );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniform1fEXT)(program, location, v0);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniform1fv( location, count, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniform1fvEXT)(program, location, count, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniform1iEXT(GLuint program, GLint location, GLint v0)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniform1i( location, v0 );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniform1iEXT)(program, location, v0);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniform1iv( location, count, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniform1ivEXT)(program, location, count, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniform1ui( location, v0 );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniform1uiEXT)(program, location, v0);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniform1uiv( location, count, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniform1uivEXT)(program, location, count, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniform2d( location, x, y );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniform2dEXT)(program, location, x, y);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniform2dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniform2dv( location, count, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniform2dvEXT)(program, location, count, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniform2f( location, v0, v1 );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniform2fEXT)(program, location, v0, v1);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniform2fv( location, count, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniform2fvEXT)(program, location, count, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniform2i( location, v0, v1 );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniform2iEXT)(program, location, v0, v1);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniform2iv( location, count, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniform2ivEXT)(program, location, count, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniform2ui( location, v0, v1 );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniform2uiEXT)(program, location, v0, v1);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniform2uiv( location, count, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniform2uivEXT)(program, location, count, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniform3d( location, x, y, z );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniform3dEXT)(program, location, x, y, z);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniform3dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniform3dv( location, count, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniform3dvEXT)(program, location, count, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniform3f( location, v0, v1, v2 );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniform3fEXT)(program, location, v0, v1, v2);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniform3fv( location, count, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniform3fvEXT)(program, location, count, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniform3i( location, v0, v1, v2 );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniform3iEXT)(program, location, v0, v1, v2);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniform3iv( location, count, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniform3ivEXT)(program, location, count, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniform3ui( location, v0, v1, v2 );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniform3uiEXT)(program, location, v0, v1, v2);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniform3uiv( location, count, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniform3uivEXT)(program, location, count, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniform4d( location, x, y, z, w );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniform4dEXT)(program, location, x, y, z, w);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniform4dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniform4dv( location, count, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniform4dvEXT)(program, location, count, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniform4f( location, v0, v1, v2, v3 );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniform4fEXT)(program, location, v0, v1, v2, v3);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniform4fv( location, count, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniform4fvEXT)(program, location, count, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniform4i( location, v0, v1, v2, v3 );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniform4iEXT)(program, location, v0, v1, v2, v3);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniform4iv( location, count, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniform4ivEXT)(program, location, count, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniform4ui( location, v0, v1, v2, v3 );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniform4uiEXT)(program, location, v0, v1, v2, v3);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniform4uiv( location, count, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniform4uivEXT)(program, location, count, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniformMatrix2dv( location, count, transpose, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniformMatrix2dvEXT)(program, location, count, transpose, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniformMatrix2fv( location, count, transpose, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniformMatrix2fvEXT)(program, location, count, transpose, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniformMatrix2x3dv( location, count, transpose, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniformMatrix2x3dvEXT)(program, location, count, transpose, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniformMatrix2x3fv( location, count, transpose, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniformMatrix2x3fvEXT)(program, location, count, transpose, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniformMatrix2x4dv( location, count, transpose, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniformMatrix2x4dvEXT)(program, location, count, transpose, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniformMatrix2x4fv( location, count, transpose, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniformMatrix2x4fvEXT)(program, location, count, transpose, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniformMatrix3dv( location, count, transpose, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniformMatrix3dvEXT)(program, location, count, transpose, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniformMatrix3fv( location, count, transpose, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniformMatrix3fvEXT)(program, location, count, transpose, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniformMatrix3x2dv( location, count, transpose, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniformMatrix3x2dvEXT)(program, location, count, transpose, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniformMatrix3x2fv( location, count, transpose, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniformMatrix3x2fvEXT)(program, location, count, transpose, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniformMatrix3x4dv( location, count, transpose, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniformMatrix3x4dvEXT)(program, location, count, transpose, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniformMatrix3x4fv( location, count, transpose, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniformMatrix3x4fvEXT)(program, location, count, transpose, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniformMatrix4dv( location, count, transpose, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniformMatrix4dvEXT)(program, location, count, transpose, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniformMatrix4fv( location, count, transpose, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniformMatrix4fvEXT)(program, location, count, transpose, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniformMatrix4x2dv( location, count, transpose, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniformMatrix4x2dvEXT)(program, location, count, transpose, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniformMatrix4x2fv( location, count, transpose, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniformMatrix4x2fvEXT)(program, location, count, transpose, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniformMatrix4x3dv( location, count, transpose, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniformMatrix4x3dvEXT)(program, location, count, transpose, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaGlslProgram( _context, program);
             _context->dispatcher.emulation.glUniformMatrix4x3fv( location, count, transpose, value );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glProgramUniformMatrix4x3fvEXT)(program, location, count, transpose, value);
         break;
       }

   }

}

static void REGAL_CALL emu_glPushClientAttribDefaultEXT(GLbitfield mask)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dispatcher.emulation.glPushClientAttrib( mask );
             _context->dsa->ClientAttribDefault( _context, mask );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glPushClientAttribDefaultEXT)(mask);
         break;
       }

   }

}

static void REGAL_CALL emu_glTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glTexBuffer( target, internalformat, buffer );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTextureBufferEXT)(texture, target, internalformat, buffer);
         break;
       }

   }

}

static void REGAL_CALL emu_glTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->ShadowTextureInfo( texture, target, internalformat );
         }
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glTexImage1D( target, level, internalformat, width, border, format, type, pixels );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTextureImage1DEXT)(texture, target, level, internalformat, width, border, format, type, pixels);
         break;
       }

   }

}

static void REGAL_CALL emu_glTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->ShadowTextureInfo( texture, target, internalformat );
         }
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glTexImage2D( target, level, internalformat, width, height, border, format, type, pixels );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTextureImage2DEXT)(texture, target, level, internalformat, width, height, border, format, type, pixels);
         break;
       }

   }

}

static void REGAL_CALL emu_glTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->ShadowTextureInfo( texture, target, internalformat );
         }
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glTexImage3D( target, level, internalformat, width, height, depth, border, format, type, pixels );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTextureImage3DEXT)(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
         break;
       }

   }

}

static void REGAL_CALL emu_glTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glTexParameterIiv( target, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTextureParameterIivEXT)(texture, target, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glTexParameterIuiv( target, pname, params );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTextureParameterIuivEXT)(texture, target, pname, params);
         break;
       }

   }

}

static void REGAL_CALL emu_glTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glTexParameterf( target, pname, param );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTextureParameterfEXT)(texture, target, pname, param);
         break;
       }

   }

}

static void REGAL_CALL emu_glTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const GLfloat *param)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glTexParameterfv( target, pname, param );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTextureParameterfvEXT)(texture, target, pname, param);
         break;
       }

   }

}

static void REGAL_CALL emu_glTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glTexParameteri( target, pname, param );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTextureParameteriEXT)(texture, target, pname, param);
         break;
       }

   }

}

static void REGAL_CALL emu_glTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *param)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glTexParameteriv( target, pname, param );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTextureParameterivEXT)(texture, target, pname, param);
         break;
       }

   }

}

static void REGAL_CALL emu_glTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glTexRenderbufferNV( target, renderbuffer );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTextureRenderbufferEXT)(texture, target, renderbuffer);
         break;
       }

   }

}

static void REGAL_CALL emu_glTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glTexSubImage1D( target, level, xoffset, width, format, type, pixels );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTextureSubImage1DEXT)(texture, target, level, xoffset, width, format, type, pixels);
         break;
       }

   }

}

static void REGAL_CALL emu_glTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glTexSubImage2D( target, level, xoffset, yoffset, width, height, format, type, pixels );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTextureSubImage2DEXT)(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
         break;
       }

   }

}

static void REGAL_CALL emu_glTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaTexture( _context, target, texture );
             _context->dispatcher.emulation.glTexSubImage3D( target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glTextureSubImage3DEXT)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
         break;
       }

   }

}

static GLboolean REGAL_CALL emu_glUnmapNamedBufferEXT(GLuint buffer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaBuffer( _context, buffer);
             return _context->dispatcher.emulation.glUnmapBuffer( GL_ARRAY_BUFFER );
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         return _context->dispatcher.call(&_context->dispatcher.table().glUnmapNamedBufferEXT)(buffer);
       }

   }

}

// GL_EXT_draw_buffers2

static void REGAL_CALL emu_glDisableIndexedEXT(GLenum target, GLuint index)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, index + GL_TEXTURE0 );
             _context->dispatcher.emulation.glDisable( target );
             return;
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->DisableIndexed( target, index );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glDisableIndexedEXT)(target, index);
         break;
       }

   }

}

static void REGAL_CALL emu_glEnableIndexedEXT(GLenum target, GLuint index)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->DsaActiveTexture( _context, index + GL_TEXTURE0 );
             _context->dispatcher.emulation.glEnable( target );
             return;
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->EnableIndexed( target, index );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glEnableIndexedEXT)(target, index);
         break;
       }

   }

}

static GLboolean REGAL_CALL emu_glIsEnabledIndexedEXT(GLenum target, GLuint index)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             GLboolean ret;
             ret = _context->dsa->IsEnabledIndexed( _context, target, index );
             return ret;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         return _context->dispatcher.call(&_context->dispatcher.table().glIsEnabledIndexedEXT)(target, index);
       }

   }

}

// GL_EXT_draw_instanced

static void REGAL_CALL emu_glDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->Restore( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->PreDraw( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             // _context->vao->Validate( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glDrawArraysInstancedEXT)(mode, start, count, primcount);
}

static void REGAL_CALL emu_glDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->Restore( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->PreDraw( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             // _context->vao->Validate( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glDrawElementsInstancedEXT)(mode, count, type, indices, primcount);
}

// GL_EXT_draw_range_elements

// GL_EXT_fog_coord

// GL_EXT_fragment_lighting

// GL_EXT_framebuffer_blit

// GL_EXT_framebuffer_multisample

static void REGAL_CALL emu_glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreFramebuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glRenderbufferStorageMultisampleEXT)(target, samples, internalformat, width, height);
}

// GL_EXT_framebuffer_object

static void REGAL_CALL emu_glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreFramebuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glFramebufferRenderbufferEXT)(target, attachment, renderbuffertarget, renderbuffer);
}

static void REGAL_CALL emu_glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreFramebuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glFramebufferTexture1DEXT)(target, attachment, textarget, texture, level);
}

static void REGAL_CALL emu_glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreFramebuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glFramebufferTexture2DEXT)(target, attachment, textarget, texture, level);
}

static void REGAL_CALL emu_glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreFramebuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glFramebufferTexture3DEXT)(target, attachment, textarget, texture, level, zoffset);
}

static void REGAL_CALL emu_glGenerateMipmapEXT(GLenum target)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreTexture( _context );
             _context->dsa->RestoreActiveTexture( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glGenerateMipmapEXT)(target);
}

static void REGAL_CALL emu_glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreFramebuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glRenderbufferStorageEXT)(target, internalformat, width, height);
}

// GL_EXT_geometry_shader4

static void REGAL_CALL emu_glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreFramebuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glFramebufferTextureEXT)(target, attachment, texture, level);
}

static void REGAL_CALL emu_glFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreFramebuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glFramebufferTextureFaceEXT)(target, attachment, texture, level, face);
}

// GL_EXT_gpu_program_parameters

// GL_EXT_gpu_shader4

// GL_EXT_histogram

// GL_EXT_index_func

// GL_EXT_index_material

// GL_EXT_light_texture

// GL_EXT_multi_draw_arrays

static void REGAL_CALL emu_glMultiDrawArraysEXT(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->Restore( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->PreDraw( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             // _context->vao->Validate( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glMultiDrawArraysEXT)(mode, first, count, primcount);
}

static void REGAL_CALL emu_glMultiDrawElementsEXT(GLenum mode, GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->Restore( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->PreDraw( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             // _context->vao->Validate( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glMultiDrawElementsEXT)(mode, count, type, indices, primcount);
}

// GL_EXT_multisample

// GL_EXT_paletted_texture

// GL_EXT_pixel_transform

// GL_EXT_point_parameters

// GL_EXT_polygon_offset

// GL_EXT_provoking_vertex

// GL_EXT_scene_marker

// GL_EXT_secondary_color

static void REGAL_CALL emu_glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), red, green, blue );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColor3bEXT)(red, green, blue);
         break;
       }

   }

}

static void REGAL_CALL emu_glSecondaryColor3bvEXT(const GLbyte *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColor3bvEXT)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), red, green, blue );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColor3dEXT)(red, green, blue);
         break;
       }

   }

}

static void REGAL_CALL emu_glSecondaryColor3dvEXT(const GLdouble *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColor3dvEXT)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), red, green, blue );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColor3fEXT)(red, green, blue);
         break;
       }

   }

}

static void REGAL_CALL emu_glSecondaryColor3fvEXT(const GLfloat *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->Attr<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColor3fvEXT)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glSecondaryColor3iEXT(GLint red, GLint green, GLint blue)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), red, green, blue );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColor3iEXT)(red, green, blue);
         break;
       }

   }

}

static void REGAL_CALL emu_glSecondaryColor3ivEXT(const GLint *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColor3ivEXT)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), red, green, blue );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColor3sEXT)(red, green, blue);
         break;
       }

   }

}

static void REGAL_CALL emu_glSecondaryColor3svEXT(const GLshort *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColor3svEXT)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), red, green, blue );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColor3ubEXT)(red, green, blue);
         break;
       }

   }

}

static void REGAL_CALL emu_glSecondaryColor3ubvEXT(const GLubyte *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColor3ubvEXT)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), red, green, blue );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColor3uiEXT)(red, green, blue);
         break;
       }

   }

}

static void REGAL_CALL emu_glSecondaryColor3uivEXT(const GLuint *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColor3uivEXT)(v);
         break;
       }

   }

}

static void REGAL_CALL emu_glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), red, green, blue );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColor3usEXT)(red, green, blue);
         break;
       }

   }

}

static void REGAL_CALL emu_glSecondaryColor3usvEXT(const GLushort *v)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) break;
         #endif
       default:
           break;
   }

   // impl
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->AttrN<3>( _context, _context->iff->AttrIndex( RFF2A_SecondaryColor ), v );
             return;
         }
         #endif
       default: {
         Dispatcher::ScopedStep stepDown(_context->dispatcher);
         _context->dispatcher.call(&_context->dispatcher.table().glSecondaryColor3usvEXT)(v);
         break;
       }

   }

}

// GL_EXT_separate_shader_objects

// GL_EXT_shader_image_load_store

// GL_EXT_stencil_clear_tag

// GL_EXT_stencil_two_side

// GL_EXT_subtexture

// GL_EXT_texture3D

static void REGAL_CALL emu_glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->ShadowTexInfo( target, internalformat );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glTexImage3DEXT)(target, level, internalformat, width, height, depth, border, format, type, pixels);
}

// GL_EXT_texture_array

static void REGAL_CALL emu_glFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreFramebuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glFramebufferTextureLayerEXT)(target, attachment, texture, level, layer);
}

// GL_EXT_texture_buffer_object

// GL_EXT_texture_integer

// GL_EXT_texture_object

static void REGAL_CALL emu_glBindTextureEXT(GLenum target, GLuint texture)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->ShadowTexBinding( target, texture );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glBindTextureEXT)(target, texture);
}

// GL_EXT_texture_perturb_normal

// GL_EXT_timer_query

// GL_EXT_transform_feedback

// GL_EXT_vertex_array

static void REGAL_CALL emu_glDrawArraysEXT(GLenum mode, GLint first, GLsizei count)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->Restore( _context );
         }
         #endif
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->PreDraw( _context );
         }
         #endif
       case 1 :
         #if REGAL_EMU_VAO
         if (_context->vao) {
             RegalEmuScopedActivate activate( _context, _context->vao );
             // _context->vao->Validate( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glDrawArraysEXT)(mode, first, count);
}

// GL_EXT_vertex_attrib_64bit

// GL_EXT_vertex_shader

// GL_EXT_vertex_weighting

// GL_EXT_x11_sync_object

// GL_GREMEDY_frame_terminator

// GL_GREMEDY_string_marker

// GL_HP_image_transform

// GL_IBM_multimode_draw_arrays

// GL_IBM_vertex_array_lists

// GL_INGR_blend_func_separate

// GL_INTEL_parallel_arrays

// GL_INTEL_texture_scissor

// GL_KHR_debug

// GL_KTX_buffer_region

// GL_MESA_resize_buffers

// GL_MESA_window_pos

// GL_NV_bindless_texture

// GL_NV_conditional_render

// GL_NV_copy_image

// GL_NV_depth_buffer_float

// GL_NV_evaluators

// GL_NV_explicit_multisample

static void REGAL_CALL emu_glTexRenderbufferNV(GLenum target, GLuint renderbuffer)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreTexture( _context );
             _context->dsa->RestoreActiveTexture( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glTexRenderbufferNV)(target, renderbuffer);
}

// GL_NV_fence

// GL_NV_fragment_program

// GL_NV_framebuffer_multisample_coverage

static void REGAL_CALL emu_glRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreFramebuffer( _context );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glRenderbufferStorageMultisampleCoverageNV)(target, coverageSamples, colorSamples, internalformat, width, height);
}

// GL_NV_geometry_program4

// GL_NV_gpu_program4

static void REGAL_CALL emu_glGetProgramEnvParameterIivNV(GLenum target, GLuint index, GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreAsmProgram( _context, target );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glGetProgramEnvParameterIivNV)(target, index, params);
}

static void REGAL_CALL emu_glGetProgramEnvParameterIuivNV(GLenum target, GLuint index, GLuint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreAsmProgram( _context, target );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glGetProgramEnvParameterIuivNV)(target, index, params);
}

static void REGAL_CALL emu_glGetProgramLocalParameterIivNV(GLenum target, GLuint index, GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreAsmProgram( _context, target );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glGetProgramLocalParameterIivNV)(target, index, params);
}

static void REGAL_CALL emu_glGetProgramLocalParameterIuivNV(GLenum target, GLuint index, GLuint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreAsmProgram( _context, target );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glGetProgramLocalParameterIuivNV)(target, index, params);
}

static void REGAL_CALL emu_glProgramEnvParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreAsmProgram( _context, target );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glProgramEnvParameterI4iNV)(target, index, x, y, z, w);
}

static void REGAL_CALL emu_glProgramEnvParameterI4ivNV(GLenum target, GLuint index, const GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreAsmProgram( _context, target );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glProgramEnvParameterI4ivNV)(target, index, params);
}

static void REGAL_CALL emu_glProgramEnvParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreAsmProgram( _context, target );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glProgramEnvParameterI4uiNV)(target, index, x, y, z, w);
}

static void REGAL_CALL emu_glProgramEnvParameterI4uivNV(GLenum target, GLuint index, const GLuint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreAsmProgram( _context, target );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glProgramEnvParameterI4uivNV)(target, index, params);
}

static void REGAL_CALL emu_glProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreAsmProgram( _context, target );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glProgramEnvParametersI4ivNV)(target, index, count, params);
}

static void REGAL_CALL emu_glProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreAsmProgram( _context, target );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glProgramEnvParametersI4uivNV)(target, index, count, params);
}

static void REGAL_CALL emu_glProgramLocalParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreAsmProgram( _context, target );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glProgramLocalParameterI4iNV)(target, index, x, y, z, w);
}

static void REGAL_CALL emu_glProgramLocalParameterI4ivNV(GLenum target, GLuint index, const GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreAsmProgram( _context, target );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glProgramLocalParameterI4ivNV)(target, index, params);
}

static void REGAL_CALL emu_glProgramLocalParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreAsmProgram( _context, target );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glProgramLocalParameterI4uiNV)(target, index, x, y, z, w);
}

static void REGAL_CALL emu_glProgramLocalParameterI4uivNV(GLenum target, GLuint index, const GLuint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreAsmProgram( _context, target );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glProgramLocalParameterI4uivNV)(target, index, params);
}

static void REGAL_CALL emu_glProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreAsmProgram( _context, target );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glProgramLocalParametersI4ivNV)(target, index, count, params);
}

static void REGAL_CALL emu_glProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
         #if REGAL_EMU_DSA
         if (_context->dsa) {
             RegalEmuScopedActivate activate( _context, _context->dsa );
             _context->dsa->RestoreAsmProgram( _context, target );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glProgramLocalParametersI4uivNV)(target, index, count, params);
}

// GL_NV_gpu_shader5

// GL_NV_half_float

// GL_NV_occlusion_query

// GL_NV_parameter_buffer_object

// GL_NV_path_rendering

// GL_NV_pixel_data_range

// GL_NV_point_sprite

// GL_NV_present_video

// GL_NV_primitive_restart

// GL_NV_register_combiners

// GL_NV_register_combiners2

// GL_NV_shader_buffer_load

// GL_NV_texture_barrier

// GL_NV_texture_multisample

static void REGAL_CALL emu_glTexImage2DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->ShadowTexInfo( target, internalFormat );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glTexImage2DMultisampleCoverageNV)(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
}

static void REGAL_CALL emu_glTexImage3DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->ShadowTexInfo( target, internalFormat );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glTexImage3DMultisampleCoverageNV)(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
}

// GL_NV_transform_feedback

// GL_NV_transform_feedback2

// GL_NV_vdpau_interop

// GL_NV_vertex_array_range

// GL_NV_vertex_attrib_integer_64bit

// GL_NV_vertex_buffer_unified_memory

// GL_NV_vertex_program

// GL_NV_video_capture

// GL_PGI_misc_hints

// GL_REGAL_ES1_1_compatibility

// GL_REGAL_log

// GL_SGIS_detail_texture

// GL_SGIS_fog_function

// GL_SGIS_multisample

// GL_SGIS_pixel_texture

// GL_SGIS_point_parameters

// GL_SGIS_sharpen_texture

// GL_SGIS_texture4D

static void REGAL_CALL emu_glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
   RegalContext *_context = GET_REGAL_CONTEXT();
   RegalAssert(_context);

   // prefix
   switch( _context->emuLevel ) {
       case 6 :
       case 5 :
       case 4 :
       case 3 :
       case 2 :
         #if REGAL_EMU_IFF
         if (_context->iff) {
             RegalEmuScopedActivate activate( _context, _context->iff );
             _context->iff->ShadowTexInfo( target, internalformat );
         }
         #endif
       default:
           break;
   }

   Dispatcher::ScopedStep stepDown(_context->dispatcher);
   _context->dispatcher.call(&_context->dispatcher.table().glTexImage4DSGIS)(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
}

// GL_SGIS_texture_color_mask

// GL_SGIS_texture_filter4

// GL_SGIX_async

// GL_SGIX_flush_raster

// GL_SGIX_fog_texture

// GL_SGIX_fragment_lighting

// GL_SGIX_framezoom

// GL_SGIX_igloo_interface

// GL_SGIX_instruments

// GL_SGIX_list_priority

// GL_SGIX_pixel_texture

// GL_SGIX_polynomial_ffd

// GL_SGIX_reference_plane

// GL_SGIX_sprite

// GL_SGIX_tag_sample_buffer

// GL_SGI_color_table

// GL_SUNX_constant_data

// GL_SUN_global_alpha

// GL_SUN_mesh_array

// GL_SUN_read_video_pixels

// GL_SUN_triangle_list

// GL_SUN_vertex

// GL_WIN_swap_hint

void InitDispatchTableEmu(DispatchTable &tbl)
{

// GL_VERSION_1_0

   tbl.glAlphaFunc = emu_glAlphaFunc;
   tbl.glBegin = emu_glBegin;
   tbl.glClearDepth = emu_glClearDepth;
   tbl.glClearStencil = emu_glClearStencil;
   tbl.glClipPlane = emu_glClipPlane;
   tbl.glColor3b = emu_glColor3b;
   tbl.glColor3bv = emu_glColor3bv;
   tbl.glColor3d = emu_glColor3d;
   tbl.glColor3dv = emu_glColor3dv;
   tbl.glColor3f = emu_glColor3f;
   tbl.glColor3fv = emu_glColor3fv;
   tbl.glColor3i = emu_glColor3i;
   tbl.glColor3iv = emu_glColor3iv;
   tbl.glColor3s = emu_glColor3s;
   tbl.glColor3sv = emu_glColor3sv;
   tbl.glColor3ub = emu_glColor3ub;
   tbl.glColor3ubv = emu_glColor3ubv;
   tbl.glColor3ui = emu_glColor3ui;
   tbl.glColor3uiv = emu_glColor3uiv;
   tbl.glColor3us = emu_glColor3us;
   tbl.glColor3usv = emu_glColor3usv;
   tbl.glColor4b = emu_glColor4b;
   tbl.glColor4bv = emu_glColor4bv;
   tbl.glColor4d = emu_glColor4d;
   tbl.glColor4dv = emu_glColor4dv;
   tbl.glColor4f = emu_glColor4f;
   tbl.glColor4fv = emu_glColor4fv;
   tbl.glColor4i = emu_glColor4i;
   tbl.glColor4iv = emu_glColor4iv;
   tbl.glColor4s = emu_glColor4s;
   tbl.glColor4sv = emu_glColor4sv;
   tbl.glColor4ub = emu_glColor4ub;
   tbl.glColor4ubv = emu_glColor4ubv;
   tbl.glColor4ui = emu_glColor4ui;
   tbl.glColor4uiv = emu_glColor4uiv;
   tbl.glColor4us = emu_glColor4us;
   tbl.glColor4usv = emu_glColor4usv;
   tbl.glColorMaterial = emu_glColorMaterial;
   tbl.glCullFace = emu_glCullFace;
   tbl.glDepthFunc = emu_glDepthFunc;
   tbl.glDepthMask = emu_glDepthMask;
   tbl.glDepthRange = emu_glDepthRange;
   tbl.glDisable = emu_glDisable;
   tbl.glEnable = emu_glEnable;
   tbl.glEnd = emu_glEnd;
   tbl.glFogf = emu_glFogf;
   tbl.glFogfv = emu_glFogfv;
   tbl.glFogi = emu_glFogi;
   tbl.glFogiv = emu_glFogiv;
   tbl.glFrontFace = emu_glFrontFace;
   tbl.glFrustum = emu_glFrustum;
   tbl.glGetBooleanv = emu_glGetBooleanv;
   tbl.glGetDoublev = emu_glGetDoublev;
   tbl.glGetFloatv = emu_glGetFloatv;
   tbl.glGetIntegerv = emu_glGetIntegerv;
   tbl.glGetMaterialfv = emu_glGetMaterialfv;
   tbl.glGetMaterialiv = emu_glGetMaterialiv;
   tbl.glGetTexEnvfv = emu_glGetTexEnvfv;
   tbl.glGetTexEnviv = emu_glGetTexEnviv;
   tbl.glGetTexGendv = emu_glGetTexGendv;
   tbl.glGetTexGenfv = emu_glGetTexGenfv;
   tbl.glGetTexGeniv = emu_glGetTexGeniv;
   tbl.glGetTexParameterfv = emu_glGetTexParameterfv;
   tbl.glGetTexParameteriv = emu_glGetTexParameteriv;
   tbl.glHint = emu_glHint;
   tbl.glIsEnabled = emu_glIsEnabled;
   tbl.glLightModelf = emu_glLightModelf;
   tbl.glLightModelfv = emu_glLightModelfv;
   tbl.glLightModeli = emu_glLightModeli;
   tbl.glLightModeliv = emu_glLightModeliv;
   tbl.glLightf = emu_glLightf;
   tbl.glLightfv = emu_glLightfv;
   tbl.glLighti = emu_glLighti;
   tbl.glLightiv = emu_glLightiv;
   tbl.glLoadIdentity = emu_glLoadIdentity;
   tbl.glLoadMatrixd = emu_glLoadMatrixd;
   tbl.glLoadMatrixf = emu_glLoadMatrixf;
   tbl.glMaterialf = emu_glMaterialf;
   tbl.glMaterialfv = emu_glMaterialfv;
   tbl.glMateriali = emu_glMateriali;
   tbl.glMaterialiv = emu_glMaterialiv;
   tbl.glMatrixMode = emu_glMatrixMode;
   tbl.glMultMatrixd = emu_glMultMatrixd;
   tbl.glMultMatrixf = emu_glMultMatrixf;
   tbl.glNormal3b = emu_glNormal3b;
   tbl.glNormal3bv = emu_glNormal3bv;
   tbl.glNormal3d = emu_glNormal3d;
   tbl.glNormal3dv = emu_glNormal3dv;
   tbl.glNormal3f = emu_glNormal3f;
   tbl.glNormal3fv = emu_glNormal3fv;
   tbl.glNormal3i = emu_glNormal3i;
   tbl.glNormal3iv = emu_glNormal3iv;
   tbl.glNormal3s = emu_glNormal3s;
   tbl.glNormal3sv = emu_glNormal3sv;
   tbl.glOrtho = emu_glOrtho;
   tbl.glPolygonMode = emu_glPolygonMode;
   tbl.glPopAttrib = emu_glPopAttrib;
   tbl.glPopMatrix = emu_glPopMatrix;
   tbl.glPushAttrib = emu_glPushAttrib;
   tbl.glPushMatrix = emu_glPushMatrix;
   tbl.glRotated = emu_glRotated;
   tbl.glRotatef = emu_glRotatef;
   tbl.glScaled = emu_glScaled;
   tbl.glScalef = emu_glScalef;
   tbl.glShadeModel = emu_glShadeModel;
   tbl.glStencilFunc = emu_glStencilFunc;
   tbl.glStencilMask = emu_glStencilMask;
   tbl.glStencilOp = emu_glStencilOp;
   tbl.glTexCoord1d = emu_glTexCoord1d;
   tbl.glTexCoord1dv = emu_glTexCoord1dv;
   tbl.glTexCoord1f = emu_glTexCoord1f;
   tbl.glTexCoord1fv = emu_glTexCoord1fv;
   tbl.glTexCoord1i = emu_glTexCoord1i;
   tbl.glTexCoord1iv = emu_glTexCoord1iv;
   tbl.glTexCoord1s = emu_glTexCoord1s;
   tbl.glTexCoord1sv = emu_glTexCoord1sv;
   tbl.glTexCoord2d = emu_glTexCoord2d;
   tbl.glTexCoord2dv = emu_glTexCoord2dv;
   tbl.glTexCoord2f = emu_glTexCoord2f;
   tbl.glTexCoord2fv = emu_glTexCoord2fv;
   tbl.glTexCoord2i = emu_glTexCoord2i;
   tbl.glTexCoord2iv = emu_glTexCoord2iv;
   tbl.glTexCoord2s = emu_glTexCoord2s;
   tbl.glTexCoord2sv = emu_glTexCoord2sv;
   tbl.glTexCoord3d = emu_glTexCoord3d;
   tbl.glTexCoord3dv = emu_glTexCoord3dv;
   tbl.glTexCoord3f = emu_glTexCoord3f;
   tbl.glTexCoord3fv = emu_glTexCoord3fv;
   tbl.glTexCoord3i = emu_glTexCoord3i;
   tbl.glTexCoord3iv = emu_glTexCoord3iv;
   tbl.glTexCoord3s = emu_glTexCoord3s;
   tbl.glTexCoord3sv = emu_glTexCoord3sv;
   tbl.glTexCoord4d = emu_glTexCoord4d;
   tbl.glTexCoord4dv = emu_glTexCoord4dv;
   tbl.glTexCoord4f = emu_glTexCoord4f;
   tbl.glTexCoord4fv = emu_glTexCoord4fv;
   tbl.glTexCoord4i = emu_glTexCoord4i;
   tbl.glTexCoord4iv = emu_glTexCoord4iv;
   tbl.glTexCoord4s = emu_glTexCoord4s;
   tbl.glTexCoord4sv = emu_glTexCoord4sv;
   tbl.glTexEnvf = emu_glTexEnvf;
   tbl.glTexEnvfv = emu_glTexEnvfv;
   tbl.glTexEnvi = emu_glTexEnvi;
   tbl.glTexEnviv = emu_glTexEnviv;
   tbl.glTexGend = emu_glTexGend;
   tbl.glTexGendv = emu_glTexGendv;
   tbl.glTexGenf = emu_glTexGenf;
   tbl.glTexGenfv = emu_glTexGenfv;
   tbl.glTexGeni = emu_glTexGeni;
   tbl.glTexGeniv = emu_glTexGeniv;
   tbl.glTexImage1D = emu_glTexImage1D;
   tbl.glTexImage2D = emu_glTexImage2D;
   tbl.glTexParameterf = emu_glTexParameterf;
   tbl.glTexParameterfv = emu_glTexParameterfv;
   tbl.glTexParameteri = emu_glTexParameteri;
   tbl.glTexParameteriv = emu_glTexParameteriv;
   tbl.glTranslated = emu_glTranslated;
   tbl.glTranslatef = emu_glTranslatef;
   tbl.glVertex2d = emu_glVertex2d;
   tbl.glVertex2dv = emu_glVertex2dv;
   tbl.glVertex2f = emu_glVertex2f;
   tbl.glVertex2fv = emu_glVertex2fv;
   tbl.glVertex2i = emu_glVertex2i;
   tbl.glVertex2iv = emu_glVertex2iv;
   tbl.glVertex2s = emu_glVertex2s;
   tbl.glVertex2sv = emu_glVertex2sv;
   tbl.glVertex3d = emu_glVertex3d;
   tbl.glVertex3dv = emu_glVertex3dv;
   tbl.glVertex3f = emu_glVertex3f;
   tbl.glVertex3fv = emu_glVertex3fv;
   tbl.glVertex3i = emu_glVertex3i;
   tbl.glVertex3iv = emu_glVertex3iv;
   tbl.glVertex3s = emu_glVertex3s;
   tbl.glVertex3sv = emu_glVertex3sv;
   tbl.glVertex4d = emu_glVertex4d;
   tbl.glVertex4dv = emu_glVertex4dv;
   tbl.glVertex4f = emu_glVertex4f;
   tbl.glVertex4fv = emu_glVertex4fv;
   tbl.glVertex4i = emu_glVertex4i;
   tbl.glVertex4iv = emu_glVertex4iv;
   tbl.glVertex4s = emu_glVertex4s;
   tbl.glVertex4sv = emu_glVertex4sv;

// GL_VERSION_1_1

   tbl.glBindTexture = emu_glBindTexture;
   tbl.glColorPointer = emu_glColorPointer;
   tbl.glDisableClientState = emu_glDisableClientState;
   tbl.glDrawArrays = emu_glDrawArrays;
   tbl.glDrawElements = emu_glDrawElements;
   tbl.glEdgeFlagPointer = emu_glEdgeFlagPointer;
   tbl.glEnableClientState = emu_glEnableClientState;
   tbl.glInterleavedArrays = emu_glInterleavedArrays;
   tbl.glNormalPointer = emu_glNormalPointer;
   tbl.glPolygonOffset = emu_glPolygonOffset;
   tbl.glTexCoordPointer = emu_glTexCoordPointer;
   tbl.glVertexPointer = emu_glVertexPointer;

// GL_VERSION_1_2

   tbl.glTexImage3D = emu_glTexImage3D;

// GL_VERSION_1_3

   tbl.glActiveTexture = emu_glActiveTexture;
   tbl.glClientActiveTexture = emu_glClientActiveTexture;
   tbl.glLoadTransposeMatrixd = emu_glLoadTransposeMatrixd;
   tbl.glLoadTransposeMatrixf = emu_glLoadTransposeMatrixf;
   tbl.glMultTransposeMatrixd = emu_glMultTransposeMatrixd;
   tbl.glMultTransposeMatrixf = emu_glMultTransposeMatrixf;
   tbl.glMultiTexCoord1d = emu_glMultiTexCoord1d;
   tbl.glMultiTexCoord1dv = emu_glMultiTexCoord1dv;
   tbl.glMultiTexCoord1f = emu_glMultiTexCoord1f;
   tbl.glMultiTexCoord1fv = emu_glMultiTexCoord1fv;
   tbl.glMultiTexCoord1i = emu_glMultiTexCoord1i;
   tbl.glMultiTexCoord1iv = emu_glMultiTexCoord1iv;
   tbl.glMultiTexCoord1s = emu_glMultiTexCoord1s;
   tbl.glMultiTexCoord1sv = emu_glMultiTexCoord1sv;
   tbl.glMultiTexCoord2d = emu_glMultiTexCoord2d;
   tbl.glMultiTexCoord2dv = emu_glMultiTexCoord2dv;
   tbl.glMultiTexCoord2f = emu_glMultiTexCoord2f;
   tbl.glMultiTexCoord2fv = emu_glMultiTexCoord2fv;
   tbl.glMultiTexCoord2i = emu_glMultiTexCoord2i;
   tbl.glMultiTexCoord2iv = emu_glMultiTexCoord2iv;
   tbl.glMultiTexCoord2s = emu_glMultiTexCoord2s;
   tbl.glMultiTexCoord2sv = emu_glMultiTexCoord2sv;
   tbl.glMultiTexCoord3d = emu_glMultiTexCoord3d;
   tbl.glMultiTexCoord3dv = emu_glMultiTexCoord3dv;
   tbl.glMultiTexCoord3f = emu_glMultiTexCoord3f;
   tbl.glMultiTexCoord3fv = emu_glMultiTexCoord3fv;
   tbl.glMultiTexCoord3i = emu_glMultiTexCoord3i;
   tbl.glMultiTexCoord3iv = emu_glMultiTexCoord3iv;
   tbl.glMultiTexCoord3s = emu_glMultiTexCoord3s;
   tbl.glMultiTexCoord3sv = emu_glMultiTexCoord3sv;
   tbl.glMultiTexCoord4d = emu_glMultiTexCoord4d;
   tbl.glMultiTexCoord4dv = emu_glMultiTexCoord4dv;
   tbl.glMultiTexCoord4f = emu_glMultiTexCoord4f;
   tbl.glMultiTexCoord4fv = emu_glMultiTexCoord4fv;
   tbl.glMultiTexCoord4i = emu_glMultiTexCoord4i;
   tbl.glMultiTexCoord4iv = emu_glMultiTexCoord4iv;
   tbl.glMultiTexCoord4s = emu_glMultiTexCoord4s;
   tbl.glMultiTexCoord4sv = emu_glMultiTexCoord4sv;

// GL_VERSION_1_4

   tbl.glFogCoordPointer = emu_glFogCoordPointer;
   tbl.glMultiDrawArrays = emu_glMultiDrawArrays;
   tbl.glMultiDrawElements = emu_glMultiDrawElements;
   tbl.glSecondaryColor3b = emu_glSecondaryColor3b;
   tbl.glSecondaryColor3bv = emu_glSecondaryColor3bv;
   tbl.glSecondaryColor3d = emu_glSecondaryColor3d;
   tbl.glSecondaryColor3dv = emu_glSecondaryColor3dv;
   tbl.glSecondaryColor3f = emu_glSecondaryColor3f;
   tbl.glSecondaryColor3fv = emu_glSecondaryColor3fv;
   tbl.glSecondaryColor3i = emu_glSecondaryColor3i;
   tbl.glSecondaryColor3iv = emu_glSecondaryColor3iv;
   tbl.glSecondaryColor3s = emu_glSecondaryColor3s;
   tbl.glSecondaryColor3sv = emu_glSecondaryColor3sv;
   tbl.glSecondaryColor3ub = emu_glSecondaryColor3ub;
   tbl.glSecondaryColor3ubv = emu_glSecondaryColor3ubv;
   tbl.glSecondaryColor3ui = emu_glSecondaryColor3ui;
   tbl.glSecondaryColor3uiv = emu_glSecondaryColor3uiv;
   tbl.glSecondaryColor3us = emu_glSecondaryColor3us;
   tbl.glSecondaryColor3usv = emu_glSecondaryColor3usv;
   tbl.glSecondaryColorPointer = emu_glSecondaryColorPointer;

// GL_VERSION_1_5

   tbl.glBindBuffer = emu_glBindBuffer;
   tbl.glBufferData = emu_glBufferData;
   tbl.glBufferSubData = emu_glBufferSubData;
   tbl.glDeleteBuffers = emu_glDeleteBuffers;
   tbl.glGenBuffers = emu_glGenBuffers;
   tbl.glGetBufferParameteriv = emu_glGetBufferParameteriv;
   tbl.glGetBufferPointerv = emu_glGetBufferPointerv;
   tbl.glGetBufferSubData = emu_glGetBufferSubData;
   tbl.glIsBuffer = emu_glIsBuffer;
   tbl.glMapBuffer = emu_glMapBuffer;
   tbl.glUnmapBuffer = emu_glUnmapBuffer;

// GL_VERSION_2_0

   tbl.glCreateShader = emu_glCreateShader;
   tbl.glDisableVertexAttribArray = emu_glDisableVertexAttribArray;
   tbl.glEnableVertexAttribArray = emu_glEnableVertexAttribArray;
   tbl.glGetVertexAttribPointerv = emu_glGetVertexAttribPointerv;
   tbl.glGetVertexAttribdv = emu_glGetVertexAttribdv;
   tbl.glGetVertexAttribfv = emu_glGetVertexAttribfv;
   tbl.glGetVertexAttribiv = emu_glGetVertexAttribiv;
   tbl.glLinkProgram = emu_glLinkProgram;
   tbl.glShaderSource = emu_glShaderSource;
   tbl.glStencilFuncSeparate = emu_glStencilFuncSeparate;
   tbl.glStencilMaskSeparate = emu_glStencilMaskSeparate;
   tbl.glStencilOpSeparate = emu_glStencilOpSeparate;
   tbl.glUniform1f = emu_glUniform1f;
   tbl.glUniform1fv = emu_glUniform1fv;
   tbl.glUniform1i = emu_glUniform1i;
   tbl.glUniform1iv = emu_glUniform1iv;
   tbl.glUniform2f = emu_glUniform2f;
   tbl.glUniform2fv = emu_glUniform2fv;
   tbl.glUniform2i = emu_glUniform2i;
   tbl.glUniform2iv = emu_glUniform2iv;
   tbl.glUniform3f = emu_glUniform3f;
   tbl.glUniform3fv = emu_glUniform3fv;
   tbl.glUniform3i = emu_glUniform3i;
   tbl.glUniform3iv = emu_glUniform3iv;
   tbl.glUniform4f = emu_glUniform4f;
   tbl.glUniform4fv = emu_glUniform4fv;
   tbl.glUniform4i = emu_glUniform4i;
   tbl.glUniform4iv = emu_glUniform4iv;
   tbl.glUniformMatrix2fv = emu_glUniformMatrix2fv;
   tbl.glUniformMatrix3fv = emu_glUniformMatrix3fv;
   tbl.glUniformMatrix4fv = emu_glUniformMatrix4fv;
   tbl.glUseProgram = emu_glUseProgram;
   tbl.glVertexAttrib1d = emu_glVertexAttrib1d;
   tbl.glVertexAttrib1dv = emu_glVertexAttrib1dv;
   tbl.glVertexAttrib1f = emu_glVertexAttrib1f;
   tbl.glVertexAttrib1fv = emu_glVertexAttrib1fv;
   tbl.glVertexAttrib1s = emu_glVertexAttrib1s;
   tbl.glVertexAttrib1sv = emu_glVertexAttrib1sv;
   tbl.glVertexAttrib2d = emu_glVertexAttrib2d;
   tbl.glVertexAttrib2dv = emu_glVertexAttrib2dv;
   tbl.glVertexAttrib2f = emu_glVertexAttrib2f;
   tbl.glVertexAttrib2fv = emu_glVertexAttrib2fv;
   tbl.glVertexAttrib2s = emu_glVertexAttrib2s;
   tbl.glVertexAttrib2sv = emu_glVertexAttrib2sv;
   tbl.glVertexAttrib3d = emu_glVertexAttrib3d;
   tbl.glVertexAttrib3dv = emu_glVertexAttrib3dv;
   tbl.glVertexAttrib3f = emu_glVertexAttrib3f;
   tbl.glVertexAttrib3fv = emu_glVertexAttrib3fv;
   tbl.glVertexAttrib3s = emu_glVertexAttrib3s;
   tbl.glVertexAttrib3sv = emu_glVertexAttrib3sv;
   tbl.glVertexAttrib4Nbv = emu_glVertexAttrib4Nbv;
   tbl.glVertexAttrib4Niv = emu_glVertexAttrib4Niv;
   tbl.glVertexAttrib4Nsv = emu_glVertexAttrib4Nsv;
   tbl.glVertexAttrib4Nub = emu_glVertexAttrib4Nub;
   tbl.glVertexAttrib4Nubv = emu_glVertexAttrib4Nubv;
   tbl.glVertexAttrib4Nusv = emu_glVertexAttrib4Nusv;
   tbl.glVertexAttrib4bv = emu_glVertexAttrib4bv;
   tbl.glVertexAttrib4d = emu_glVertexAttrib4d;
   tbl.glVertexAttrib4dv = emu_glVertexAttrib4dv;
   tbl.glVertexAttrib4f = emu_glVertexAttrib4f;
   tbl.glVertexAttrib4fv = emu_glVertexAttrib4fv;
   tbl.glVertexAttrib4iv = emu_glVertexAttrib4iv;
   tbl.glVertexAttrib4s = emu_glVertexAttrib4s;
   tbl.glVertexAttrib4sv = emu_glVertexAttrib4sv;
   tbl.glVertexAttrib4ubv = emu_glVertexAttrib4ubv;
   tbl.glVertexAttrib4usv = emu_glVertexAttrib4usv;
   tbl.glVertexAttribPointer = emu_glVertexAttribPointer;

// GL_VERSION_2_1

   tbl.glUniformMatrix2x3fv = emu_glUniformMatrix2x3fv;
   tbl.glUniformMatrix2x4fv = emu_glUniformMatrix2x4fv;
   tbl.glUniformMatrix3x2fv = emu_glUniformMatrix3x2fv;
   tbl.glUniformMatrix3x4fv = emu_glUniformMatrix3x4fv;
   tbl.glUniformMatrix4x2fv = emu_glUniformMatrix4x2fv;
   tbl.glUniformMatrix4x3fv = emu_glUniformMatrix4x3fv;

// GL_VERSION_3_0

   tbl.glDisablei = emu_glDisablei;
   tbl.glEnablei = emu_glEnablei;
   tbl.glUniform1ui = emu_glUniform1ui;
   tbl.glUniform1uiv = emu_glUniform1uiv;
   tbl.glUniform2ui = emu_glUniform2ui;
   tbl.glUniform2uiv = emu_glUniform2uiv;
   tbl.glUniform3ui = emu_glUniform3ui;
   tbl.glUniform3uiv = emu_glUniform3uiv;
   tbl.glUniform4ui = emu_glUniform4ui;
   tbl.glUniform4uiv = emu_glUniform4uiv;

// GL_VERSION_3_1

   tbl.glDrawArraysInstanced = emu_glDrawArraysInstanced;
   tbl.glDrawElementsInstanced = emu_glDrawElementsInstanced;
   tbl.glTexBuffer = emu_glTexBuffer;

// GL_VERSION_3_2

   tbl.glFramebufferTexture = emu_glFramebufferTexture;
   tbl.glFramebufferTextureFace = emu_glFramebufferTextureFace;

// GL_AMD_multi_draw_indirect

   tbl.glMultiDrawArraysIndirectAMD = emu_glMultiDrawArraysIndirectAMD;
   tbl.glMultiDrawElementsIndirectAMD = emu_glMultiDrawElementsIndirectAMD;

// GL_APPLE_element_array

   tbl.glDrawElementArrayAPPLE = emu_glDrawElementArrayAPPLE;
   tbl.glMultiDrawElementArrayAPPLE = emu_glMultiDrawElementArrayAPPLE;

// GL_APPLE_vertex_array_object

   tbl.glBindVertexArrayAPPLE = emu_glBindVertexArrayAPPLE;

// GL_ARB_ES2_compatibility

   tbl.glShaderBinary = emu_glShaderBinary;

// GL_ARB_copy_buffer

   tbl.glCopyBufferSubData = emu_glCopyBufferSubData;

// GL_ARB_draw_elements_base_vertex

   tbl.glDrawElementsBaseVertex = emu_glDrawElementsBaseVertex;
   tbl.glDrawElementsInstancedBaseVertex = emu_glDrawElementsInstancedBaseVertex;
   tbl.glMultiDrawElementsBaseVertex = emu_glMultiDrawElementsBaseVertex;

// GL_ARB_draw_indirect

   tbl.glDrawArraysIndirect = emu_glDrawArraysIndirect;
   tbl.glDrawElementsIndirect = emu_glDrawElementsIndirect;

// GL_ARB_draw_instanced

   tbl.glDrawArraysInstancedARB = emu_glDrawArraysInstancedARB;
   tbl.glDrawElementsInstancedARB = emu_glDrawElementsInstancedARB;

// GL_ARB_framebuffer_object

   tbl.glBindFramebuffer = emu_glBindFramebuffer;
   tbl.glFramebufferRenderbuffer = emu_glFramebufferRenderbuffer;
   tbl.glFramebufferTexture1D = emu_glFramebufferTexture1D;
   tbl.glFramebufferTexture2D = emu_glFramebufferTexture2D;
   tbl.glFramebufferTexture3D = emu_glFramebufferTexture3D;
   tbl.glFramebufferTextureLayer = emu_glFramebufferTextureLayer;
   tbl.glGenerateMipmap = emu_glGenerateMipmap;
   tbl.glRenderbufferStorage = emu_glRenderbufferStorage;
   tbl.glRenderbufferStorageMultisample = emu_glRenderbufferStorageMultisample;

// GL_ARB_geometry_shader4

   tbl.glFramebufferTextureARB = emu_glFramebufferTextureARB;
   tbl.glFramebufferTextureFaceARB = emu_glFramebufferTextureFaceARB;
   tbl.glFramebufferTextureLayerARB = emu_glFramebufferTextureLayerARB;

// GL_ARB_gpu_shader_fp64

   tbl.glUniform1d = emu_glUniform1d;
   tbl.glUniform1dv = emu_glUniform1dv;
   tbl.glUniform2d = emu_glUniform2d;
   tbl.glUniform2dv = emu_glUniform2dv;
   tbl.glUniform3d = emu_glUniform3d;
   tbl.glUniform3dv = emu_glUniform3dv;
   tbl.glUniform4d = emu_glUniform4d;
   tbl.glUniform4dv = emu_glUniform4dv;
   tbl.glUniformMatrix2dv = emu_glUniformMatrix2dv;
   tbl.glUniformMatrix2x3dv = emu_glUniformMatrix2x3dv;
   tbl.glUniformMatrix2x4dv = emu_glUniformMatrix2x4dv;
   tbl.glUniformMatrix3dv = emu_glUniformMatrix3dv;
   tbl.glUniformMatrix3x2dv = emu_glUniformMatrix3x2dv;
   tbl.glUniformMatrix3x4dv = emu_glUniformMatrix3x4dv;
   tbl.glUniformMatrix4dv = emu_glUniformMatrix4dv;
   tbl.glUniformMatrix4x2dv = emu_glUniformMatrix4x2dv;
   tbl.glUniformMatrix4x3dv = emu_glUniformMatrix4x3dv;

// GL_ARB_map_buffer_range

   tbl.glFlushMappedBufferRange = emu_glFlushMappedBufferRange;
   tbl.glMapBufferRange = emu_glMapBufferRange;

// GL_ARB_multi_draw_indirect

   tbl.glMultiDrawArraysIndirect = emu_glMultiDrawArraysIndirect;
   tbl.glMultiDrawElementsIndirect = emu_glMultiDrawElementsIndirect;

// GL_ARB_multitexture

   tbl.glActiveTextureARB = emu_glActiveTextureARB;
   tbl.glClientActiveTextureARB = emu_glClientActiveTextureARB;

// GL_ARB_sync

   tbl.glGetInteger64v = emu_glGetInteger64v;

// GL_ARB_texture_multisample

   tbl.glTexImage2DMultisample = emu_glTexImage2DMultisample;
   tbl.glTexImage3DMultisample = emu_glTexImage3DMultisample;

// GL_ARB_vertex_array_object

   tbl.glBindVertexArray = emu_glBindVertexArray;
   tbl.glDeleteVertexArrays = emu_glDeleteVertexArrays;
   tbl.glGenVertexArrays = emu_glGenVertexArrays;
   tbl.glIsVertexArray = emu_glIsVertexArray;

// GL_ARB_vertex_buffer_object

   tbl.glBindBufferARB = emu_glBindBufferARB;
   tbl.glDeleteBuffersARB = emu_glDeleteBuffersARB;
   tbl.glGenBuffersARB = emu_glGenBuffersARB;
   tbl.glIsBufferARB = emu_glIsBufferARB;
   tbl.glMapBufferARB = emu_glMapBufferARB;
   tbl.glUnmapBufferARB = emu_glUnmapBufferARB;

// GL_ARB_vertex_program

   tbl.glBindProgramARB = emu_glBindProgramARB;
   tbl.glDisableVertexAttribArrayARB = emu_glDisableVertexAttribArrayARB;
   tbl.glEnableVertexAttribArrayARB = emu_glEnableVertexAttribArrayARB;
   tbl.glGetProgramEnvParameterdvARB = emu_glGetProgramEnvParameterdvARB;
   tbl.glGetProgramEnvParameterfvARB = emu_glGetProgramEnvParameterfvARB;
   tbl.glGetProgramLocalParameterdvARB = emu_glGetProgramLocalParameterdvARB;
   tbl.glGetProgramLocalParameterfvARB = emu_glGetProgramLocalParameterfvARB;
   tbl.glGetVertexAttribPointervARB = emu_glGetVertexAttribPointervARB;
   tbl.glGetVertexAttribdvARB = emu_glGetVertexAttribdvARB;
   tbl.glGetVertexAttribfvARB = emu_glGetVertexAttribfvARB;
   tbl.glGetVertexAttribivARB = emu_glGetVertexAttribivARB;
   tbl.glProgramEnvParameter4dARB = emu_glProgramEnvParameter4dARB;
   tbl.glProgramEnvParameter4dvARB = emu_glProgramEnvParameter4dvARB;
   tbl.glProgramEnvParameter4fARB = emu_glProgramEnvParameter4fARB;
   tbl.glProgramEnvParameter4fvARB = emu_glProgramEnvParameter4fvARB;
   tbl.glProgramLocalParameter4dARB = emu_glProgramLocalParameter4dARB;
   tbl.glProgramLocalParameter4dvARB = emu_glProgramLocalParameter4dvARB;
   tbl.glProgramLocalParameter4fARB = emu_glProgramLocalParameter4fARB;
   tbl.glProgramLocalParameter4fvARB = emu_glProgramLocalParameter4fvARB;
   tbl.glVertexAttribPointerARB = emu_glVertexAttribPointerARB;

// GL_ARB_viewport_array

   tbl.glGetDoublei_v = emu_glGetDoublei_v;
   tbl.glGetFloati_v = emu_glGetFloati_v;

// GL_ATI_element_array

   tbl.glDrawElementArrayATI = emu_glDrawElementArrayATI;

// GL_EXT_direct_state_access

   tbl.glBindMultiTextureEXT = emu_glBindMultiTextureEXT;
   tbl.glCheckNamedFramebufferStatusEXT = emu_glCheckNamedFramebufferStatusEXT;
   tbl.glClientAttribDefaultEXT = emu_glClientAttribDefaultEXT;
   tbl.glCompressedMultiTexImage1DEXT = emu_glCompressedMultiTexImage1DEXT;
   tbl.glCompressedMultiTexImage2DEXT = emu_glCompressedMultiTexImage2DEXT;
   tbl.glCompressedMultiTexImage3DEXT = emu_glCompressedMultiTexImage3DEXT;
   tbl.glCompressedMultiTexSubImage1DEXT = emu_glCompressedMultiTexSubImage1DEXT;
   tbl.glCompressedMultiTexSubImage2DEXT = emu_glCompressedMultiTexSubImage2DEXT;
   tbl.glCompressedMultiTexSubImage3DEXT = emu_glCompressedMultiTexSubImage3DEXT;
   tbl.glCompressedTextureImage1DEXT = emu_glCompressedTextureImage1DEXT;
   tbl.glCompressedTextureImage2DEXT = emu_glCompressedTextureImage2DEXT;
   tbl.glCompressedTextureImage3DEXT = emu_glCompressedTextureImage3DEXT;
   tbl.glCompressedTextureSubImage1DEXT = emu_glCompressedTextureSubImage1DEXT;
   tbl.glCompressedTextureSubImage2DEXT = emu_glCompressedTextureSubImage2DEXT;
   tbl.glCompressedTextureSubImage3DEXT = emu_glCompressedTextureSubImage3DEXT;
   tbl.glCopyMultiTexImage1DEXT = emu_glCopyMultiTexImage1DEXT;
   tbl.glCopyMultiTexImage2DEXT = emu_glCopyMultiTexImage2DEXT;
   tbl.glCopyMultiTexSubImage1DEXT = emu_glCopyMultiTexSubImage1DEXT;
   tbl.glCopyMultiTexSubImage2DEXT = emu_glCopyMultiTexSubImage2DEXT;
   tbl.glCopyMultiTexSubImage3DEXT = emu_glCopyMultiTexSubImage3DEXT;
   tbl.glCopyTextureImage1DEXT = emu_glCopyTextureImage1DEXT;
   tbl.glCopyTextureImage2DEXT = emu_glCopyTextureImage2DEXT;
   tbl.glCopyTextureSubImage1DEXT = emu_glCopyTextureSubImage1DEXT;
   tbl.glCopyTextureSubImage2DEXT = emu_glCopyTextureSubImage2DEXT;
   tbl.glCopyTextureSubImage3DEXT = emu_glCopyTextureSubImage3DEXT;
   tbl.glDisableClientStateIndexedEXT = emu_glDisableClientStateIndexedEXT;
   tbl.glDisableClientStateiEXT = emu_glDisableClientStateiEXT;
   tbl.glEnableClientStateIndexedEXT = emu_glEnableClientStateIndexedEXT;
   tbl.glEnableClientStateiEXT = emu_glEnableClientStateiEXT;
   tbl.glFlushMappedNamedBufferRangeEXT = emu_glFlushMappedNamedBufferRangeEXT;
   tbl.glFramebufferDrawBufferEXT = emu_glFramebufferDrawBufferEXT;
   tbl.glFramebufferDrawBuffersEXT = emu_glFramebufferDrawBuffersEXT;
   tbl.glFramebufferReadBufferEXT = emu_glFramebufferReadBufferEXT;
   tbl.glGenerateMultiTexMipmapEXT = emu_glGenerateMultiTexMipmapEXT;
   tbl.glGenerateTextureMipmapEXT = emu_glGenerateTextureMipmapEXT;
   tbl.glGetCompressedMultiTexImageEXT = emu_glGetCompressedMultiTexImageEXT;
   tbl.glGetCompressedTextureImageEXT = emu_glGetCompressedTextureImageEXT;
   tbl.glGetDoubleIndexedvEXT = emu_glGetDoubleIndexedvEXT;
   tbl.glGetDoublei_vEXT = emu_glGetDoublei_vEXT;
   tbl.glGetFloatIndexedvEXT = emu_glGetFloatIndexedvEXT;
   tbl.glGetFloati_vEXT = emu_glGetFloati_vEXT;
   tbl.glGetFramebufferParameterivEXT = emu_glGetFramebufferParameterivEXT;
   tbl.glGetMultiTexEnvfvEXT = emu_glGetMultiTexEnvfvEXT;
   tbl.glGetMultiTexEnvivEXT = emu_glGetMultiTexEnvivEXT;
   tbl.glGetMultiTexGendvEXT = emu_glGetMultiTexGendvEXT;
   tbl.glGetMultiTexGenfvEXT = emu_glGetMultiTexGenfvEXT;
   tbl.glGetMultiTexGenivEXT = emu_glGetMultiTexGenivEXT;
   tbl.glGetMultiTexImageEXT = emu_glGetMultiTexImageEXT;
   tbl.glGetMultiTexLevelParameterfvEXT = emu_glGetMultiTexLevelParameterfvEXT;
   tbl.glGetMultiTexLevelParameterivEXT = emu_glGetMultiTexLevelParameterivEXT;
   tbl.glGetMultiTexParameterIivEXT = emu_glGetMultiTexParameterIivEXT;
   tbl.glGetMultiTexParameterIuivEXT = emu_glGetMultiTexParameterIuivEXT;
   tbl.glGetMultiTexParameterfvEXT = emu_glGetMultiTexParameterfvEXT;
   tbl.glGetMultiTexParameterivEXT = emu_glGetMultiTexParameterivEXT;
   tbl.glGetNamedBufferParameterivEXT = emu_glGetNamedBufferParameterivEXT;
   tbl.glGetNamedBufferPointervEXT = emu_glGetNamedBufferPointervEXT;
   tbl.glGetNamedBufferSubDataEXT = emu_glGetNamedBufferSubDataEXT;
   tbl.glGetNamedFramebufferAttachmentParameterivEXT = emu_glGetNamedFramebufferAttachmentParameterivEXT;
   tbl.glGetNamedProgramLocalParameterIivEXT = emu_glGetNamedProgramLocalParameterIivEXT;
   tbl.glGetNamedProgramLocalParameterIuivEXT = emu_glGetNamedProgramLocalParameterIuivEXT;
   tbl.glGetNamedProgramLocalParameterdvEXT = emu_glGetNamedProgramLocalParameterdvEXT;
   tbl.glGetNamedProgramLocalParameterfvEXT = emu_glGetNamedProgramLocalParameterfvEXT;
   tbl.glGetNamedProgramStringEXT = emu_glGetNamedProgramStringEXT;
   tbl.glGetNamedProgramivEXT = emu_glGetNamedProgramivEXT;
   tbl.glGetNamedRenderbufferParameterivEXT = emu_glGetNamedRenderbufferParameterivEXT;
   tbl.glGetPointerIndexedvEXT = emu_glGetPointerIndexedvEXT;
   tbl.glGetTextureImageEXT = emu_glGetTextureImageEXT;
   tbl.glGetTextureLevelParameterfvEXT = emu_glGetTextureLevelParameterfvEXT;
   tbl.glGetTextureLevelParameterivEXT = emu_glGetTextureLevelParameterivEXT;
   tbl.glGetTextureParameterIivEXT = emu_glGetTextureParameterIivEXT;
   tbl.glGetTextureParameterIuivEXT = emu_glGetTextureParameterIuivEXT;
   tbl.glGetTextureParameterfvEXT = emu_glGetTextureParameterfvEXT;
   tbl.glGetTextureParameterivEXT = emu_glGetTextureParameterivEXT;
   tbl.glMapNamedBufferEXT = emu_glMapNamedBufferEXT;
   tbl.glMapNamedBufferRangeEXT = emu_glMapNamedBufferRangeEXT;
   tbl.glMatrixFrustumEXT = emu_glMatrixFrustumEXT;
   tbl.glMatrixLoadIdentityEXT = emu_glMatrixLoadIdentityEXT;
   tbl.glMatrixLoadTransposedEXT = emu_glMatrixLoadTransposedEXT;
   tbl.glMatrixLoadTransposefEXT = emu_glMatrixLoadTransposefEXT;
   tbl.glMatrixLoaddEXT = emu_glMatrixLoaddEXT;
   tbl.glMatrixLoadfEXT = emu_glMatrixLoadfEXT;
   tbl.glMatrixMultTransposedEXT = emu_glMatrixMultTransposedEXT;
   tbl.glMatrixMultTransposefEXT = emu_glMatrixMultTransposefEXT;
   tbl.glMatrixMultdEXT = emu_glMatrixMultdEXT;
   tbl.glMatrixMultfEXT = emu_glMatrixMultfEXT;
   tbl.glMatrixOrthoEXT = emu_glMatrixOrthoEXT;
   tbl.glMatrixPopEXT = emu_glMatrixPopEXT;
   tbl.glMatrixPushEXT = emu_glMatrixPushEXT;
   tbl.glMatrixRotatedEXT = emu_glMatrixRotatedEXT;
   tbl.glMatrixRotatefEXT = emu_glMatrixRotatefEXT;
   tbl.glMatrixScaledEXT = emu_glMatrixScaledEXT;
   tbl.glMatrixScalefEXT = emu_glMatrixScalefEXT;
   tbl.glMatrixTranslatedEXT = emu_glMatrixTranslatedEXT;
   tbl.glMatrixTranslatefEXT = emu_glMatrixTranslatefEXT;
   tbl.glMultiTexBufferEXT = emu_glMultiTexBufferEXT;
   tbl.glMultiTexCoordPointerEXT = emu_glMultiTexCoordPointerEXT;
   tbl.glMultiTexEnvfEXT = emu_glMultiTexEnvfEXT;
   tbl.glMultiTexEnvfvEXT = emu_glMultiTexEnvfvEXT;
   tbl.glMultiTexEnviEXT = emu_glMultiTexEnviEXT;
   tbl.glMultiTexEnvivEXT = emu_glMultiTexEnvivEXT;
   tbl.glMultiTexGendEXT = emu_glMultiTexGendEXT;
   tbl.glMultiTexGendvEXT = emu_glMultiTexGendvEXT;
   tbl.glMultiTexGenfEXT = emu_glMultiTexGenfEXT;
   tbl.glMultiTexGenfvEXT = emu_glMultiTexGenfvEXT;
   tbl.glMultiTexGeniEXT = emu_glMultiTexGeniEXT;
   tbl.glMultiTexGenivEXT = emu_glMultiTexGenivEXT;
   tbl.glMultiTexImage1DEXT = emu_glMultiTexImage1DEXT;
   tbl.glMultiTexImage2DEXT = emu_glMultiTexImage2DEXT;
   tbl.glMultiTexImage3DEXT = emu_glMultiTexImage3DEXT;
   tbl.glMultiTexParameterIivEXT = emu_glMultiTexParameterIivEXT;
   tbl.glMultiTexParameterIuivEXT = emu_glMultiTexParameterIuivEXT;
   tbl.glMultiTexParameterfEXT = emu_glMultiTexParameterfEXT;
   tbl.glMultiTexParameterfvEXT = emu_glMultiTexParameterfvEXT;
   tbl.glMultiTexParameteriEXT = emu_glMultiTexParameteriEXT;
   tbl.glMultiTexParameterivEXT = emu_glMultiTexParameterivEXT;
   tbl.glMultiTexRenderbufferEXT = emu_glMultiTexRenderbufferEXT;
   tbl.glMultiTexSubImage1DEXT = emu_glMultiTexSubImage1DEXT;
   tbl.glMultiTexSubImage2DEXT = emu_glMultiTexSubImage2DEXT;
   tbl.glMultiTexSubImage3DEXT = emu_glMultiTexSubImage3DEXT;
   tbl.glNamedBufferDataEXT = emu_glNamedBufferDataEXT;
   tbl.glNamedBufferSubDataEXT = emu_glNamedBufferSubDataEXT;
   tbl.glNamedCopyBufferSubDataEXT = emu_glNamedCopyBufferSubDataEXT;
   tbl.glNamedFramebufferRenderbufferEXT = emu_glNamedFramebufferRenderbufferEXT;
   tbl.glNamedFramebufferTexture1DEXT = emu_glNamedFramebufferTexture1DEXT;
   tbl.glNamedFramebufferTexture2DEXT = emu_glNamedFramebufferTexture2DEXT;
   tbl.glNamedFramebufferTexture3DEXT = emu_glNamedFramebufferTexture3DEXT;
   tbl.glNamedFramebufferTextureEXT = emu_glNamedFramebufferTextureEXT;
   tbl.glNamedFramebufferTextureFaceEXT = emu_glNamedFramebufferTextureFaceEXT;
   tbl.glNamedFramebufferTextureLayerEXT = emu_glNamedFramebufferTextureLayerEXT;
   tbl.glNamedProgramLocalParameter4dEXT = emu_glNamedProgramLocalParameter4dEXT;
   tbl.glNamedProgramLocalParameter4dvEXT = emu_glNamedProgramLocalParameter4dvEXT;
   tbl.glNamedProgramLocalParameter4fEXT = emu_glNamedProgramLocalParameter4fEXT;
   tbl.glNamedProgramLocalParameter4fvEXT = emu_glNamedProgramLocalParameter4fvEXT;
   tbl.glNamedProgramLocalParameterI4iEXT = emu_glNamedProgramLocalParameterI4iEXT;
   tbl.glNamedProgramLocalParameterI4ivEXT = emu_glNamedProgramLocalParameterI4ivEXT;
   tbl.glNamedProgramLocalParameterI4uiEXT = emu_glNamedProgramLocalParameterI4uiEXT;
   tbl.glNamedProgramLocalParameterI4uivEXT = emu_glNamedProgramLocalParameterI4uivEXT;
   tbl.glNamedProgramLocalParameters4fvEXT = emu_glNamedProgramLocalParameters4fvEXT;
   tbl.glNamedProgramLocalParametersI4ivEXT = emu_glNamedProgramLocalParametersI4ivEXT;
   tbl.glNamedProgramLocalParametersI4uivEXT = emu_glNamedProgramLocalParametersI4uivEXT;
   tbl.glNamedProgramStringEXT = emu_glNamedProgramStringEXT;
   tbl.glNamedRenderbufferStorageEXT = emu_glNamedRenderbufferStorageEXT;
   tbl.glNamedRenderbufferStorageMultisampleCoverageEXT = emu_glNamedRenderbufferStorageMultisampleCoverageEXT;
   tbl.glNamedRenderbufferStorageMultisampleEXT = emu_glNamedRenderbufferStorageMultisampleEXT;
   tbl.glProgramUniform1dEXT = emu_glProgramUniform1dEXT;
   tbl.glProgramUniform1dvEXT = emu_glProgramUniform1dvEXT;
   tbl.glProgramUniform1fEXT = emu_glProgramUniform1fEXT;
   tbl.glProgramUniform1fvEXT = emu_glProgramUniform1fvEXT;
   tbl.glProgramUniform1iEXT = emu_glProgramUniform1iEXT;
   tbl.glProgramUniform1ivEXT = emu_glProgramUniform1ivEXT;
   tbl.glProgramUniform1uiEXT = emu_glProgramUniform1uiEXT;
   tbl.glProgramUniform1uivEXT = emu_glProgramUniform1uivEXT;
   tbl.glProgramUniform2dEXT = emu_glProgramUniform2dEXT;
   tbl.glProgramUniform2dvEXT = emu_glProgramUniform2dvEXT;
   tbl.glProgramUniform2fEXT = emu_glProgramUniform2fEXT;
   tbl.glProgramUniform2fvEXT = emu_glProgramUniform2fvEXT;
   tbl.glProgramUniform2iEXT = emu_glProgramUniform2iEXT;
   tbl.glProgramUniform2ivEXT = emu_glProgramUniform2ivEXT;
   tbl.glProgramUniform2uiEXT = emu_glProgramUniform2uiEXT;
   tbl.glProgramUniform2uivEXT = emu_glProgramUniform2uivEXT;
   tbl.glProgramUniform3dEXT = emu_glProgramUniform3dEXT;
   tbl.glProgramUniform3dvEXT = emu_glProgramUniform3dvEXT;
   tbl.glProgramUniform3fEXT = emu_glProgramUniform3fEXT;
   tbl.glProgramUniform3fvEXT = emu_glProgramUniform3fvEXT;
   tbl.glProgramUniform3iEXT = emu_glProgramUniform3iEXT;
   tbl.glProgramUniform3ivEXT = emu_glProgramUniform3ivEXT;
   tbl.glProgramUniform3uiEXT = emu_glProgramUniform3uiEXT;
   tbl.glProgramUniform3uivEXT = emu_glProgramUniform3uivEXT;
   tbl.glProgramUniform4dEXT = emu_glProgramUniform4dEXT;
   tbl.glProgramUniform4dvEXT = emu_glProgramUniform4dvEXT;
   tbl.glProgramUniform4fEXT = emu_glProgramUniform4fEXT;
   tbl.glProgramUniform4fvEXT = emu_glProgramUniform4fvEXT;
   tbl.glProgramUniform4iEXT = emu_glProgramUniform4iEXT;
   tbl.glProgramUniform4ivEXT = emu_glProgramUniform4ivEXT;
   tbl.glProgramUniform4uiEXT = emu_glProgramUniform4uiEXT;
   tbl.glProgramUniform4uivEXT = emu_glProgramUniform4uivEXT;
   tbl.glProgramUniformMatrix2dvEXT = emu_glProgramUniformMatrix2dvEXT;
   tbl.glProgramUniformMatrix2fvEXT = emu_glProgramUniformMatrix2fvEXT;
   tbl.glProgramUniformMatrix2x3dvEXT = emu_glProgramUniformMatrix2x3dvEXT;
   tbl.glProgramUniformMatrix2x3fvEXT = emu_glProgramUniformMatrix2x3fvEXT;
   tbl.glProgramUniformMatrix2x4dvEXT = emu_glProgramUniformMatrix2x4dvEXT;
   tbl.glProgramUniformMatrix2x4fvEXT = emu_glProgramUniformMatrix2x4fvEXT;
   tbl.glProgramUniformMatrix3dvEXT = emu_glProgramUniformMatrix3dvEXT;
   tbl.glProgramUniformMatrix3fvEXT = emu_glProgramUniformMatrix3fvEXT;
   tbl.glProgramUniformMatrix3x2dvEXT = emu_glProgramUniformMatrix3x2dvEXT;
   tbl.glProgramUniformMatrix3x2fvEXT = emu_glProgramUniformMatrix3x2fvEXT;
   tbl.glProgramUniformMatrix3x4dvEXT = emu_glProgramUniformMatrix3x4dvEXT;
   tbl.glProgramUniformMatrix3x4fvEXT = emu_glProgramUniformMatrix3x4fvEXT;
   tbl.glProgramUniformMatrix4dvEXT = emu_glProgramUniformMatrix4dvEXT;
   tbl.glProgramUniformMatrix4fvEXT = emu_glProgramUniformMatrix4fvEXT;
   tbl.glProgramUniformMatrix4x2dvEXT = emu_glProgramUniformMatrix4x2dvEXT;
   tbl.glProgramUniformMatrix4x2fvEXT = emu_glProgramUniformMatrix4x2fvEXT;
   tbl.glProgramUniformMatrix4x3dvEXT = emu_glProgramUniformMatrix4x3dvEXT;
   tbl.glProgramUniformMatrix4x3fvEXT = emu_glProgramUniformMatrix4x3fvEXT;
   tbl.glPushClientAttribDefaultEXT = emu_glPushClientAttribDefaultEXT;
   tbl.glTextureBufferEXT = emu_glTextureBufferEXT;
   tbl.glTextureImage1DEXT = emu_glTextureImage1DEXT;
   tbl.glTextureImage2DEXT = emu_glTextureImage2DEXT;
   tbl.glTextureImage3DEXT = emu_glTextureImage3DEXT;
   tbl.glTextureParameterIivEXT = emu_glTextureParameterIivEXT;
   tbl.glTextureParameterIuivEXT = emu_glTextureParameterIuivEXT;
   tbl.glTextureParameterfEXT = emu_glTextureParameterfEXT;
   tbl.glTextureParameterfvEXT = emu_glTextureParameterfvEXT;
   tbl.glTextureParameteriEXT = emu_glTextureParameteriEXT;
   tbl.glTextureParameterivEXT = emu_glTextureParameterivEXT;
   tbl.glTextureRenderbufferEXT = emu_glTextureRenderbufferEXT;
   tbl.glTextureSubImage1DEXT = emu_glTextureSubImage1DEXT;
   tbl.glTextureSubImage2DEXT = emu_glTextureSubImage2DEXT;
   tbl.glTextureSubImage3DEXT = emu_glTextureSubImage3DEXT;
   tbl.glUnmapNamedBufferEXT = emu_glUnmapNamedBufferEXT;

// GL_EXT_draw_buffers2

   tbl.glDisableIndexedEXT = emu_glDisableIndexedEXT;
   tbl.glEnableIndexedEXT = emu_glEnableIndexedEXT;
   tbl.glIsEnabledIndexedEXT = emu_glIsEnabledIndexedEXT;

// GL_EXT_draw_instanced

   tbl.glDrawArraysInstancedEXT = emu_glDrawArraysInstancedEXT;
   tbl.glDrawElementsInstancedEXT = emu_glDrawElementsInstancedEXT;

// GL_EXT_framebuffer_multisample

   tbl.glRenderbufferStorageMultisampleEXT = emu_glRenderbufferStorageMultisampleEXT;

// GL_EXT_framebuffer_object

   tbl.glFramebufferRenderbufferEXT = emu_glFramebufferRenderbufferEXT;
   tbl.glFramebufferTexture1DEXT = emu_glFramebufferTexture1DEXT;
   tbl.glFramebufferTexture2DEXT = emu_glFramebufferTexture2DEXT;
   tbl.glFramebufferTexture3DEXT = emu_glFramebufferTexture3DEXT;
   tbl.glGenerateMipmapEXT = emu_glGenerateMipmapEXT;
   tbl.glRenderbufferStorageEXT = emu_glRenderbufferStorageEXT;

// GL_EXT_geometry_shader4

   tbl.glFramebufferTextureEXT = emu_glFramebufferTextureEXT;
   tbl.glFramebufferTextureFaceEXT = emu_glFramebufferTextureFaceEXT;

// GL_EXT_multi_draw_arrays

   tbl.glMultiDrawArraysEXT = emu_glMultiDrawArraysEXT;
   tbl.glMultiDrawElementsEXT = emu_glMultiDrawElementsEXT;

// GL_EXT_secondary_color

   tbl.glSecondaryColor3bEXT = emu_glSecondaryColor3bEXT;
   tbl.glSecondaryColor3bvEXT = emu_glSecondaryColor3bvEXT;
   tbl.glSecondaryColor3dEXT = emu_glSecondaryColor3dEXT;
   tbl.glSecondaryColor3dvEXT = emu_glSecondaryColor3dvEXT;
   tbl.glSecondaryColor3fEXT = emu_glSecondaryColor3fEXT;
   tbl.glSecondaryColor3fvEXT = emu_glSecondaryColor3fvEXT;
   tbl.glSecondaryColor3iEXT = emu_glSecondaryColor3iEXT;
   tbl.glSecondaryColor3ivEXT = emu_glSecondaryColor3ivEXT;
   tbl.glSecondaryColor3sEXT = emu_glSecondaryColor3sEXT;
   tbl.glSecondaryColor3svEXT = emu_glSecondaryColor3svEXT;
   tbl.glSecondaryColor3ubEXT = emu_glSecondaryColor3ubEXT;
   tbl.glSecondaryColor3ubvEXT = emu_glSecondaryColor3ubvEXT;
   tbl.glSecondaryColor3uiEXT = emu_glSecondaryColor3uiEXT;
   tbl.glSecondaryColor3uivEXT = emu_glSecondaryColor3uivEXT;
   tbl.glSecondaryColor3usEXT = emu_glSecondaryColor3usEXT;
   tbl.glSecondaryColor3usvEXT = emu_glSecondaryColor3usvEXT;

// GL_EXT_texture3D

   tbl.glTexImage3DEXT = emu_glTexImage3DEXT;

// GL_EXT_texture_array

   tbl.glFramebufferTextureLayerEXT = emu_glFramebufferTextureLayerEXT;

// GL_EXT_texture_object

   tbl.glBindTextureEXT = emu_glBindTextureEXT;

// GL_EXT_vertex_array

   tbl.glDrawArraysEXT = emu_glDrawArraysEXT;

// GL_NV_explicit_multisample

   tbl.glTexRenderbufferNV = emu_glTexRenderbufferNV;

// GL_NV_framebuffer_multisample_coverage

   tbl.glRenderbufferStorageMultisampleCoverageNV = emu_glRenderbufferStorageMultisampleCoverageNV;

// GL_NV_gpu_program4

   tbl.glGetProgramEnvParameterIivNV = emu_glGetProgramEnvParameterIivNV;
   tbl.glGetProgramEnvParameterIuivNV = emu_glGetProgramEnvParameterIuivNV;
   tbl.glGetProgramLocalParameterIivNV = emu_glGetProgramLocalParameterIivNV;
   tbl.glGetProgramLocalParameterIuivNV = emu_glGetProgramLocalParameterIuivNV;
   tbl.glProgramEnvParameterI4iNV = emu_glProgramEnvParameterI4iNV;
   tbl.glProgramEnvParameterI4ivNV = emu_glProgramEnvParameterI4ivNV;
   tbl.glProgramEnvParameterI4uiNV = emu_glProgramEnvParameterI4uiNV;
   tbl.glProgramEnvParameterI4uivNV = emu_glProgramEnvParameterI4uivNV;
   tbl.glProgramEnvParametersI4ivNV = emu_glProgramEnvParametersI4ivNV;
   tbl.glProgramEnvParametersI4uivNV = emu_glProgramEnvParametersI4uivNV;
   tbl.glProgramLocalParameterI4iNV = emu_glProgramLocalParameterI4iNV;
   tbl.glProgramLocalParameterI4ivNV = emu_glProgramLocalParameterI4ivNV;
   tbl.glProgramLocalParameterI4uiNV = emu_glProgramLocalParameterI4uiNV;
   tbl.glProgramLocalParameterI4uivNV = emu_glProgramLocalParameterI4uivNV;
   tbl.glProgramLocalParametersI4ivNV = emu_glProgramLocalParametersI4ivNV;
   tbl.glProgramLocalParametersI4uivNV = emu_glProgramLocalParametersI4uivNV;

// GL_NV_texture_multisample

   tbl.glTexImage2DMultisampleCoverageNV = emu_glTexImage2DMultisampleCoverageNV;
   tbl.glTexImage3DMultisampleCoverageNV = emu_glTexImage3DMultisampleCoverageNV;

// GL_SGIS_texture4D

   tbl.glTexImage4DSGIS = emu_glTexImage4DSGIS;

}

REGAL_NAMESPACE_END

#endif
