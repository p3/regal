/* NOTE: Do not edit this file, it is generated by a script:
   Export.py --api gl 4.2 --api wgl 4.0 --api glx 4.0 --api cgl 1.4 --api egl 1.0 --outdir src/regal
*/

/*
  Copyright (c) 2011 NVIDIA Corporation
  Copyright (c) 2011-2012 Cass Everitt
  Copyright (c) 2012 Scott Nations
  Copyright (c) 2012 Mathias Schott
  Copyright (c) 2012 Nigel Stewart
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
  Intended formatting conventions:
  $ astyle --style=allman --indent=spaces=2 --indent-switches
*/

#include "pch.h" /* For MS precompiled header support */

#include "RegalUtil.h"

#if REGAL_DRIVER && defined(__native_client__)
REGAL_GLOBAL_BEGIN

#include <string>
using namespace std;

#include "RegalLog.h"
#include "RegalPush.h"
#include "RegalToken.h"
#include "RegalHelper.h"
#include "RegalPrivate.h"
#include "RegalContext.h"
#include <ppapi/c/ppb_opengles2.h>

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

using namespace ::REGAL_NAMESPACE_INTERNAL::Logging;
using namespace ::REGAL_NAMESPACE_INTERNAL::Token;

static void REGAL_CALL nacl_glBlendFunc(GLenum sfactor, GLenum dfactor)
{
  Internal("nacl_glBlendFunc","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->BlendFunc)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->BlendFunc(rCtx->naclResource, sfactor, dfactor);
}

static void REGAL_CALL nacl_glClear(GLbitfield mask)
{
  Internal("nacl_glClear","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->Clear)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->Clear(rCtx->naclResource, mask);
}

static void REGAL_CALL nacl_glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
  Internal("nacl_glClearColor","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->ClearColor)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->ClearColor(rCtx->naclResource, red, green, blue, alpha);
}

static void REGAL_CALL nacl_glClearStencil(GLint s)
{
  Internal("nacl_glClearStencil","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->ClearStencil)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->ClearStencil(rCtx->naclResource, s);
}

static void REGAL_CALL nacl_glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
  Internal("nacl_glColorMask","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->ColorMask)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->ColorMask(rCtx->naclResource, red, green, blue, alpha);
}

static void REGAL_CALL nacl_glCullFace(GLenum mode)
{
  Internal("nacl_glCullFace","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->CullFace)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->CullFace(rCtx->naclResource, mode);
}

static void REGAL_CALL nacl_glDepthFunc(GLenum func)
{
  Internal("nacl_glDepthFunc","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->DepthFunc)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->DepthFunc(rCtx->naclResource, func);
}

static void REGAL_CALL nacl_glDepthMask(GLboolean flag)
{
  Internal("nacl_glDepthMask","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->DepthMask)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->DepthMask(rCtx->naclResource, flag);
}

static void REGAL_CALL nacl_glDisable(GLenum cap)
{
  Internal("nacl_glDisable","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->Disable)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->Disable(rCtx->naclResource, cap);
}

static void REGAL_CALL nacl_glEnable(GLenum cap)
{
  Internal("nacl_glEnable","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->Enable)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->Enable(rCtx->naclResource, cap);
}

static void REGAL_CALL nacl_glFinish(void)
{
  Internal("nacl_glFinish","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->Finish)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->Finish(rCtx->naclResource);
}

static void REGAL_CALL nacl_glFlush(void)
{
  Internal("nacl_glFlush","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->Flush)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->Flush(rCtx->naclResource);
}

static void REGAL_CALL nacl_glFrontFace(GLenum mode)
{
  Internal("nacl_glFrontFace","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->FrontFace)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->FrontFace(rCtx->naclResource, mode);
}

static void REGAL_CALL nacl_glGetBooleanv(GLenum pname, GLboolean *params)
{
  Internal("nacl_glGetBooleanv","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->GetBooleanv)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->GetBooleanv(rCtx->naclResource, pname, params);
}

static GLenum REGAL_CALL nacl_glGetError(void)
{
  Internal("nacl_glGetError","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->GetError)
  RegalAssert(rCtx->naclResource)
  GLenum  ret = rCtx->naclES2->GetError(rCtx->naclResource);
  return ret;
}

static void REGAL_CALL nacl_glGetFloatv(GLenum pname, GLfloat *params)
{
  Internal("nacl_glGetFloatv","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->GetFloatv)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->GetFloatv(rCtx->naclResource, pname, params);
}

static void REGAL_CALL nacl_glGetIntegerv(GLenum pname, GLint *params)
{
  Internal("nacl_glGetIntegerv","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->GetIntegerv)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->GetIntegerv(rCtx->naclResource, pname, params);
}

static const GLubyte *REGAL_CALL nacl_glGetString(GLenum name)
{
  Internal("nacl_glGetString","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->GetString)
  RegalAssert(rCtx->naclResource)
  const GLubyte * ret = rCtx->naclES2->GetString(rCtx->naclResource, name);
  return ret;
}

static void REGAL_CALL nacl_glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
  Internal("nacl_glGetTexParameterfv","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->GetTexParameterfv)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->GetTexParameterfv(rCtx->naclResource, target, pname, params);
}

static void REGAL_CALL nacl_glGetTexParameteriv(GLenum target, GLenum pname, GLint *params)
{
  Internal("nacl_glGetTexParameteriv","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->GetTexParameteriv)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->GetTexParameteriv(rCtx->naclResource, target, pname, params);
}

static void REGAL_CALL nacl_glHint(GLenum target, GLenum mode)
{
  Internal("nacl_glHint","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->Hint)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->Hint(rCtx->naclResource, target, mode);
}

static GLboolean REGAL_CALL nacl_glIsEnabled(GLenum cap)
{
  Internal("nacl_glIsEnabled","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->IsEnabled)
  RegalAssert(rCtx->naclResource)
  GLboolean  ret = rCtx->naclES2->IsEnabled(rCtx->naclResource, cap);
  return ret;
}

static void REGAL_CALL nacl_glLineWidth(GLfloat width)
{
  Internal("nacl_glLineWidth","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->LineWidth)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->LineWidth(rCtx->naclResource, width);
}

static void REGAL_CALL nacl_glPixelStorei(GLenum pname, GLint param)
{
  Internal("nacl_glPixelStorei","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->PixelStorei)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->PixelStorei(rCtx->naclResource, pname, param);
}

static void REGAL_CALL nacl_glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
{
  Internal("nacl_glReadPixels","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->ReadPixels)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->ReadPixels(rCtx->naclResource, x, y, width, height, format, type, pixels);
}

static void REGAL_CALL nacl_glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("nacl_glScissor","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->Scissor)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->Scissor(rCtx->naclResource, x, y, width, height);
}

static void REGAL_CALL nacl_glStencilFunc(GLenum func, GLint ref, GLuint mask)
{
  Internal("nacl_glStencilFunc","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->StencilFunc)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->StencilFunc(rCtx->naclResource, func, ref, mask);
}

static void REGAL_CALL nacl_glStencilMask(GLuint mask)
{
  Internal("nacl_glStencilMask","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->StencilMask)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->StencilMask(rCtx->naclResource, mask);
}

static void REGAL_CALL nacl_glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)
{
  Internal("nacl_glStencilOp","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->StencilOp)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->StencilOp(rCtx->naclResource, fail, zfail, zpass);
}

static void REGAL_CALL nacl_glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("nacl_glTexImage2D","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->TexImage2D)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->TexImage2D(rCtx->naclResource, target, level, internalformat, width, height, border, format, type, pixels);
}

static void REGAL_CALL nacl_glTexParameterf(GLenum target, GLenum pname, GLfloat param)
{
  Internal("nacl_glTexParameterf","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->TexParameterf)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->TexParameterf(rCtx->naclResource, target, pname, param);
}

static void REGAL_CALL nacl_glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
  Internal("nacl_glTexParameterfv","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->TexParameterfv)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->TexParameterfv(rCtx->naclResource, target, pname, params);
}

static void REGAL_CALL nacl_glTexParameteri(GLenum target, GLenum pname, GLint param)
{
  Internal("nacl_glTexParameteri","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->TexParameteri)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->TexParameteri(rCtx->naclResource, target, pname, param);
}

static void REGAL_CALL nacl_glTexParameteriv(GLenum target, GLenum pname, const GLint *params)
{
  Internal("nacl_glTexParameteriv","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->TexParameteriv)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->TexParameteriv(rCtx->naclResource, target, pname, params);
}

static void REGAL_CALL nacl_glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("nacl_glViewport","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->Viewport)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->Viewport(rCtx->naclResource, x, y, width, height);
}

static void REGAL_CALL nacl_glBindTexture(GLenum target, GLuint texture)
{
  Internal("nacl_glBindTexture","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->BindTexture)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->BindTexture(rCtx->naclResource, target, texture);
}

static void REGAL_CALL nacl_glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  Internal("nacl_glCopyTexImage2D","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->CopyTexImage2D)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->CopyTexImage2D(rCtx->naclResource, target, level, internalformat, x, y, width, height, border);
}

static void REGAL_CALL nacl_glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  Internal("nacl_glCopyTexSubImage2D","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->CopyTexSubImage2D)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->CopyTexSubImage2D(rCtx->naclResource, target, level, xoffset, yoffset, x, y, width, height);
}

static void REGAL_CALL nacl_glDeleteTextures(GLsizei n, const GLuint *textures)
{
  Internal("nacl_glDeleteTextures","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->DeleteTextures)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->DeleteTextures(rCtx->naclResource, n, textures);
}

static void REGAL_CALL nacl_glDrawArrays(GLenum mode, GLint first, GLsizei count)
{
  Internal("nacl_glDrawArrays","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->DrawArrays)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->DrawArrays(rCtx->naclResource, mode, first, count);
}

static void REGAL_CALL nacl_glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)
{
  Internal("nacl_glDrawElements","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->DrawElements)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->DrawElements(rCtx->naclResource, mode, count, type, indices);
}

static void REGAL_CALL nacl_glGenTextures(GLsizei n, GLuint *textures)
{
  Internal("nacl_glGenTextures","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->GenTextures)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->GenTextures(rCtx->naclResource, n, textures);
}

static GLboolean REGAL_CALL nacl_glIsTexture(GLuint texture)
{
  Internal("nacl_glIsTexture","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->IsTexture)
  RegalAssert(rCtx->naclResource)
  GLboolean  ret = rCtx->naclES2->IsTexture(rCtx->naclResource, texture);
  return ret;
}

static void REGAL_CALL nacl_glPolygonOffset(GLfloat factor, GLfloat units)
{
  Internal("nacl_glPolygonOffset","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->PolygonOffset)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->PolygonOffset(rCtx->naclResource, factor, units);
}

static void REGAL_CALL nacl_glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  Internal("nacl_glTexSubImage2D","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->TexSubImage2D)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->TexSubImage2D(rCtx->naclResource, target, level, xoffset, yoffset, width, height, format, type, pixels);
}

static void REGAL_CALL nacl_glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
  Internal("nacl_glBlendColor","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->BlendColor)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->BlendColor(rCtx->naclResource, red, green, blue, alpha);
}

static void REGAL_CALL nacl_glBlendEquation(GLenum mode)
{
  Internal("nacl_glBlendEquation","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->BlendEquation)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->BlendEquation(rCtx->naclResource, mode);
}

static void REGAL_CALL nacl_glActiveTexture(GLenum texture)
{
  Internal("nacl_glActiveTexture","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->ActiveTexture)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->ActiveTexture(rCtx->naclResource, texture);
}

static void REGAL_CALL nacl_glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
{
  Internal("nacl_glCompressedTexImage2D","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->CompressedTexImage2D)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->CompressedTexImage2D(rCtx->naclResource, target, level, internalformat, width, height, border, imageSize, data);
}

static void REGAL_CALL nacl_glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  Internal("nacl_glCompressedTexSubImage2D","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->CompressedTexSubImage2D)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->CompressedTexSubImage2D(rCtx->naclResource, target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

static void REGAL_CALL nacl_glSampleCoverage(GLclampf value, GLboolean invert)
{
  Internal("nacl_glSampleCoverage","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->SampleCoverage)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->SampleCoverage(rCtx->naclResource, value, invert);
}

static void REGAL_CALL nacl_glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
  Internal("nacl_glBlendFuncSeparate","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->BlendFuncSeparate)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->BlendFuncSeparate(rCtx->naclResource, sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

static void REGAL_CALL nacl_glBindBuffer(GLenum target, GLuint buffer)
{
  Internal("nacl_glBindBuffer","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->BindBuffer)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->BindBuffer(rCtx->naclResource, target, buffer);
}

static void REGAL_CALL nacl_glBufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
  Internal("nacl_glBufferData","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->BufferData)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->BufferData(rCtx->naclResource, target, size, data, usage);
}

static void REGAL_CALL nacl_glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
  Internal("nacl_glBufferSubData","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->BufferSubData)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->BufferSubData(rCtx->naclResource, target, offset, size, data);
}

static void REGAL_CALL nacl_glDeleteBuffers(GLsizei n, const GLuint *buffers)
{
  Internal("nacl_glDeleteBuffers","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->DeleteBuffers)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->DeleteBuffers(rCtx->naclResource, n, buffers);
}

static void REGAL_CALL nacl_glGenBuffers(GLsizei n, GLuint *buffers)
{
  Internal("nacl_glGenBuffers","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->GenBuffers)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->GenBuffers(rCtx->naclResource, n, buffers);
}

static void REGAL_CALL nacl_glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
  Internal("nacl_glGetBufferParameteriv","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->GetBufferParameteriv)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->GetBufferParameteriv(rCtx->naclResource, target, pname, params);
}

static GLboolean REGAL_CALL nacl_glIsBuffer(GLuint buffer)
{
  Internal("nacl_glIsBuffer","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->IsBuffer)
  RegalAssert(rCtx->naclResource)
  GLboolean  ret = rCtx->naclES2->IsBuffer(rCtx->naclResource, buffer);
  return ret;
}

static void REGAL_CALL nacl_glAttachShader(GLuint program, GLuint shader)
{
  Internal("nacl_glAttachShader","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->AttachShader)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->AttachShader(rCtx->naclResource, program, shader);
}

static void REGAL_CALL nacl_glBindAttribLocation(GLuint program, GLuint index, const GLchar *name)
{
  Internal("nacl_glBindAttribLocation","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->BindAttribLocation)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->BindAttribLocation(rCtx->naclResource, program, index, name);
}

static void REGAL_CALL nacl_glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)
{
  Internal("nacl_glBlendEquationSeparate","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->BlendEquationSeparate)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->BlendEquationSeparate(rCtx->naclResource, modeRGB, modeAlpha);
}

static void REGAL_CALL nacl_glCompileShader(GLuint shader)
{
  Internal("nacl_glCompileShader","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->CompileShader)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->CompileShader(rCtx->naclResource, shader);
}

static GLuint REGAL_CALL nacl_glCreateProgram(void)
{
  Internal("nacl_glCreateProgram","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->CreateProgram)
  RegalAssert(rCtx->naclResource)
  GLuint  ret = rCtx->naclES2->CreateProgram(rCtx->naclResource);
  return ret;
}

static GLuint REGAL_CALL nacl_glCreateShader(GLenum type)
{
  Internal("nacl_glCreateShader","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->CreateShader)
  RegalAssert(rCtx->naclResource)
  GLuint  ret = rCtx->naclES2->CreateShader(rCtx->naclResource, type);
  return ret;
}

static void REGAL_CALL nacl_glDeleteProgram(GLuint program)
{
  Internal("nacl_glDeleteProgram","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->DeleteProgram)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->DeleteProgram(rCtx->naclResource, program);
}

static void REGAL_CALL nacl_glDeleteShader(GLuint shader)
{
  Internal("nacl_glDeleteShader","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->DeleteShader)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->DeleteShader(rCtx->naclResource, shader);
}

static void REGAL_CALL nacl_glDetachShader(GLuint program, GLuint shader)
{
  Internal("nacl_glDetachShader","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->DetachShader)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->DetachShader(rCtx->naclResource, program, shader);
}

static void REGAL_CALL nacl_glDisableVertexAttribArray(GLuint index)
{
  Internal("nacl_glDisableVertexAttribArray","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->DisableVertexAttribArray)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->DisableVertexAttribArray(rCtx->naclResource, index);
}

static void REGAL_CALL nacl_glEnableVertexAttribArray(GLuint index)
{
  Internal("nacl_glEnableVertexAttribArray","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->EnableVertexAttribArray)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->EnableVertexAttribArray(rCtx->naclResource, index);
}

static void REGAL_CALL nacl_glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
  Internal("nacl_glGetActiveAttrib","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->GetActiveAttrib)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->GetActiveAttrib(rCtx->naclResource, program, index, bufSize, length, size, type, name);
}

static void REGAL_CALL nacl_glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
  Internal("nacl_glGetActiveUniform","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->GetActiveUniform)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->GetActiveUniform(rCtx->naclResource, program, index, bufSize, length, size, type, name);
}

static void REGAL_CALL nacl_glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)
{
  Internal("nacl_glGetAttachedShaders","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->GetAttachedShaders)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->GetAttachedShaders(rCtx->naclResource, program, maxCount, count, shaders);
}

static GLint REGAL_CALL nacl_glGetAttribLocation(GLuint program, const GLchar *name)
{
  Internal("nacl_glGetAttribLocation","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->GetAttribLocation)
  RegalAssert(rCtx->naclResource)
  GLint  ret = rCtx->naclES2->GetAttribLocation(rCtx->naclResource, program, name);
  return ret;
}

static void REGAL_CALL nacl_glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
  Internal("nacl_glGetProgramInfoLog","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->GetProgramInfoLog)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->GetProgramInfoLog(rCtx->naclResource, program, bufSize, length, infoLog);
}

static void REGAL_CALL nacl_glGetProgramiv(GLuint program, GLenum pname, GLint *params)
{
  Internal("nacl_glGetProgramiv","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->GetProgramiv)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->GetProgramiv(rCtx->naclResource, program, pname, params);
}

static void REGAL_CALL nacl_glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
  Internal("nacl_glGetShaderInfoLog","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->GetShaderInfoLog)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->GetShaderInfoLog(rCtx->naclResource, shader, bufSize, length, infoLog);
}

static void REGAL_CALL nacl_glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)
{
  Internal("nacl_glGetShaderSource","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->GetShaderSource)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->GetShaderSource(rCtx->naclResource, shader, bufSize, length, source);
}

static void REGAL_CALL nacl_glGetShaderiv(GLuint shader, GLenum pname, GLint *params)
{
  Internal("nacl_glGetShaderiv","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->GetShaderiv)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->GetShaderiv(rCtx->naclResource, shader, pname, params);
}

static GLint REGAL_CALL nacl_glGetUniformLocation(GLuint program, const GLchar *name)
{
  Internal("nacl_glGetUniformLocation","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->GetUniformLocation)
  RegalAssert(rCtx->naclResource)
  GLint  ret = rCtx->naclES2->GetUniformLocation(rCtx->naclResource, program, name);
  return ret;
}

static void REGAL_CALL nacl_glGetUniformfv(GLuint program, GLint location, GLfloat *params)
{
  Internal("nacl_glGetUniformfv","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->GetUniformfv)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->GetUniformfv(rCtx->naclResource, program, location, params);
}

static void REGAL_CALL nacl_glGetUniformiv(GLuint program, GLint location, GLint *params)
{
  Internal("nacl_glGetUniformiv","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->GetUniformiv)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->GetUniformiv(rCtx->naclResource, program, location, params);
}

static void REGAL_CALL nacl_glGetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid **pointer)
{
  Internal("nacl_glGetVertexAttribPointerv","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->GetVertexAttribPointerv)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->GetVertexAttribPointerv(rCtx->naclResource, index, pname, pointer);
}

static void REGAL_CALL nacl_glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)
{
  Internal("nacl_glGetVertexAttribfv","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->GetVertexAttribfv)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->GetVertexAttribfv(rCtx->naclResource, index, pname, params);
}

static void REGAL_CALL nacl_glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)
{
  Internal("nacl_glGetVertexAttribiv","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->GetVertexAttribiv)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->GetVertexAttribiv(rCtx->naclResource, index, pname, params);
}

static GLboolean REGAL_CALL nacl_glIsProgram(GLuint program)
{
  Internal("nacl_glIsProgram","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->IsProgram)
  RegalAssert(rCtx->naclResource)
  GLboolean  ret = rCtx->naclES2->IsProgram(rCtx->naclResource, program);
  return ret;
}

static GLboolean REGAL_CALL nacl_glIsShader(GLuint shader)
{
  Internal("nacl_glIsShader","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->IsShader)
  RegalAssert(rCtx->naclResource)
  GLboolean  ret = rCtx->naclES2->IsShader(rCtx->naclResource, shader);
  return ret;
}

static void REGAL_CALL nacl_glLinkProgram(GLuint program)
{
  Internal("nacl_glLinkProgram","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->LinkProgram)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->LinkProgram(rCtx->naclResource, program);
}

static void REGAL_CALL nacl_glShaderSource(GLuint shader, GLsizei count, const GLchar **string, const GLint *length)
{
  Internal("nacl_glShaderSource","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->ShaderSource)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->ShaderSource(rCtx->naclResource, shader, count, string, length);
}

static void REGAL_CALL nacl_glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
{
  Internal("nacl_glStencilFuncSeparate","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->StencilFuncSeparate)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->StencilFuncSeparate(rCtx->naclResource, face, func, ref, mask);
}

static void REGAL_CALL nacl_glStencilMaskSeparate(GLenum face, GLuint mask)
{
  Internal("nacl_glStencilMaskSeparate","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->StencilMaskSeparate)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->StencilMaskSeparate(rCtx->naclResource, face, mask);
}

static void REGAL_CALL nacl_glStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass)
{
  Internal("nacl_glStencilOpSeparate","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->StencilOpSeparate)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->StencilOpSeparate(rCtx->naclResource, face, fail, zfail, zpass);
}

static void REGAL_CALL nacl_glUniform1f(GLint location, GLfloat v0)
{
  Internal("nacl_glUniform1f","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->Uniform1f)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->Uniform1f(rCtx->naclResource, location, v0);
}

static void REGAL_CALL nacl_glUniform1fv(GLint location, GLsizei count, const GLfloat *value)
{
  Internal("nacl_glUniform1fv","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->Uniform1fv)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->Uniform1fv(rCtx->naclResource, location, count, value);
}

static void REGAL_CALL nacl_glUniform1i(GLint location, GLint v0)
{
  Internal("nacl_glUniform1i","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->Uniform1i)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->Uniform1i(rCtx->naclResource, location, v0);
}

static void REGAL_CALL nacl_glUniform1iv(GLint location, GLsizei count, const GLint *value)
{
  Internal("nacl_glUniform1iv","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->Uniform1iv)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->Uniform1iv(rCtx->naclResource, location, count, value);
}

static void REGAL_CALL nacl_glUniform2f(GLint location, GLfloat v0, GLfloat v1)
{
  Internal("nacl_glUniform2f","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->Uniform2f)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->Uniform2f(rCtx->naclResource, location, v0, v1);
}

static void REGAL_CALL nacl_glUniform2fv(GLint location, GLsizei count, const GLfloat *value)
{
  Internal("nacl_glUniform2fv","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->Uniform2fv)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->Uniform2fv(rCtx->naclResource, location, count, value);
}

static void REGAL_CALL nacl_glUniform2i(GLint location, GLint v0, GLint v1)
{
  Internal("nacl_glUniform2i","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->Uniform2i)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->Uniform2i(rCtx->naclResource, location, v0, v1);
}

static void REGAL_CALL nacl_glUniform2iv(GLint location, GLsizei count, const GLint *value)
{
  Internal("nacl_glUniform2iv","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->Uniform2iv)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->Uniform2iv(rCtx->naclResource, location, count, value);
}

static void REGAL_CALL nacl_glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  Internal("nacl_glUniform3f","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->Uniform3f)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->Uniform3f(rCtx->naclResource, location, v0, v1, v2);
}

static void REGAL_CALL nacl_glUniform3fv(GLint location, GLsizei count, const GLfloat *value)
{
  Internal("nacl_glUniform3fv","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->Uniform3fv)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->Uniform3fv(rCtx->naclResource, location, count, value);
}

static void REGAL_CALL nacl_glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)
{
  Internal("nacl_glUniform3i","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->Uniform3i)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->Uniform3i(rCtx->naclResource, location, v0, v1, v2);
}

static void REGAL_CALL nacl_glUniform3iv(GLint location, GLsizei count, const GLint *value)
{
  Internal("nacl_glUniform3iv","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->Uniform3iv)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->Uniform3iv(rCtx->naclResource, location, count, value);
}

static void REGAL_CALL nacl_glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  Internal("nacl_glUniform4f","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->Uniform4f)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->Uniform4f(rCtx->naclResource, location, v0, v1, v2, v3);
}

static void REGAL_CALL nacl_glUniform4fv(GLint location, GLsizei count, const GLfloat *value)
{
  Internal("nacl_glUniform4fv","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->Uniform4fv)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->Uniform4fv(rCtx->naclResource, location, count, value);
}

static void REGAL_CALL nacl_glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  Internal("nacl_glUniform4i","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->Uniform4i)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->Uniform4i(rCtx->naclResource, location, v0, v1, v2, v3);
}

static void REGAL_CALL nacl_glUniform4iv(GLint location, GLsizei count, const GLint *value)
{
  Internal("nacl_glUniform4iv","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->Uniform4iv)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->Uniform4iv(rCtx->naclResource, location, count, value);
}

static void REGAL_CALL nacl_glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("nacl_glUniformMatrix2fv","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->UniformMatrix2fv)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->UniformMatrix2fv(rCtx->naclResource, location, count, transpose, value);
}

static void REGAL_CALL nacl_glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("nacl_glUniformMatrix3fv","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->UniformMatrix3fv)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->UniformMatrix3fv(rCtx->naclResource, location, count, transpose, value);
}

static void REGAL_CALL nacl_glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  Internal("nacl_glUniformMatrix4fv","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->UniformMatrix4fv)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->UniformMatrix4fv(rCtx->naclResource, location, count, transpose, value);
}

static void REGAL_CALL nacl_glUseProgram(GLuint program)
{
  Internal("nacl_glUseProgram","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->UseProgram)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->UseProgram(rCtx->naclResource, program);
}

static void REGAL_CALL nacl_glValidateProgram(GLuint program)
{
  Internal("nacl_glValidateProgram","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->ValidateProgram)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->ValidateProgram(rCtx->naclResource, program);
}

static void REGAL_CALL nacl_glVertexAttrib1f(GLuint index, GLfloat x)
{
  Internal("nacl_glVertexAttrib1f","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->VertexAttrib1f)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->VertexAttrib1f(rCtx->naclResource, index, x);
}

static void REGAL_CALL nacl_glVertexAttrib1fv(GLuint index, const GLfloat *v)
{
  Internal("nacl_glVertexAttrib1fv","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->VertexAttrib1fv)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->VertexAttrib1fv(rCtx->naclResource, index, v);
}

static void REGAL_CALL nacl_glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y)
{
  Internal("nacl_glVertexAttrib2f","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->VertexAttrib2f)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->VertexAttrib2f(rCtx->naclResource, index, x, y);
}

static void REGAL_CALL nacl_glVertexAttrib2fv(GLuint index, const GLfloat *v)
{
  Internal("nacl_glVertexAttrib2fv","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->VertexAttrib2fv)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->VertexAttrib2fv(rCtx->naclResource, index, v);
}

static void REGAL_CALL nacl_glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
  Internal("nacl_glVertexAttrib3f","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->VertexAttrib3f)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->VertexAttrib3f(rCtx->naclResource, index, x, y, z);
}

static void REGAL_CALL nacl_glVertexAttrib3fv(GLuint index, const GLfloat *v)
{
  Internal("nacl_glVertexAttrib3fv","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->VertexAttrib3fv)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->VertexAttrib3fv(rCtx->naclResource, index, v);
}

static void REGAL_CALL nacl_glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  Internal("nacl_glVertexAttrib4f","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->VertexAttrib4f)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->VertexAttrib4f(rCtx->naclResource, index, x, y, z, w);
}

static void REGAL_CALL nacl_glVertexAttrib4fv(GLuint index, const GLfloat *v)
{
  Internal("nacl_glVertexAttrib4fv","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->VertexAttrib4fv)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->VertexAttrib4fv(rCtx->naclResource, index, v);
}

static void REGAL_CALL nacl_glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
{
  Internal("nacl_glVertexAttribPointer","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->VertexAttribPointer)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->VertexAttribPointer(rCtx->naclResource, index, size, type, normalized, stride, pointer);
}

static void REGAL_CALL nacl_glClearDepthf(GLclampf d)
{
  Internal("nacl_glClearDepthf","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->ClearDepthf)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->ClearDepthf(rCtx->naclResource, d);
}

static void REGAL_CALL nacl_glDepthRangef(GLclampf n, GLclampf f)
{
  Internal("nacl_glDepthRangef","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->DepthRangef)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->DepthRangef(rCtx->naclResource, n, f);
}

static void REGAL_CALL nacl_glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)
{
  Internal("nacl_glGetShaderPrecisionFormat","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->GetShaderPrecisionFormat)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->GetShaderPrecisionFormat(rCtx->naclResource, shadertype, precisiontype, range, precision);
}

static void REGAL_CALL nacl_glReleaseShaderCompiler(void)
{
  Internal("nacl_glReleaseShaderCompiler","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->ReleaseShaderCompiler)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->ReleaseShaderCompiler(rCtx->naclResource);
}

static void REGAL_CALL nacl_glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length)
{
  Internal("nacl_glShaderBinary","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->ShaderBinary)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->ShaderBinary(rCtx->naclResource, count, shaders, binaryformat, binary, length);
}

static void REGAL_CALL nacl_glBindFramebuffer(GLenum target, GLuint framebuffer)
{
  Internal("nacl_glBindFramebuffer","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->BindFramebuffer)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->BindFramebuffer(rCtx->naclResource, target, framebuffer);
}

static void REGAL_CALL nacl_glBindRenderbuffer(GLenum target, GLuint renderbuffer)
{
  Internal("nacl_glBindRenderbuffer","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->BindRenderbuffer)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->BindRenderbuffer(rCtx->naclResource, target, renderbuffer);
}

static GLenum REGAL_CALL nacl_glCheckFramebufferStatus(GLenum target)
{
  Internal("nacl_glCheckFramebufferStatus","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->CheckFramebufferStatus)
  RegalAssert(rCtx->naclResource)
  GLenum  ret = rCtx->naclES2->CheckFramebufferStatus(rCtx->naclResource, target);
  return ret;
}

static void REGAL_CALL nacl_glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers)
{
  Internal("nacl_glDeleteFramebuffers","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->DeleteFramebuffers)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->DeleteFramebuffers(rCtx->naclResource, n, framebuffers);
}

static void REGAL_CALL nacl_glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers)
{
  Internal("nacl_glDeleteRenderbuffers","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->DeleteRenderbuffers)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->DeleteRenderbuffers(rCtx->naclResource, n, renderbuffers);
}

static void REGAL_CALL nacl_glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  Internal("nacl_glFramebufferRenderbuffer","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->FramebufferRenderbuffer)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->FramebufferRenderbuffer(rCtx->naclResource, target, attachment, renderbuffertarget, renderbuffer);
}

static void REGAL_CALL nacl_glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  Internal("nacl_glFramebufferTexture2D","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->FramebufferTexture2D)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->FramebufferTexture2D(rCtx->naclResource, target, attachment, textarget, texture, level);
}

static void REGAL_CALL nacl_glGenFramebuffers(GLsizei n, GLuint *framebuffers)
{
  Internal("nacl_glGenFramebuffers","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->GenFramebuffers)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->GenFramebuffers(rCtx->naclResource, n, framebuffers);
}

static void REGAL_CALL nacl_glGenRenderbuffers(GLsizei n, GLuint *renderbuffers)
{
  Internal("nacl_glGenRenderbuffers","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->GenRenderbuffers)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->GenRenderbuffers(rCtx->naclResource, n, renderbuffers);
}

static void REGAL_CALL nacl_glGenerateMipmap(GLenum target)
{
  Internal("nacl_glGenerateMipmap","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->GenerateMipmap)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->GenerateMipmap(rCtx->naclResource, target);
}

static void REGAL_CALL nacl_glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
  Internal("nacl_glGetFramebufferAttachmentParameteriv","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->GetFramebufferAttachmentParameteriv)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->GetFramebufferAttachmentParameteriv(rCtx->naclResource, target, attachment, pname, params);
}

static void REGAL_CALL nacl_glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
  Internal("nacl_glGetRenderbufferParameteriv","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->GetRenderbufferParameteriv)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->GetRenderbufferParameteriv(rCtx->naclResource, target, pname, params);
}

static GLboolean REGAL_CALL nacl_glIsFramebuffer(GLuint framebuffer)
{
  Internal("nacl_glIsFramebuffer","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->IsFramebuffer)
  RegalAssert(rCtx->naclResource)
  GLboolean  ret = rCtx->naclES2->IsFramebuffer(rCtx->naclResource, framebuffer);
  return ret;
}

static GLboolean REGAL_CALL nacl_glIsRenderbuffer(GLuint renderbuffer)
{
  Internal("nacl_glIsRenderbuffer","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->IsRenderbuffer)
  RegalAssert(rCtx->naclResource)
  GLboolean  ret = rCtx->naclES2->IsRenderbuffer(rCtx->naclResource, renderbuffer);
  return ret;
}

static void REGAL_CALL nacl_glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
  Internal("nacl_glRenderbufferStorage","()");
  RegalContext * rCtx = GET_REGAL_CONTEXT();
  RegalAssert(rCtx)
  RegalAssert(rCtx->naclES2)
  RegalAssert(rCtx->naclES2->RenderbufferStorage)
  RegalAssert(rCtx->naclResource)
  rCtx->naclES2->RenderbufferStorage(rCtx->naclResource, target, internalformat, width, height);
}

void InitDispatchTableNacl(DispatchTable &tbl)
{
  // OpenGL ES 2.0 only
  tbl.glBlendFunc = nacl_glBlendFunc;
  tbl.glClear = nacl_glClear;
  tbl.glClearColor = nacl_glClearColor;
  tbl.glClearStencil = nacl_glClearStencil;
  tbl.glColorMask = nacl_glColorMask;
  tbl.glCullFace = nacl_glCullFace;
  tbl.glDepthFunc = nacl_glDepthFunc;
  tbl.glDepthMask = nacl_glDepthMask;
  tbl.glDisable = nacl_glDisable;
  tbl.glEnable = nacl_glEnable;
  tbl.glFinish = nacl_glFinish;
  tbl.glFlush = nacl_glFlush;
  tbl.glFrontFace = nacl_glFrontFace;
  tbl.glGetBooleanv = nacl_glGetBooleanv;
  tbl.glGetError = nacl_glGetError;
  tbl.glGetFloatv = nacl_glGetFloatv;
  tbl.glGetIntegerv = nacl_glGetIntegerv;
  tbl.glGetString = nacl_glGetString;
  tbl.glGetTexParameterfv = nacl_glGetTexParameterfv;
  tbl.glGetTexParameteriv = nacl_glGetTexParameteriv;
  tbl.glHint = nacl_glHint;
  tbl.glIsEnabled = nacl_glIsEnabled;
  tbl.glLineWidth = nacl_glLineWidth;
  tbl.glPixelStorei = nacl_glPixelStorei;
  tbl.glReadPixels = nacl_glReadPixels;
  tbl.glScissor = nacl_glScissor;
  tbl.glStencilFunc = nacl_glStencilFunc;
  tbl.glStencilMask = nacl_glStencilMask;
  tbl.glStencilOp = nacl_glStencilOp;
  tbl.glTexImage2D = nacl_glTexImage2D;
  tbl.glTexParameterf = nacl_glTexParameterf;
  tbl.glTexParameterfv = nacl_glTexParameterfv;
  tbl.glTexParameteri = nacl_glTexParameteri;
  tbl.glTexParameteriv = nacl_glTexParameteriv;
  tbl.glViewport = nacl_glViewport;
  tbl.glBindTexture = nacl_glBindTexture;
  tbl.glCopyTexImage2D = nacl_glCopyTexImage2D;
  tbl.glCopyTexSubImage2D = nacl_glCopyTexSubImage2D;
  tbl.glDeleteTextures = nacl_glDeleteTextures;
  tbl.glDrawArrays = nacl_glDrawArrays;
  tbl.glDrawElements = nacl_glDrawElements;
  tbl.glGenTextures = nacl_glGenTextures;
  tbl.glIsTexture = nacl_glIsTexture;
  tbl.glPolygonOffset = nacl_glPolygonOffset;
  tbl.glTexSubImage2D = nacl_glTexSubImage2D;
  tbl.glBlendColor = nacl_glBlendColor;
  tbl.glBlendEquation = nacl_glBlendEquation;
  tbl.glActiveTexture = nacl_glActiveTexture;
  tbl.glCompressedTexImage2D = nacl_glCompressedTexImage2D;
  tbl.glCompressedTexSubImage2D = nacl_glCompressedTexSubImage2D;
  tbl.glSampleCoverage = nacl_glSampleCoverage;
  tbl.glBlendFuncSeparate = nacl_glBlendFuncSeparate;
  tbl.glBindBuffer = nacl_glBindBuffer;
  tbl.glBufferData = nacl_glBufferData;
  tbl.glBufferSubData = nacl_glBufferSubData;
  tbl.glDeleteBuffers = nacl_glDeleteBuffers;
  tbl.glGenBuffers = nacl_glGenBuffers;
  tbl.glGetBufferParameteriv = nacl_glGetBufferParameteriv;
  tbl.glIsBuffer = nacl_glIsBuffer;
  tbl.glAttachShader = nacl_glAttachShader;
  tbl.glBindAttribLocation = nacl_glBindAttribLocation;
  tbl.glBlendEquationSeparate = nacl_glBlendEquationSeparate;
  tbl.glCompileShader = nacl_glCompileShader;
  tbl.glCreateProgram = nacl_glCreateProgram;
  tbl.glCreateShader = nacl_glCreateShader;
  tbl.glDeleteProgram = nacl_glDeleteProgram;
  tbl.glDeleteShader = nacl_glDeleteShader;
  tbl.glDetachShader = nacl_glDetachShader;
  tbl.glDisableVertexAttribArray = nacl_glDisableVertexAttribArray;
  tbl.glEnableVertexAttribArray = nacl_glEnableVertexAttribArray;
  tbl.glGetActiveAttrib = nacl_glGetActiveAttrib;
  tbl.glGetActiveUniform = nacl_glGetActiveUniform;
  tbl.glGetAttachedShaders = nacl_glGetAttachedShaders;
  tbl.glGetAttribLocation = nacl_glGetAttribLocation;
  tbl.glGetProgramInfoLog = nacl_glGetProgramInfoLog;
  tbl.glGetProgramiv = nacl_glGetProgramiv;
  tbl.glGetShaderInfoLog = nacl_glGetShaderInfoLog;
  tbl.glGetShaderSource = nacl_glGetShaderSource;
  tbl.glGetShaderiv = nacl_glGetShaderiv;
  tbl.glGetUniformLocation = nacl_glGetUniformLocation;
  tbl.glGetUniformfv = nacl_glGetUniformfv;
  tbl.glGetUniformiv = nacl_glGetUniformiv;
  tbl.glGetVertexAttribPointerv = nacl_glGetVertexAttribPointerv;
  tbl.glGetVertexAttribfv = nacl_glGetVertexAttribfv;
  tbl.glGetVertexAttribiv = nacl_glGetVertexAttribiv;
  tbl.glIsProgram = nacl_glIsProgram;
  tbl.glIsShader = nacl_glIsShader;
  tbl.glLinkProgram = nacl_glLinkProgram;
  tbl.glShaderSource = nacl_glShaderSource;
  tbl.glStencilFuncSeparate = nacl_glStencilFuncSeparate;
  tbl.glStencilMaskSeparate = nacl_glStencilMaskSeparate;
  tbl.glStencilOpSeparate = nacl_glStencilOpSeparate;
  tbl.glUniform1f = nacl_glUniform1f;
  tbl.glUniform1fv = nacl_glUniform1fv;
  tbl.glUniform1i = nacl_glUniform1i;
  tbl.glUniform1iv = nacl_glUniform1iv;
  tbl.glUniform2f = nacl_glUniform2f;
  tbl.glUniform2fv = nacl_glUniform2fv;
  tbl.glUniform2i = nacl_glUniform2i;
  tbl.glUniform2iv = nacl_glUniform2iv;
  tbl.glUniform3f = nacl_glUniform3f;
  tbl.glUniform3fv = nacl_glUniform3fv;
  tbl.glUniform3i = nacl_glUniform3i;
  tbl.glUniform3iv = nacl_glUniform3iv;
  tbl.glUniform4f = nacl_glUniform4f;
  tbl.glUniform4fv = nacl_glUniform4fv;
  tbl.glUniform4i = nacl_glUniform4i;
  tbl.glUniform4iv = nacl_glUniform4iv;
  tbl.glUniformMatrix2fv = nacl_glUniformMatrix2fv;
  tbl.glUniformMatrix3fv = nacl_glUniformMatrix3fv;
  tbl.glUniformMatrix4fv = nacl_glUniformMatrix4fv;
  tbl.glUseProgram = nacl_glUseProgram;
  tbl.glValidateProgram = nacl_glValidateProgram;
  tbl.glVertexAttrib1f = nacl_glVertexAttrib1f;
  tbl.glVertexAttrib1fv = nacl_glVertexAttrib1fv;
  tbl.glVertexAttrib2f = nacl_glVertexAttrib2f;
  tbl.glVertexAttrib2fv = nacl_glVertexAttrib2fv;
  tbl.glVertexAttrib3f = nacl_glVertexAttrib3f;
  tbl.glVertexAttrib3fv = nacl_glVertexAttrib3fv;
  tbl.glVertexAttrib4f = nacl_glVertexAttrib4f;
  tbl.glVertexAttrib4fv = nacl_glVertexAttrib4fv;
  tbl.glVertexAttribPointer = nacl_glVertexAttribPointer;
  tbl.glClearDepthf = nacl_glClearDepthf;
  tbl.glDepthRangef = nacl_glDepthRangef;
  tbl.glGetShaderPrecisionFormat = nacl_glGetShaderPrecisionFormat;
  tbl.glReleaseShaderCompiler = nacl_glReleaseShaderCompiler;
  tbl.glShaderBinary = nacl_glShaderBinary;
  tbl.glBindFramebuffer = nacl_glBindFramebuffer;
  tbl.glBindRenderbuffer = nacl_glBindRenderbuffer;
  tbl.glCheckFramebufferStatus = nacl_glCheckFramebufferStatus;
  tbl.glDeleteFramebuffers = nacl_glDeleteFramebuffers;
  tbl.glDeleteRenderbuffers = nacl_glDeleteRenderbuffers;
  tbl.glFramebufferRenderbuffer = nacl_glFramebufferRenderbuffer;
  tbl.glFramebufferTexture2D = nacl_glFramebufferTexture2D;
  tbl.glGenFramebuffers = nacl_glGenFramebuffers;
  tbl.glGenRenderbuffers = nacl_glGenRenderbuffers;
  tbl.glGenerateMipmap = nacl_glGenerateMipmap;
  tbl.glGetFramebufferAttachmentParameteriv = nacl_glGetFramebufferAttachmentParameteriv;
  tbl.glGetRenderbufferParameteriv = nacl_glGetRenderbufferParameteriv;
  tbl.glIsFramebuffer = nacl_glIsFramebuffer;
  tbl.glIsRenderbuffer = nacl_glIsRenderbuffer;
  tbl.glRenderbufferStorage = nacl_glRenderbufferStorage;

}

REGAL_NAMESPACE_END

#endif
