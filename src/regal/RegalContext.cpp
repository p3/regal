/* NOTE: Do not edit this file, it is generated by a script:
   Export.py --api gl 4.2 --api wgl 4.0 --api glx 4.0 --api cgl 1.4 --api egl 1.0 --outdir .
*/

/*
  Copyright (c) 2011 NVIDIA Corporation
  Copyright (c) 2011-2012 Cass Everitt
  Copyright (c) 2012 Scott Nations
  Copyright (c) 2012 Mathias Schott
  Copyright (c) 2012 Nigel Stewart
  Copyright (c) 2012 Google Inc.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
  Intended formatting conventions:
  $ astyle --style=allman --indent=spaces=2 --indent-switches
*/

#include "pch.h" /* For MS precompiled header support */

#include "RegalUtil.h"

REGAL_GLOBAL_BEGIN

#include "RegalConfig.h"
#include "RegalContext.h"
#include "RegalDebugInfo.h"
#include "RegalContextInfo.h"

#include "RegalMarker.h"
#include "RegalFrame.h"
#if REGAL_EMULATION
#include "RegalObj.h"
#include "RegalPpa.h"
#include "RegalPpca.h"
#include "RegalBin.h"
#include "RegalXfer.h"
#include "RegalDsa.h"
#include "RegalIff.h"
#include "RegalSo.h"
#include "RegalVao.h"
#include "RegalTexC.h"
#include "RegalFilt.h"
#endif

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

using namespace Logging;

RegalContext::RegalContext()
: initialized(false),
  dispatcher(),
  dbg(NULL),
  info(NULL),
  marker(NULL),
  frame(NULL),
#if REGAL_EMULATION
  emuLevel(0),
  obj(NULL),
  ppa(NULL),
  ppca(NULL),
  bin(NULL),
  xfer(NULL),
  dsa(NULL),
  iff(NULL),
  so(NULL),
  vao(NULL),
  texc(NULL),
  filt(NULL),
#endif
#if REGAL_SYS_PPAPI
  ppapiES2(NULL),
  ppapiResource(0),
#endif
  sysCtx(0),
  thread(0),
#if REGAL_SYS_X11
  x11Display(NULL),
#endif
#if REGAL_SYS_GLX
  x11Drawable(0),
#endif
  logCallback(NULL),
#if REGAL_CODE
  codeSource(NULL),
  codeHeader(NULL),
  codeInputNext(0),
  codeOutputNext(0),
  codeShaderNext(0),
  codeProgramNext(0),
#endif
  depthBeginEnd(0),
  depthPushMatrix(0),
  depthPushAttrib(0),
  depthNewList(0)
{
  Internal("RegalContext::RegalContext","()");

  if (Config::enableDebug)
  {
    dbg = new DebugInfo();
    dbg->Init(this);
  }

  shareGroup.push_back(this);
}

void
RegalContext::Init()
{
  Internal("RegalContext::Init","()");

  RegalAssert(!initialized);

  info = new ContextInfo();
  RegalAssert(this);
  RegalAssert(info);
  info->init(*this);

  marker = new Marker;
  frame = new Frame;

#if REGAL_EMULATION
#if !REGAL_FORCE_EMULATION
  if
  (
    Config::forceEmulation  ||
    (
      Config::enableEmulation &&
      (
        info->core ||
        info->es2  ||
        ( info->compat && !info->gl_ext_direct_state_access )
      )
    )
  )
#endif
  {
    RegalAssert(info);
    // emu
    emuLevel = 11;
    #if REGAL_EMU_FILTER
    if (Config::enableEmuFilter || Config::forceEmuFilter || REGAL_FORCE_EMU_FILTER)
    {
      filt = new Emu::Filt;
      emuLevel = 0;
      filt->Init(*this);
    }
    #endif /* REGAL_EMU_FILTER */
    #if REGAL_EMU_TEXC
    if ((isES2() && Config::enableEmuTexC) || Config::forceEmuTexC || REGAL_FORCE_EMU_TEXC)
    {
      texc = new Emu::TexC;
      emuLevel = 1;
      texc->Init(*this);
    }
    #endif /* REGAL_EMU_TEXC */
    #if REGAL_EMU_VAO
    if ((Config::enableEmuVao || Config::enableEmuVao || REGAL_FORCE_EMU_VAO) && (Config::enableEmuIff || Config::forceEmuIff || REGAL_FORCE_EMU_IFF))
    {
      vao = new Emu::Vao;
      emuLevel = 2;
      vao->Init(*this);
    }
    #endif /* REGAL_EMU_VAO */
    #if REGAL_EMU_SO
    if (Config::enableEmuSo || Config::forceEmuSo || REGAL_FORCE_EMU_SO)
    {
      so = new Emu::So;
      emuLevel = 3;
      so->Init(*this);
    }
    #endif /* REGAL_EMU_SO */
    #if REGAL_EMU_IFF
    if (Config::enableEmuIff || Config::forceEmuIff || REGAL_FORCE_EMU_IFF)
    {
      iff = new Emu::Iff;
      emuLevel = 4;
      iff->Init(*this);
    }
    #endif /* REGAL_EMU_IFF */
    #if REGAL_EMU_DSA
    if (Config::enableEmuDsa || Config::forceEmuDsa || REGAL_FORCE_EMU_DSA)
    {
      Internal("RegalContext::Init ","GL_EXT_direct_state_access");
      info->regal_ext_direct_state_access = true;
      info->regalExtensionsSet.insert("GL_EXT_direct_state_access");
      info->regalExtensions = ::boost::print::detail::join(info->regalExtensionsSet,std::string(" "));
      dsa = new Emu::Dsa;
      emuLevel = 5;
      dsa->Init(*this);
    }
    #endif /* REGAL_EMU_DSA */
    #if REGAL_EMU_XFER
    if ((isES2() && Config::enableEmuXfer) || Config::forceEmuXfer || REGAL_FORCE_EMU_XFER)
    {
      xfer = new Emu::Xfer;
      emuLevel = 6;
      xfer->Init(*this);
    }
    #endif /* REGAL_EMU_XFER */
    #if REGAL_EMU_BIN
    if (Config::enableEmuBin || Config::forceEmuBin || REGAL_FORCE_EMU_BIN)
    {
      bin = new Emu::Bin;
      emuLevel = 7;
      bin->Init(*this);
    }
    #endif /* REGAL_EMU_BIN */
    #if REGAL_EMU_PPCA
    if (Config::enableEmuPpca || Config::forceEmuPpca || REGAL_FORCE_EMU_PPCA)
    {
      ppca = new Emu::Ppca;
      emuLevel = 8;
      ppca->Init(*this);
    }
    #endif /* REGAL_EMU_PPCA */
    #if REGAL_EMU_PPA
    if (Config::enableEmuPpa || Config::forceEmuPpa || REGAL_FORCE_EMU_PPA)
    {
      ppa = new Emu::Ppa;
      emuLevel = 9;
      ppa->Init(*this);
    }
    #endif /* REGAL_EMU_PPA */
    #if REGAL_EMU_OBJ
    if (Config::enableEmuObj || Config::forceEmuObj || REGAL_FORCE_EMU_OBJ)
    {
      obj = new Emu::Obj;
      emuLevel = 10;
      obj->Init(*this);
    }
    #endif /* REGAL_EMU_OBJ */
    emuLevel = 11;

  }
#endif

#if REGAL_CODE
  if (Config::enableCode)
  {
    if (Config::codeSourceFile.length())
    {
      codeSource = fopen(Config::codeSourceFile.c_str(),"wt");
      if (!codeSource)
        Warning("Failed to open file ",Config::codeSourceFile," for writing code source.");
    }
    if (Config::codeHeaderFile.length())
    {
      if (Config::codeHeaderFile==Config::codeSourceFile)
        codeHeader = codeSource;
      else
        codeHeader = fopen(Config::codeHeaderFile.c_str(),"wt");
      if (!codeHeader)
        Warning("Failed to open file ",Config::codeHeaderFile," for writing code header.");
    }
  }
#endif

  initialized = true;
}

RegalContext::~RegalContext()
{
  Internal("RegalContext::~RegalContext","()");

  // Remove this context from the share group.

  shareGroup->remove(this);

  delete info;
  delete marker;
  delete frame;

#if REGAL_EMULATION
  // emu
  #if REGAL_EMU_OBJ
  delete obj;
  #endif /* REGAL_EMU_OBJ */
  #if REGAL_EMU_PPA
  delete ppa;
  #endif /* REGAL_EMU_PPA */
  #if REGAL_EMU_PPCA
  delete ppca;
  #endif /* REGAL_EMU_PPCA */
  #if REGAL_EMU_BIN
  delete bin;
  #endif /* REGAL_EMU_BIN */
  #if REGAL_EMU_XFER
  delete xfer;
  #endif /* REGAL_EMU_XFER */
  #if REGAL_EMU_DSA
  delete dsa;
  #endif /* REGAL_EMU_DSA */
  #if REGAL_EMU_IFF
  delete iff;
  #endif /* REGAL_EMU_IFF */
  #if REGAL_EMU_SO
  delete so;
  #endif /* REGAL_EMU_SO */
  #if REGAL_EMU_VAO
  delete vao;
  #endif /* REGAL_EMU_VAO */
  #if REGAL_EMU_TEXC
  delete texc;
  #endif /* REGAL_EMU_TEXC */
  #if REGAL_EMU_FILTER
  delete filt;
  #endif /* REGAL_EMU_FILTER */
#endif

#if REGAL_CODE
  if (codeSource)
    fclose(codeSource);

  if (codeHeader)
    fclose(codeHeader);
#endif
}

bool
RegalContext::groupInitialized() const
{
  Internal("RegalContext::groupInitialized","()");

  for (shared_list<RegalContext *>::const_iterator i = shareGroup.begin(); i!=shareGroup.end(); ++i)
  {
    RegalAssert(*i);
    if ((*i)->initialized)
      return true;
  }

  return false;
}

RegalContext *
RegalContext::groupInitializedContext()
{
  Internal("RegalContext::groupInitializedContext","()");

  // Look for any initialized context in the share group.
  // The only way this would be expected to fail is if none
  // of the contexts have been made current, triggering
  // initialization.
  //
  // Note - linear search, but shouldn't need to look at too many
  // contexts in the share group.

  for (shared_list<RegalContext *>::iterator i = shareGroup.begin(); i!=shareGroup.end(); ++i)
  {
    RegalAssert(*i);
    if ((*i)->initialized)
      return *i;
  }

  return NULL;
}

REGAL_NAMESPACE_END
