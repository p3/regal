/* NOTE: Do not edit this file, it is generated by a script:
   Export.py --api gl 4.2 --api wgl 4.0 --api glx 4.0 --api cgl 1.4 --api egl 1.0 --outdir .
*/

/*
  Copyright (c) 2011 NVIDIA Corporation
  Copyright (c) 2011-2012 Cass Everitt
  Copyright (c) 2012 Scott Nations
  Copyright (c) 2012 Mathias Schott
  Copyright (c) 2012 Nigel Stewart
  Copyright (c) 2012 Google Inc.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
  Intended formatting conventions:
  $ astyle --style=allman --indent=spaces=2 --indent-switches
*/

#include "pch.h" /* For MS precompiled header support */

#include "gmock/gmock.h"

#include "RegalUtil.h"

REGAL_GLOBAL_BEGIN

#include "RegalDispatch.h"
#include "RegalDispatchGMock.h"

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

namespace {

void REGAL_CALL gmock_glAccum(GLenum op, GLfloat value) {
  return RegalGMockInterface::current->glAccum(op, value);
}

void REGAL_CALL gmock_glAlphaFunc(GLenum func, GLclampf ref) {
  return RegalGMockInterface::current->glAlphaFunc(func, ref);
}

void REGAL_CALL gmock_glBegin(GLenum mode) {
  return RegalGMockInterface::current->glBegin(mode);
}

void REGAL_CALL gmock_glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap) {
  return RegalGMockInterface::current->glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap);
}

void REGAL_CALL gmock_glBlendFunc(GLenum sfactor, GLenum dfactor) {
  return RegalGMockInterface::current->glBlendFunc(sfactor, dfactor);
}

void REGAL_CALL gmock_glCallList(GLuint list) {
  return RegalGMockInterface::current->glCallList(list);
}

void REGAL_CALL gmock_glCallLists(GLsizei n, GLenum type, const GLvoid *lists) {
  return RegalGMockInterface::current->glCallLists(n, type, lists);
}

void REGAL_CALL gmock_glClear(GLbitfield mask) {
  return RegalGMockInterface::current->glClear(mask);
}

void REGAL_CALL gmock_glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
  return RegalGMockInterface::current->glClearAccum(red, green, blue, alpha);
}

void REGAL_CALL gmock_glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha) {
  return RegalGMockInterface::current->glClearColor(red, green, blue, alpha);
}

void REGAL_CALL gmock_glClearDepth(GLclampd depth) {
  return RegalGMockInterface::current->glClearDepth(depth);
}

void REGAL_CALL gmock_glClearIndex(GLfloat c) {
  return RegalGMockInterface::current->glClearIndex(c);
}

void REGAL_CALL gmock_glClearStencil(GLint s) {
  return RegalGMockInterface::current->glClearStencil(s);
}

void REGAL_CALL gmock_glClipPlane(GLenum plane, const GLdouble *equation) {
  return RegalGMockInterface::current->glClipPlane(plane, equation);
}

void REGAL_CALL gmock_glColor3b(GLbyte red, GLbyte green, GLbyte blue) {
  return RegalGMockInterface::current->glColor3b(red, green, blue);
}

void REGAL_CALL gmock_glColor3bv(const GLbyte *v) {
  return RegalGMockInterface::current->glColor3bv(v);
}

void REGAL_CALL gmock_glColor3d(GLdouble red, GLdouble green, GLdouble blue) {
  return RegalGMockInterface::current->glColor3d(red, green, blue);
}

void REGAL_CALL gmock_glColor3dv(const GLdouble *v) {
  return RegalGMockInterface::current->glColor3dv(v);
}

void REGAL_CALL gmock_glColor3f(GLfloat red, GLfloat green, GLfloat blue) {
  return RegalGMockInterface::current->glColor3f(red, green, blue);
}

void REGAL_CALL gmock_glColor3fv(const GLfloat *v) {
  return RegalGMockInterface::current->glColor3fv(v);
}

void REGAL_CALL gmock_glColor3i(GLint red, GLint green, GLint blue) {
  return RegalGMockInterface::current->glColor3i(red, green, blue);
}

void REGAL_CALL gmock_glColor3iv(const GLint *v) {
  return RegalGMockInterface::current->glColor3iv(v);
}

void REGAL_CALL gmock_glColor3s(GLshort red, GLshort green, GLshort blue) {
  return RegalGMockInterface::current->glColor3s(red, green, blue);
}

void REGAL_CALL gmock_glColor3sv(const GLshort *v) {
  return RegalGMockInterface::current->glColor3sv(v);
}

void REGAL_CALL gmock_glColor3ub(GLubyte red, GLubyte green, GLubyte blue) {
  return RegalGMockInterface::current->glColor3ub(red, green, blue);
}

void REGAL_CALL gmock_glColor3ubv(const GLubyte *v) {
  return RegalGMockInterface::current->glColor3ubv(v);
}

void REGAL_CALL gmock_glColor3ui(GLuint red, GLuint green, GLuint blue) {
  return RegalGMockInterface::current->glColor3ui(red, green, blue);
}

void REGAL_CALL gmock_glColor3uiv(const GLuint *v) {
  return RegalGMockInterface::current->glColor3uiv(v);
}

void REGAL_CALL gmock_glColor3us(GLushort red, GLushort green, GLushort blue) {
  return RegalGMockInterface::current->glColor3us(red, green, blue);
}

void REGAL_CALL gmock_glColor3usv(const GLushort *v) {
  return RegalGMockInterface::current->glColor3usv(v);
}

void REGAL_CALL gmock_glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) {
  return RegalGMockInterface::current->glColor4b(red, green, blue, alpha);
}

void REGAL_CALL gmock_glColor4bv(const GLbyte *v) {
  return RegalGMockInterface::current->glColor4bv(v);
}

void REGAL_CALL gmock_glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha) {
  return RegalGMockInterface::current->glColor4d(red, green, blue, alpha);
}

void REGAL_CALL gmock_glColor4dv(const GLdouble *v) {
  return RegalGMockInterface::current->glColor4dv(v);
}

void REGAL_CALL gmock_glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
  return RegalGMockInterface::current->glColor4f(red, green, blue, alpha);
}

void REGAL_CALL gmock_glColor4fv(const GLfloat *v) {
  return RegalGMockInterface::current->glColor4fv(v);
}

void REGAL_CALL gmock_glColor4i(GLint red, GLint green, GLint blue, GLint alpha) {
  return RegalGMockInterface::current->glColor4i(red, green, blue, alpha);
}

void REGAL_CALL gmock_glColor4iv(const GLint *v) {
  return RegalGMockInterface::current->glColor4iv(v);
}

void REGAL_CALL gmock_glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha) {
  return RegalGMockInterface::current->glColor4s(red, green, blue, alpha);
}

void REGAL_CALL gmock_glColor4sv(const GLshort *v) {
  return RegalGMockInterface::current->glColor4sv(v);
}

void REGAL_CALL gmock_glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) {
  return RegalGMockInterface::current->glColor4ub(red, green, blue, alpha);
}

void REGAL_CALL gmock_glColor4ubv(const GLubyte *v) {
  return RegalGMockInterface::current->glColor4ubv(v);
}

void REGAL_CALL gmock_glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha) {
  return RegalGMockInterface::current->glColor4ui(red, green, blue, alpha);
}

void REGAL_CALL gmock_glColor4uiv(const GLuint *v) {
  return RegalGMockInterface::current->glColor4uiv(v);
}

void REGAL_CALL gmock_glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha) {
  return RegalGMockInterface::current->glColor4us(red, green, blue, alpha);
}

void REGAL_CALL gmock_glColor4usv(const GLushort *v) {
  return RegalGMockInterface::current->glColor4usv(v);
}

void REGAL_CALL gmock_glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) {
  return RegalGMockInterface::current->glColorMask(red, green, blue, alpha);
}

void REGAL_CALL gmock_glColorMaterial(GLenum face, GLenum mode) {
  return RegalGMockInterface::current->glColorMaterial(face, mode);
}

void REGAL_CALL gmock_glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type) {
  return RegalGMockInterface::current->glCopyPixels(x, y, width, height, type);
}

void REGAL_CALL gmock_glCullFace(GLenum mode) {
  return RegalGMockInterface::current->glCullFace(mode);
}

void REGAL_CALL gmock_glDeleteLists(GLuint list, GLsizei range) {
  return RegalGMockInterface::current->glDeleteLists(list, range);
}

void REGAL_CALL gmock_glDepthFunc(GLenum func) {
  return RegalGMockInterface::current->glDepthFunc(func);
}

void REGAL_CALL gmock_glDepthMask(GLboolean flag) {
  return RegalGMockInterface::current->glDepthMask(flag);
}

void REGAL_CALL gmock_glDepthRange(GLclampd zNear, GLclampd zFar) {
  return RegalGMockInterface::current->glDepthRange(zNear, zFar);
}

void REGAL_CALL gmock_glDisable(GLenum cap) {
  return RegalGMockInterface::current->glDisable(cap);
}

void REGAL_CALL gmock_glDrawBuffer(GLenum mode) {
  return RegalGMockInterface::current->glDrawBuffer(mode);
}

void REGAL_CALL gmock_glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels) {
  return RegalGMockInterface::current->glDrawPixels(width, height, format, type, pixels);
}

void REGAL_CALL gmock_glEdgeFlag(GLboolean flag) {
  return RegalGMockInterface::current->glEdgeFlag(flag);
}

void REGAL_CALL gmock_glEdgeFlagv(const GLboolean *flag) {
  return RegalGMockInterface::current->glEdgeFlagv(flag);
}

void REGAL_CALL gmock_glEnable(GLenum cap) {
  return RegalGMockInterface::current->glEnable(cap);
}

void REGAL_CALL gmock_glEnd(void) {
  return RegalGMockInterface::current->glEnd();
}

void REGAL_CALL gmock_glEndList(void) {
  return RegalGMockInterface::current->glEndList();
}

void REGAL_CALL gmock_glEvalCoord1d(GLdouble u) {
  return RegalGMockInterface::current->glEvalCoord1d(u);
}

void REGAL_CALL gmock_glEvalCoord1dv(const GLdouble *u) {
  return RegalGMockInterface::current->glEvalCoord1dv(u);
}

void REGAL_CALL gmock_glEvalCoord1f(GLfloat u) {
  return RegalGMockInterface::current->glEvalCoord1f(u);
}

void REGAL_CALL gmock_glEvalCoord1fv(const GLfloat *u) {
  return RegalGMockInterface::current->glEvalCoord1fv(u);
}

void REGAL_CALL gmock_glEvalCoord2d(GLdouble u, GLdouble v) {
  return RegalGMockInterface::current->glEvalCoord2d(u, v);
}

void REGAL_CALL gmock_glEvalCoord2dv(const GLdouble *u) {
  return RegalGMockInterface::current->glEvalCoord2dv(u);
}

void REGAL_CALL gmock_glEvalCoord2f(GLfloat u, GLfloat v) {
  return RegalGMockInterface::current->glEvalCoord2f(u, v);
}

void REGAL_CALL gmock_glEvalCoord2fv(const GLfloat *u) {
  return RegalGMockInterface::current->glEvalCoord2fv(u);
}

void REGAL_CALL gmock_glEvalMesh1(GLenum mode, GLint i1, GLint i2) {
  return RegalGMockInterface::current->glEvalMesh1(mode, i1, i2);
}

void REGAL_CALL gmock_glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2) {
  return RegalGMockInterface::current->glEvalMesh2(mode, i1, i2, j1, j2);
}

void REGAL_CALL gmock_glEvalPoint1(GLint i) {
  return RegalGMockInterface::current->glEvalPoint1(i);
}

void REGAL_CALL gmock_glEvalPoint2(GLint i, GLint j) {
  return RegalGMockInterface::current->glEvalPoint2(i, j);
}

void REGAL_CALL gmock_glFeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer) {
  return RegalGMockInterface::current->glFeedbackBuffer(size, type, buffer);
}

void REGAL_CALL gmock_glFinish(void) {
  return RegalGMockInterface::current->glFinish();
}

void REGAL_CALL gmock_glFlush(void) {
  return RegalGMockInterface::current->glFlush();
}

void REGAL_CALL gmock_glFogf(GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glFogf(pname, param);
}

void REGAL_CALL gmock_glFogfv(GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glFogfv(pname, params);
}

void REGAL_CALL gmock_glFogi(GLenum pname, GLint param) {
  return RegalGMockInterface::current->glFogi(pname, param);
}

void REGAL_CALL gmock_glFogiv(GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glFogiv(pname, params);
}

void REGAL_CALL gmock_glFrontFace(GLenum mode) {
  return RegalGMockInterface::current->glFrontFace(mode);
}

void REGAL_CALL gmock_glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
  return RegalGMockInterface::current->glFrustum(left, right, bottom, top, zNear, zFar);
}

GLuint REGAL_CALL gmock_glGenLists(GLsizei range) {
  return RegalGMockInterface::current->glGenLists(range);
}

void REGAL_CALL gmock_glGetBooleanv(GLenum pname, GLboolean *params) {
  return RegalGMockInterface::current->glGetBooleanv(pname, params);
}

void REGAL_CALL gmock_glGetClipPlane(GLenum plane, GLdouble *equation) {
  return RegalGMockInterface::current->glGetClipPlane(plane, equation);
}

void REGAL_CALL gmock_glGetDoublev(GLenum pname, GLdouble *params) {
  return RegalGMockInterface::current->glGetDoublev(pname, params);
}

GLenum REGAL_CALL gmock_glGetError(void) {
  return RegalGMockInterface::current->glGetError();
}

void REGAL_CALL gmock_glGetFloatv(GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetFloatv(pname, params);
}

void REGAL_CALL gmock_glGetIntegerv(GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetIntegerv(pname, params);
}

void REGAL_CALL gmock_glGetLightfv(GLenum light, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetLightfv(light, pname, params);
}

void REGAL_CALL gmock_glGetLightiv(GLenum light, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetLightiv(light, pname, params);
}

void REGAL_CALL gmock_glGetMapdv(GLenum target, GLenum query, GLdouble *v) {
  return RegalGMockInterface::current->glGetMapdv(target, query, v);
}

void REGAL_CALL gmock_glGetMapfv(GLenum target, GLenum query, GLfloat *v) {
  return RegalGMockInterface::current->glGetMapfv(target, query, v);
}

void REGAL_CALL gmock_glGetMapiv(GLenum target, GLenum query, GLint *v) {
  return RegalGMockInterface::current->glGetMapiv(target, query, v);
}

void REGAL_CALL gmock_glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetMaterialfv(face, pname, params);
}

void REGAL_CALL gmock_glGetMaterialiv(GLenum face, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetMaterialiv(face, pname, params);
}

void REGAL_CALL gmock_glGetPixelMapfv(GLenum map, GLfloat *values) {
  return RegalGMockInterface::current->glGetPixelMapfv(map, values);
}

void REGAL_CALL gmock_glGetPixelMapuiv(GLenum map, GLuint *values) {
  return RegalGMockInterface::current->glGetPixelMapuiv(map, values);
}

void REGAL_CALL gmock_glGetPixelMapusv(GLenum map, GLushort *values) {
  return RegalGMockInterface::current->glGetPixelMapusv(map, values);
}

void REGAL_CALL gmock_glGetPolygonStipple(GLubyte *mask) {
  return RegalGMockInterface::current->glGetPolygonStipple(mask);
}

const GLubyte * REGAL_CALL gmock_glGetString(GLenum name) {
  return RegalGMockInterface::current->glGetString(name);
}

void REGAL_CALL gmock_glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetTexEnvfv(target, pname, params);
}

void REGAL_CALL gmock_glGetTexEnviv(GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetTexEnviv(target, pname, params);
}

void REGAL_CALL gmock_glGetTexGendv(GLenum coord, GLenum pname, GLdouble *params) {
  return RegalGMockInterface::current->glGetTexGendv(coord, pname, params);
}

void REGAL_CALL gmock_glGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetTexGenfv(coord, pname, params);
}

void REGAL_CALL gmock_glGetTexGeniv(GLenum coord, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetTexGeniv(coord, pname, params);
}

void REGAL_CALL gmock_glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels) {
  return RegalGMockInterface::current->glGetTexImage(target, level, format, type, pixels);
}

void REGAL_CALL gmock_glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetTexLevelParameterfv(target, level, pname, params);
}

void REGAL_CALL gmock_glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetTexLevelParameteriv(target, level, pname, params);
}

void REGAL_CALL gmock_glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetTexParameterfv(target, pname, params);
}

void REGAL_CALL gmock_glGetTexParameteriv(GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetTexParameteriv(target, pname, params);
}

void REGAL_CALL gmock_glHint(GLenum target, GLenum mode) {
  return RegalGMockInterface::current->glHint(target, mode);
}

void REGAL_CALL gmock_glIndexMask(GLuint mask) {
  return RegalGMockInterface::current->glIndexMask(mask);
}

void REGAL_CALL gmock_glIndexd(GLdouble c) {
  return RegalGMockInterface::current->glIndexd(c);
}

void REGAL_CALL gmock_glIndexdv(const GLdouble *c) {
  return RegalGMockInterface::current->glIndexdv(c);
}

void REGAL_CALL gmock_glIndexf(GLfloat c) {
  return RegalGMockInterface::current->glIndexf(c);
}

void REGAL_CALL gmock_glIndexfv(const GLfloat *c) {
  return RegalGMockInterface::current->glIndexfv(c);
}

void REGAL_CALL gmock_glIndexi(GLint c) {
  return RegalGMockInterface::current->glIndexi(c);
}

void REGAL_CALL gmock_glIndexiv(const GLint *c) {
  return RegalGMockInterface::current->glIndexiv(c);
}

void REGAL_CALL gmock_glIndexs(GLshort c) {
  return RegalGMockInterface::current->glIndexs(c);
}

void REGAL_CALL gmock_glIndexsv(const GLshort *c) {
  return RegalGMockInterface::current->glIndexsv(c);
}

void REGAL_CALL gmock_glInitNames(void) {
  return RegalGMockInterface::current->glInitNames();
}

GLboolean REGAL_CALL gmock_glIsEnabled(GLenum cap) {
  return RegalGMockInterface::current->glIsEnabled(cap);
}

GLboolean REGAL_CALL gmock_glIsList(GLuint list) {
  return RegalGMockInterface::current->glIsList(list);
}

void REGAL_CALL gmock_glLightModelf(GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glLightModelf(pname, param);
}

void REGAL_CALL gmock_glLightModelfv(GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glLightModelfv(pname, params);
}

void REGAL_CALL gmock_glLightModeli(GLenum pname, GLint param) {
  return RegalGMockInterface::current->glLightModeli(pname, param);
}

void REGAL_CALL gmock_glLightModeliv(GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glLightModeliv(pname, params);
}

void REGAL_CALL gmock_glLightf(GLenum light, GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glLightf(light, pname, param);
}

void REGAL_CALL gmock_glLightfv(GLenum light, GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glLightfv(light, pname, params);
}

void REGAL_CALL gmock_glLighti(GLenum light, GLenum pname, GLint param) {
  return RegalGMockInterface::current->glLighti(light, pname, param);
}

void REGAL_CALL gmock_glLightiv(GLenum light, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glLightiv(light, pname, params);
}

void REGAL_CALL gmock_glLineStipple(GLint factor, GLushort pattern) {
  return RegalGMockInterface::current->glLineStipple(factor, pattern);
}

void REGAL_CALL gmock_glLineWidth(GLfloat width) {
  return RegalGMockInterface::current->glLineWidth(width);
}

void REGAL_CALL gmock_glListBase(GLuint base) {
  return RegalGMockInterface::current->glListBase(base);
}

void REGAL_CALL gmock_glLoadIdentity(void) {
  return RegalGMockInterface::current->glLoadIdentity();
}

void REGAL_CALL gmock_glLoadMatrixd(const GLdouble *m) {
  return RegalGMockInterface::current->glLoadMatrixd(m);
}

void REGAL_CALL gmock_glLoadMatrixf(const GLfloat *m) {
  return RegalGMockInterface::current->glLoadMatrixf(m);
}

void REGAL_CALL gmock_glLoadName(GLuint name) {
  return RegalGMockInterface::current->glLoadName(name);
}

void REGAL_CALL gmock_glLogicOp(GLenum opcode) {
  return RegalGMockInterface::current->glLogicOp(opcode);
}

void REGAL_CALL gmock_glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points) {
  return RegalGMockInterface::current->glMap1d(target, u1, u2, stride, order, points);
}

void REGAL_CALL gmock_glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points) {
  return RegalGMockInterface::current->glMap1f(target, u1, u2, stride, order, points);
}

void REGAL_CALL gmock_glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points) {
  return RegalGMockInterface::current->glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

void REGAL_CALL gmock_glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points) {
  return RegalGMockInterface::current->glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

void REGAL_CALL gmock_glMapGrid1d(GLint un, GLdouble u1, GLdouble u2) {
  return RegalGMockInterface::current->glMapGrid1d(un, u1, u2);
}

void REGAL_CALL gmock_glMapGrid1f(GLint un, GLfloat u1, GLfloat u2) {
  return RegalGMockInterface::current->glMapGrid1f(un, u1, u2);
}

void REGAL_CALL gmock_glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2) {
  return RegalGMockInterface::current->glMapGrid2d(un, u1, u2, vn, v1, v2);
}

void REGAL_CALL gmock_glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2) {
  return RegalGMockInterface::current->glMapGrid2f(un, u1, u2, vn, v1, v2);
}

void REGAL_CALL gmock_glMaterialf(GLenum face, GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glMaterialf(face, pname, param);
}

void REGAL_CALL gmock_glMaterialfv(GLenum face, GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glMaterialfv(face, pname, params);
}

void REGAL_CALL gmock_glMateriali(GLenum face, GLenum pname, GLint param) {
  return RegalGMockInterface::current->glMateriali(face, pname, param);
}

void REGAL_CALL gmock_glMaterialiv(GLenum face, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glMaterialiv(face, pname, params);
}

void REGAL_CALL gmock_glMatrixMode(GLenum mode) {
  return RegalGMockInterface::current->glMatrixMode(mode);
}

void REGAL_CALL gmock_glMultMatrixd(const GLdouble *m) {
  return RegalGMockInterface::current->glMultMatrixd(m);
}

void REGAL_CALL gmock_glMultMatrixf(const GLfloat *m) {
  return RegalGMockInterface::current->glMultMatrixf(m);
}

void REGAL_CALL gmock_glNewList(GLuint list, GLenum mode) {
  return RegalGMockInterface::current->glNewList(list, mode);
}

void REGAL_CALL gmock_glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz) {
  return RegalGMockInterface::current->glNormal3b(nx, ny, nz);
}

void REGAL_CALL gmock_glNormal3bv(const GLbyte *v) {
  return RegalGMockInterface::current->glNormal3bv(v);
}

void REGAL_CALL gmock_glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz) {
  return RegalGMockInterface::current->glNormal3d(nx, ny, nz);
}

void REGAL_CALL gmock_glNormal3dv(const GLdouble *v) {
  return RegalGMockInterface::current->glNormal3dv(v);
}

void REGAL_CALL gmock_glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz) {
  return RegalGMockInterface::current->glNormal3f(nx, ny, nz);
}

void REGAL_CALL gmock_glNormal3fv(const GLfloat *v) {
  return RegalGMockInterface::current->glNormal3fv(v);
}

void REGAL_CALL gmock_glNormal3i(GLint nx, GLint ny, GLint nz) {
  return RegalGMockInterface::current->glNormal3i(nx, ny, nz);
}

void REGAL_CALL gmock_glNormal3iv(const GLint *v) {
  return RegalGMockInterface::current->glNormal3iv(v);
}

void REGAL_CALL gmock_glNormal3s(GLshort nx, GLshort ny, GLshort nz) {
  return RegalGMockInterface::current->glNormal3s(nx, ny, nz);
}

void REGAL_CALL gmock_glNormal3sv(const GLshort *v) {
  return RegalGMockInterface::current->glNormal3sv(v);
}

void REGAL_CALL gmock_glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
  return RegalGMockInterface::current->glOrtho(left, right, bottom, top, zNear, zFar);
}

void REGAL_CALL gmock_glPassThrough(GLfloat token) {
  return RegalGMockInterface::current->glPassThrough(token);
}

void REGAL_CALL gmock_glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat *values) {
  return RegalGMockInterface::current->glPixelMapfv(map, mapsize, values);
}

void REGAL_CALL gmock_glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint *values) {
  return RegalGMockInterface::current->glPixelMapuiv(map, mapsize, values);
}

void REGAL_CALL gmock_glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort *values) {
  return RegalGMockInterface::current->glPixelMapusv(map, mapsize, values);
}

void REGAL_CALL gmock_glPixelStoref(GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glPixelStoref(pname, param);
}

void REGAL_CALL gmock_glPixelStorei(GLenum pname, GLint param) {
  return RegalGMockInterface::current->glPixelStorei(pname, param);
}

void REGAL_CALL gmock_glPixelTransferf(GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glPixelTransferf(pname, param);
}

void REGAL_CALL gmock_glPixelTransferi(GLenum pname, GLint param) {
  return RegalGMockInterface::current->glPixelTransferi(pname, param);
}

void REGAL_CALL gmock_glPixelZoom(GLfloat xfactor, GLfloat yfactor) {
  return RegalGMockInterface::current->glPixelZoom(xfactor, yfactor);
}

void REGAL_CALL gmock_glPointSize(GLfloat size) {
  return RegalGMockInterface::current->glPointSize(size);
}

void REGAL_CALL gmock_glPolygonMode(GLenum face, GLenum mode) {
  return RegalGMockInterface::current->glPolygonMode(face, mode);
}

void REGAL_CALL gmock_glPolygonStipple(const GLubyte *mask) {
  return RegalGMockInterface::current->glPolygonStipple(mask);
}

void REGAL_CALL gmock_glPopAttrib(void) {
  return RegalGMockInterface::current->glPopAttrib();
}

void REGAL_CALL gmock_glPopMatrix(void) {
  return RegalGMockInterface::current->glPopMatrix();
}

void REGAL_CALL gmock_glPopName(void) {
  return RegalGMockInterface::current->glPopName();
}

void REGAL_CALL gmock_glPushAttrib(GLbitfield mask) {
  return RegalGMockInterface::current->glPushAttrib(mask);
}

void REGAL_CALL gmock_glPushMatrix(void) {
  return RegalGMockInterface::current->glPushMatrix();
}

void REGAL_CALL gmock_glPushName(GLuint name) {
  return RegalGMockInterface::current->glPushName(name);
}

void REGAL_CALL gmock_glRasterPos2d(GLdouble x, GLdouble y) {
  return RegalGMockInterface::current->glRasterPos2d(x, y);
}

void REGAL_CALL gmock_glRasterPos2dv(const GLdouble *v) {
  return RegalGMockInterface::current->glRasterPos2dv(v);
}

void REGAL_CALL gmock_glRasterPos2f(GLfloat x, GLfloat y) {
  return RegalGMockInterface::current->glRasterPos2f(x, y);
}

void REGAL_CALL gmock_glRasterPos2fv(const GLfloat *v) {
  return RegalGMockInterface::current->glRasterPos2fv(v);
}

void REGAL_CALL gmock_glRasterPos2i(GLint x, GLint y) {
  return RegalGMockInterface::current->glRasterPos2i(x, y);
}

void REGAL_CALL gmock_glRasterPos2iv(const GLint *v) {
  return RegalGMockInterface::current->glRasterPos2iv(v);
}

void REGAL_CALL gmock_glRasterPos2s(GLshort x, GLshort y) {
  return RegalGMockInterface::current->glRasterPos2s(x, y);
}

void REGAL_CALL gmock_glRasterPos2sv(const GLshort *v) {
  return RegalGMockInterface::current->glRasterPos2sv(v);
}

void REGAL_CALL gmock_glRasterPos3d(GLdouble x, GLdouble y, GLdouble z) {
  return RegalGMockInterface::current->glRasterPos3d(x, y, z);
}

void REGAL_CALL gmock_glRasterPos3dv(const GLdouble *v) {
  return RegalGMockInterface::current->glRasterPos3dv(v);
}

void REGAL_CALL gmock_glRasterPos3f(GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glRasterPos3f(x, y, z);
}

void REGAL_CALL gmock_glRasterPos3fv(const GLfloat *v) {
  return RegalGMockInterface::current->glRasterPos3fv(v);
}

void REGAL_CALL gmock_glRasterPos3i(GLint x, GLint y, GLint z) {
  return RegalGMockInterface::current->glRasterPos3i(x, y, z);
}

void REGAL_CALL gmock_glRasterPos3iv(const GLint *v) {
  return RegalGMockInterface::current->glRasterPos3iv(v);
}

void REGAL_CALL gmock_glRasterPos3s(GLshort x, GLshort y, GLshort z) {
  return RegalGMockInterface::current->glRasterPos3s(x, y, z);
}

void REGAL_CALL gmock_glRasterPos3sv(const GLshort *v) {
  return RegalGMockInterface::current->glRasterPos3sv(v);
}

void REGAL_CALL gmock_glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  return RegalGMockInterface::current->glRasterPos4d(x, y, z, w);
}

void REGAL_CALL gmock_glRasterPos4dv(const GLdouble *v) {
  return RegalGMockInterface::current->glRasterPos4dv(v);
}

void REGAL_CALL gmock_glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  return RegalGMockInterface::current->glRasterPos4f(x, y, z, w);
}

void REGAL_CALL gmock_glRasterPos4fv(const GLfloat *v) {
  return RegalGMockInterface::current->glRasterPos4fv(v);
}

void REGAL_CALL gmock_glRasterPos4i(GLint x, GLint y, GLint z, GLint w) {
  return RegalGMockInterface::current->glRasterPos4i(x, y, z, w);
}

void REGAL_CALL gmock_glRasterPos4iv(const GLint *v) {
  return RegalGMockInterface::current->glRasterPos4iv(v);
}

void REGAL_CALL gmock_glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w) {
  return RegalGMockInterface::current->glRasterPos4s(x, y, z, w);
}

void REGAL_CALL gmock_glRasterPos4sv(const GLshort *v) {
  return RegalGMockInterface::current->glRasterPos4sv(v);
}

void REGAL_CALL gmock_glReadBuffer(GLenum mode) {
  return RegalGMockInterface::current->glReadBuffer(mode);
}

void REGAL_CALL gmock_glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels) {
  return RegalGMockInterface::current->glReadPixels(x, y, width, height, format, type, pixels);
}

void REGAL_CALL gmock_glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2) {
  return RegalGMockInterface::current->glRectd(x1, y1, x2, y2);
}

void REGAL_CALL gmock_glRectdv(const GLdouble *v1, const GLdouble *v2) {
  return RegalGMockInterface::current->glRectdv(v1, v2);
}

void REGAL_CALL gmock_glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2) {
  return RegalGMockInterface::current->glRectf(x1, y1, x2, y2);
}

void REGAL_CALL gmock_glRectfv(const GLfloat *v1, const GLfloat *v2) {
  return RegalGMockInterface::current->glRectfv(v1, v2);
}

void REGAL_CALL gmock_glRecti(GLint x1, GLint y1, GLint x2, GLint y2) {
  return RegalGMockInterface::current->glRecti(x1, y1, x2, y2);
}

void REGAL_CALL gmock_glRectiv(const GLint *v1, const GLint *v2) {
  return RegalGMockInterface::current->glRectiv(v1, v2);
}

void REGAL_CALL gmock_glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2) {
  return RegalGMockInterface::current->glRects(x1, y1, x2, y2);
}

void REGAL_CALL gmock_glRectsv(const GLshort *v1, const GLshort *v2) {
  return RegalGMockInterface::current->glRectsv(v1, v2);
}

GLint REGAL_CALL gmock_glRenderMode(GLenum mode) {
  return RegalGMockInterface::current->glRenderMode(mode);
}

void REGAL_CALL gmock_glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z) {
  return RegalGMockInterface::current->glRotated(angle, x, y, z);
}

void REGAL_CALL gmock_glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glRotatef(angle, x, y, z);
}

void REGAL_CALL gmock_glScaled(GLdouble x, GLdouble y, GLdouble z) {
  return RegalGMockInterface::current->glScaled(x, y, z);
}

void REGAL_CALL gmock_glScalef(GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glScalef(x, y, z);
}

void REGAL_CALL gmock_glScissor(GLint x, GLint y, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glScissor(x, y, width, height);
}

void REGAL_CALL gmock_glSelectBuffer(GLsizei size, GLuint *buffer) {
  return RegalGMockInterface::current->glSelectBuffer(size, buffer);
}

void REGAL_CALL gmock_glShadeModel(GLenum mode) {
  return RegalGMockInterface::current->glShadeModel(mode);
}

void REGAL_CALL gmock_glStencilFunc(GLenum func, GLint ref, GLuint mask) {
  return RegalGMockInterface::current->glStencilFunc(func, ref, mask);
}

void REGAL_CALL gmock_glStencilMask(GLuint mask) {
  return RegalGMockInterface::current->glStencilMask(mask);
}

void REGAL_CALL gmock_glStencilOp(GLenum fail, GLenum zfail, GLenum zpass) {
  return RegalGMockInterface::current->glStencilOp(fail, zfail, zpass);
}

void REGAL_CALL gmock_glTexCoord1d(GLdouble s) {
  return RegalGMockInterface::current->glTexCoord1d(s);
}

void REGAL_CALL gmock_glTexCoord1dv(const GLdouble *v) {
  return RegalGMockInterface::current->glTexCoord1dv(v);
}

void REGAL_CALL gmock_glTexCoord1f(GLfloat s) {
  return RegalGMockInterface::current->glTexCoord1f(s);
}

void REGAL_CALL gmock_glTexCoord1fv(const GLfloat *v) {
  return RegalGMockInterface::current->glTexCoord1fv(v);
}

void REGAL_CALL gmock_glTexCoord1i(GLint s) {
  return RegalGMockInterface::current->glTexCoord1i(s);
}

void REGAL_CALL gmock_glTexCoord1iv(const GLint *v) {
  return RegalGMockInterface::current->glTexCoord1iv(v);
}

void REGAL_CALL gmock_glTexCoord1s(GLshort s) {
  return RegalGMockInterface::current->glTexCoord1s(s);
}

void REGAL_CALL gmock_glTexCoord1sv(const GLshort *v) {
  return RegalGMockInterface::current->glTexCoord1sv(v);
}

void REGAL_CALL gmock_glTexCoord2d(GLdouble s, GLdouble t) {
  return RegalGMockInterface::current->glTexCoord2d(s, t);
}

void REGAL_CALL gmock_glTexCoord2dv(const GLdouble *v) {
  return RegalGMockInterface::current->glTexCoord2dv(v);
}

void REGAL_CALL gmock_glTexCoord2f(GLfloat s, GLfloat t) {
  return RegalGMockInterface::current->glTexCoord2f(s, t);
}

void REGAL_CALL gmock_glTexCoord2fv(const GLfloat *v) {
  return RegalGMockInterface::current->glTexCoord2fv(v);
}

void REGAL_CALL gmock_glTexCoord2i(GLint s, GLint t) {
  return RegalGMockInterface::current->glTexCoord2i(s, t);
}

void REGAL_CALL gmock_glTexCoord2iv(const GLint *v) {
  return RegalGMockInterface::current->glTexCoord2iv(v);
}

void REGAL_CALL gmock_glTexCoord2s(GLshort s, GLshort t) {
  return RegalGMockInterface::current->glTexCoord2s(s, t);
}

void REGAL_CALL gmock_glTexCoord2sv(const GLshort *v) {
  return RegalGMockInterface::current->glTexCoord2sv(v);
}

void REGAL_CALL gmock_glTexCoord3d(GLdouble s, GLdouble t, GLdouble r) {
  return RegalGMockInterface::current->glTexCoord3d(s, t, r);
}

void REGAL_CALL gmock_glTexCoord3dv(const GLdouble *v) {
  return RegalGMockInterface::current->glTexCoord3dv(v);
}

void REGAL_CALL gmock_glTexCoord3f(GLfloat s, GLfloat t, GLfloat r) {
  return RegalGMockInterface::current->glTexCoord3f(s, t, r);
}

void REGAL_CALL gmock_glTexCoord3fv(const GLfloat *v) {
  return RegalGMockInterface::current->glTexCoord3fv(v);
}

void REGAL_CALL gmock_glTexCoord3i(GLint s, GLint t, GLint r) {
  return RegalGMockInterface::current->glTexCoord3i(s, t, r);
}

void REGAL_CALL gmock_glTexCoord3iv(const GLint *v) {
  return RegalGMockInterface::current->glTexCoord3iv(v);
}

void REGAL_CALL gmock_glTexCoord3s(GLshort s, GLshort t, GLshort r) {
  return RegalGMockInterface::current->glTexCoord3s(s, t, r);
}

void REGAL_CALL gmock_glTexCoord3sv(const GLshort *v) {
  return RegalGMockInterface::current->glTexCoord3sv(v);
}

void REGAL_CALL gmock_glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
  return RegalGMockInterface::current->glTexCoord4d(s, t, r, q);
}

void REGAL_CALL gmock_glTexCoord4dv(const GLdouble *v) {
  return RegalGMockInterface::current->glTexCoord4dv(v);
}

void REGAL_CALL gmock_glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
  return RegalGMockInterface::current->glTexCoord4f(s, t, r, q);
}

void REGAL_CALL gmock_glTexCoord4fv(const GLfloat *v) {
  return RegalGMockInterface::current->glTexCoord4fv(v);
}

void REGAL_CALL gmock_glTexCoord4i(GLint s, GLint t, GLint r, GLint q) {
  return RegalGMockInterface::current->glTexCoord4i(s, t, r, q);
}

void REGAL_CALL gmock_glTexCoord4iv(const GLint *v) {
  return RegalGMockInterface::current->glTexCoord4iv(v);
}

void REGAL_CALL gmock_glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q) {
  return RegalGMockInterface::current->glTexCoord4s(s, t, r, q);
}

void REGAL_CALL gmock_glTexCoord4sv(const GLshort *v) {
  return RegalGMockInterface::current->glTexCoord4sv(v);
}

void REGAL_CALL gmock_glTexEnvf(GLenum target, GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glTexEnvf(target, pname, param);
}

void REGAL_CALL gmock_glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glTexEnvfv(target, pname, params);
}

void REGAL_CALL gmock_glTexEnvi(GLenum target, GLenum pname, GLint param) {
  return RegalGMockInterface::current->glTexEnvi(target, pname, param);
}

void REGAL_CALL gmock_glTexEnviv(GLenum target, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glTexEnviv(target, pname, params);
}

void REGAL_CALL gmock_glTexGend(GLenum coord, GLenum pname, GLdouble param) {
  return RegalGMockInterface::current->glTexGend(coord, pname, param);
}

void REGAL_CALL gmock_glTexGendv(GLenum coord, GLenum pname, const GLdouble *params) {
  return RegalGMockInterface::current->glTexGendv(coord, pname, params);
}

void REGAL_CALL gmock_glTexGenf(GLenum coord, GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glTexGenf(coord, pname, param);
}

void REGAL_CALL gmock_glTexGenfv(GLenum coord, GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glTexGenfv(coord, pname, params);
}

void REGAL_CALL gmock_glTexGeni(GLenum coord, GLenum pname, GLint param) {
  return RegalGMockInterface::current->glTexGeni(coord, pname, param);
}

void REGAL_CALL gmock_glTexGeniv(GLenum coord, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glTexGeniv(coord, pname, params);
}

void REGAL_CALL gmock_glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels) {
  return RegalGMockInterface::current->glTexImage1D(target, level, internalformat, width, border, format, type, pixels);
}

void REGAL_CALL gmock_glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels) {
  return RegalGMockInterface::current->glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
}

void REGAL_CALL gmock_glTexParameterf(GLenum target, GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glTexParameterf(target, pname, param);
}

void REGAL_CALL gmock_glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glTexParameterfv(target, pname, params);
}

void REGAL_CALL gmock_glTexParameteri(GLenum target, GLenum pname, GLint param) {
  return RegalGMockInterface::current->glTexParameteri(target, pname, param);
}

void REGAL_CALL gmock_glTexParameteriv(GLenum target, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glTexParameteriv(target, pname, params);
}

void REGAL_CALL gmock_glTranslated(GLdouble x, GLdouble y, GLdouble z) {
  return RegalGMockInterface::current->glTranslated(x, y, z);
}

void REGAL_CALL gmock_glTranslatef(GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glTranslatef(x, y, z);
}

void REGAL_CALL gmock_glVertex2d(GLdouble x, GLdouble y) {
  return RegalGMockInterface::current->glVertex2d(x, y);
}

void REGAL_CALL gmock_glVertex2dv(const GLdouble *v) {
  return RegalGMockInterface::current->glVertex2dv(v);
}

void REGAL_CALL gmock_glVertex2f(GLfloat x, GLfloat y) {
  return RegalGMockInterface::current->glVertex2f(x, y);
}

void REGAL_CALL gmock_glVertex2fv(const GLfloat *v) {
  return RegalGMockInterface::current->glVertex2fv(v);
}

void REGAL_CALL gmock_glVertex2i(GLint x, GLint y) {
  return RegalGMockInterface::current->glVertex2i(x, y);
}

void REGAL_CALL gmock_glVertex2iv(const GLint *v) {
  return RegalGMockInterface::current->glVertex2iv(v);
}

void REGAL_CALL gmock_glVertex2s(GLshort x, GLshort y) {
  return RegalGMockInterface::current->glVertex2s(x, y);
}

void REGAL_CALL gmock_glVertex2sv(const GLshort *v) {
  return RegalGMockInterface::current->glVertex2sv(v);
}

void REGAL_CALL gmock_glVertex3d(GLdouble x, GLdouble y, GLdouble z) {
  return RegalGMockInterface::current->glVertex3d(x, y, z);
}

void REGAL_CALL gmock_glVertex3dv(const GLdouble *v) {
  return RegalGMockInterface::current->glVertex3dv(v);
}

void REGAL_CALL gmock_glVertex3f(GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glVertex3f(x, y, z);
}

void REGAL_CALL gmock_glVertex3fv(const GLfloat *v) {
  return RegalGMockInterface::current->glVertex3fv(v);
}

void REGAL_CALL gmock_glVertex3i(GLint x, GLint y, GLint z) {
  return RegalGMockInterface::current->glVertex3i(x, y, z);
}

void REGAL_CALL gmock_glVertex3iv(const GLint *v) {
  return RegalGMockInterface::current->glVertex3iv(v);
}

void REGAL_CALL gmock_glVertex3s(GLshort x, GLshort y, GLshort z) {
  return RegalGMockInterface::current->glVertex3s(x, y, z);
}

void REGAL_CALL gmock_glVertex3sv(const GLshort *v) {
  return RegalGMockInterface::current->glVertex3sv(v);
}

void REGAL_CALL gmock_glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  return RegalGMockInterface::current->glVertex4d(x, y, z, w);
}

void REGAL_CALL gmock_glVertex4dv(const GLdouble *v) {
  return RegalGMockInterface::current->glVertex4dv(v);
}

void REGAL_CALL gmock_glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  return RegalGMockInterface::current->glVertex4f(x, y, z, w);
}

void REGAL_CALL gmock_glVertex4fv(const GLfloat *v) {
  return RegalGMockInterface::current->glVertex4fv(v);
}

void REGAL_CALL gmock_glVertex4i(GLint x, GLint y, GLint z, GLint w) {
  return RegalGMockInterface::current->glVertex4i(x, y, z, w);
}

void REGAL_CALL gmock_glVertex4iv(const GLint *v) {
  return RegalGMockInterface::current->glVertex4iv(v);
}

void REGAL_CALL gmock_glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w) {
  return RegalGMockInterface::current->glVertex4s(x, y, z, w);
}

void REGAL_CALL gmock_glVertex4sv(const GLshort *v) {
  return RegalGMockInterface::current->glVertex4sv(v);
}

void REGAL_CALL gmock_glViewport(GLint x, GLint y, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glViewport(x, y, width, height);
}

GLboolean REGAL_CALL gmock_glAreTexturesResident(GLsizei n, const GLuint *textures, GLboolean *residences) {
  return RegalGMockInterface::current->glAreTexturesResident(n, textures, residences);
}

void REGAL_CALL gmock_glArrayElement(GLint index) {
  return RegalGMockInterface::current->glArrayElement(index);
}

void REGAL_CALL gmock_glBindTexture(GLenum target, GLuint texture) {
  return RegalGMockInterface::current->glBindTexture(target, texture);
}

void REGAL_CALL gmock_glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glColorPointer(size, type, stride, pointer);
}

void REGAL_CALL gmock_glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
  return RegalGMockInterface::current->glCopyTexImage1D(target, level, internalformat, x, y, width, border);
}

void REGAL_CALL gmock_glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
  return RegalGMockInterface::current->glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
}

void REGAL_CALL gmock_glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
  return RegalGMockInterface::current->glCopyTexSubImage1D(target, level, xoffset, x, y, width);
}

void REGAL_CALL gmock_glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
}

void REGAL_CALL gmock_glDeleteTextures(GLsizei n, const GLuint *textures) {
  return RegalGMockInterface::current->glDeleteTextures(n, textures);
}

void REGAL_CALL gmock_glDisableClientState(GLenum cap) {
  return RegalGMockInterface::current->glDisableClientState(cap);
}

void REGAL_CALL gmock_glDrawArrays(GLenum mode, GLint first, GLsizei count) {
  return RegalGMockInterface::current->glDrawArrays(mode, first, count);
}

void REGAL_CALL gmock_glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices) {
  return RegalGMockInterface::current->glDrawElements(mode, count, type, indices);
}

void REGAL_CALL gmock_glEdgeFlagPointer(GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glEdgeFlagPointer(stride, pointer);
}

void REGAL_CALL gmock_glEnableClientState(GLenum cap) {
  return RegalGMockInterface::current->glEnableClientState(cap);
}

void REGAL_CALL gmock_glGenTextures(GLsizei n, GLuint *textures) {
  return RegalGMockInterface::current->glGenTextures(n, textures);
}

void REGAL_CALL gmock_glGetPointerv(GLenum pname, GLvoid **params) {
  return RegalGMockInterface::current->glGetPointerv(pname, params);
}

void REGAL_CALL gmock_glIndexPointer(GLenum type, GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glIndexPointer(type, stride, pointer);
}

void REGAL_CALL gmock_glIndexub(GLubyte c) {
  return RegalGMockInterface::current->glIndexub(c);
}

void REGAL_CALL gmock_glIndexubv(const GLubyte *c) {
  return RegalGMockInterface::current->glIndexubv(c);
}

void REGAL_CALL gmock_glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glInterleavedArrays(format, stride, pointer);
}

GLboolean REGAL_CALL gmock_glIsTexture(GLuint texture) {
  return RegalGMockInterface::current->glIsTexture(texture);
}

void REGAL_CALL gmock_glNormalPointer(GLenum type, GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glNormalPointer(type, stride, pointer);
}

void REGAL_CALL gmock_glPolygonOffset(GLfloat factor, GLfloat units) {
  return RegalGMockInterface::current->glPolygonOffset(factor, units);
}

void REGAL_CALL gmock_glPopClientAttrib(void) {
  return RegalGMockInterface::current->glPopClientAttrib();
}

void REGAL_CALL gmock_glPrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities) {
  return RegalGMockInterface::current->glPrioritizeTextures(n, textures, priorities);
}

void REGAL_CALL gmock_glPushClientAttrib(GLbitfield mask) {
  return RegalGMockInterface::current->glPushClientAttrib(mask);
}

void REGAL_CALL gmock_glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glTexCoordPointer(size, type, stride, pointer);
}

void REGAL_CALL gmock_glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels) {
  return RegalGMockInterface::current->glTexSubImage1D(target, level, xoffset, width, format, type, pixels);
}

void REGAL_CALL gmock_glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels) {
  return RegalGMockInterface::current->glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
}

void REGAL_CALL gmock_glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glVertexPointer(size, type, stride, pointer);
}

void REGAL_CALL gmock_glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha) {
  return RegalGMockInterface::current->glBlendColor(red, green, blue, alpha);
}

void REGAL_CALL gmock_glBlendEquation(GLenum mode) {
  return RegalGMockInterface::current->glBlendEquation(mode);
}

void REGAL_CALL gmock_glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

void REGAL_CALL gmock_glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices) {
  return RegalGMockInterface::current->glDrawRangeElements(mode, start, end, count, type, indices);
}

void REGAL_CALL gmock_glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels) {
  return RegalGMockInterface::current->glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);
}

void REGAL_CALL gmock_glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels) {
  // glTexSubImage3D has too many arguments for GMock.
}

void REGAL_CALL gmock_glActiveTexture(GLenum texture) {
  return RegalGMockInterface::current->glActiveTexture(texture);
}

void REGAL_CALL gmock_glClientActiveTexture(GLenum texture) {
  return RegalGMockInterface::current->glClientActiveTexture(texture);
}

void REGAL_CALL gmock_glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data) {
  return RegalGMockInterface::current->glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);
}

void REGAL_CALL gmock_glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data) {
  return RegalGMockInterface::current->glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
}

void REGAL_CALL gmock_glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data) {
  return RegalGMockInterface::current->glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
}

void REGAL_CALL gmock_glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data) {
  return RegalGMockInterface::current->glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);
}

void REGAL_CALL gmock_glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data) {
  return RegalGMockInterface::current->glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

void REGAL_CALL gmock_glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data) {
  // glCompressedTexSubImage3D has too many arguments for GMock.
}

void REGAL_CALL gmock_glGetCompressedTexImage(GLenum target, GLint lod, GLvoid *img) {
  return RegalGMockInterface::current->glGetCompressedTexImage(target, lod, img);
}

void REGAL_CALL gmock_glLoadTransposeMatrixd(const GLdouble *m) {
  return RegalGMockInterface::current->glLoadTransposeMatrixd(m);
}

void REGAL_CALL gmock_glLoadTransposeMatrixf(const GLfloat *m) {
  return RegalGMockInterface::current->glLoadTransposeMatrixf(m);
}

void REGAL_CALL gmock_glMultTransposeMatrixd(const GLdouble *m) {
  return RegalGMockInterface::current->glMultTransposeMatrixd(m);
}

void REGAL_CALL gmock_glMultTransposeMatrixf(const GLfloat *m) {
  return RegalGMockInterface::current->glMultTransposeMatrixf(m);
}

void REGAL_CALL gmock_glMultiTexCoord1d(GLenum target, GLdouble s) {
  return RegalGMockInterface::current->glMultiTexCoord1d(target, s);
}

void REGAL_CALL gmock_glMultiTexCoord1dv(GLenum target, const GLdouble *v) {
  return RegalGMockInterface::current->glMultiTexCoord1dv(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord1f(GLenum target, GLfloat s) {
  return RegalGMockInterface::current->glMultiTexCoord1f(target, s);
}

void REGAL_CALL gmock_glMultiTexCoord1fv(GLenum target, const GLfloat *v) {
  return RegalGMockInterface::current->glMultiTexCoord1fv(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord1i(GLenum target, GLint s) {
  return RegalGMockInterface::current->glMultiTexCoord1i(target, s);
}

void REGAL_CALL gmock_glMultiTexCoord1iv(GLenum target, const GLint *v) {
  return RegalGMockInterface::current->glMultiTexCoord1iv(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord1s(GLenum target, GLshort s) {
  return RegalGMockInterface::current->glMultiTexCoord1s(target, s);
}

void REGAL_CALL gmock_glMultiTexCoord1sv(GLenum target, const GLshort *v) {
  return RegalGMockInterface::current->glMultiTexCoord1sv(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t) {
  return RegalGMockInterface::current->glMultiTexCoord2d(target, s, t);
}

void REGAL_CALL gmock_glMultiTexCoord2dv(GLenum target, const GLdouble *v) {
  return RegalGMockInterface::current->glMultiTexCoord2dv(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t) {
  return RegalGMockInterface::current->glMultiTexCoord2f(target, s, t);
}

void REGAL_CALL gmock_glMultiTexCoord2fv(GLenum target, const GLfloat *v) {
  return RegalGMockInterface::current->glMultiTexCoord2fv(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord2i(GLenum target, GLint s, GLint t) {
  return RegalGMockInterface::current->glMultiTexCoord2i(target, s, t);
}

void REGAL_CALL gmock_glMultiTexCoord2iv(GLenum target, const GLint *v) {
  return RegalGMockInterface::current->glMultiTexCoord2iv(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord2s(GLenum target, GLshort s, GLshort t) {
  return RegalGMockInterface::current->glMultiTexCoord2s(target, s, t);
}

void REGAL_CALL gmock_glMultiTexCoord2sv(GLenum target, const GLshort *v) {
  return RegalGMockInterface::current->glMultiTexCoord2sv(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r) {
  return RegalGMockInterface::current->glMultiTexCoord3d(target, s, t, r);
}

void REGAL_CALL gmock_glMultiTexCoord3dv(GLenum target, const GLdouble *v) {
  return RegalGMockInterface::current->glMultiTexCoord3dv(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r) {
  return RegalGMockInterface::current->glMultiTexCoord3f(target, s, t, r);
}

void REGAL_CALL gmock_glMultiTexCoord3fv(GLenum target, const GLfloat *v) {
  return RegalGMockInterface::current->glMultiTexCoord3fv(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r) {
  return RegalGMockInterface::current->glMultiTexCoord3i(target, s, t, r);
}

void REGAL_CALL gmock_glMultiTexCoord3iv(GLenum target, const GLint *v) {
  return RegalGMockInterface::current->glMultiTexCoord3iv(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r) {
  return RegalGMockInterface::current->glMultiTexCoord3s(target, s, t, r);
}

void REGAL_CALL gmock_glMultiTexCoord3sv(GLenum target, const GLshort *v) {
  return RegalGMockInterface::current->glMultiTexCoord3sv(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
  return RegalGMockInterface::current->glMultiTexCoord4d(target, s, t, r, q);
}

void REGAL_CALL gmock_glMultiTexCoord4dv(GLenum target, const GLdouble *v) {
  return RegalGMockInterface::current->glMultiTexCoord4dv(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
  return RegalGMockInterface::current->glMultiTexCoord4f(target, s, t, r, q);
}

void REGAL_CALL gmock_glMultiTexCoord4fv(GLenum target, const GLfloat *v) {
  return RegalGMockInterface::current->glMultiTexCoord4fv(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q) {
  return RegalGMockInterface::current->glMultiTexCoord4i(target, s, t, r, q);
}

void REGAL_CALL gmock_glMultiTexCoord4iv(GLenum target, const GLint *v) {
  return RegalGMockInterface::current->glMultiTexCoord4iv(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) {
  return RegalGMockInterface::current->glMultiTexCoord4s(target, s, t, r, q);
}

void REGAL_CALL gmock_glMultiTexCoord4sv(GLenum target, const GLshort *v) {
  return RegalGMockInterface::current->glMultiTexCoord4sv(target, v);
}

void REGAL_CALL gmock_glSampleCoverage(GLclampf value, GLboolean invert) {
  return RegalGMockInterface::current->glSampleCoverage(value, invert);
}

void REGAL_CALL gmock_glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) {
  return RegalGMockInterface::current->glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

void REGAL_CALL gmock_glFogCoordPointer(GLenum type, GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glFogCoordPointer(type, stride, pointer);
}

void REGAL_CALL gmock_glFogCoordd(GLdouble coord) {
  return RegalGMockInterface::current->glFogCoordd(coord);
}

void REGAL_CALL gmock_glFogCoorddv(const GLdouble *coord) {
  return RegalGMockInterface::current->glFogCoorddv(coord);
}

void REGAL_CALL gmock_glFogCoordf(GLfloat coord) {
  return RegalGMockInterface::current->glFogCoordf(coord);
}

void REGAL_CALL gmock_glFogCoordfv(const GLfloat *coord) {
  return RegalGMockInterface::current->glFogCoordfv(coord);
}

void REGAL_CALL gmock_glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount) {
  return RegalGMockInterface::current->glMultiDrawArrays(mode, first, count, primcount);
}

void REGAL_CALL gmock_glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount) {
  return RegalGMockInterface::current->glMultiDrawElements(mode, count, type, indices, primcount);
}

void REGAL_CALL gmock_glPointParameterf(GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glPointParameterf(pname, param);
}

void REGAL_CALL gmock_glPointParameterfv(GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glPointParameterfv(pname, params);
}

void REGAL_CALL gmock_glPointParameteri(GLenum pname, GLint param) {
  return RegalGMockInterface::current->glPointParameteri(pname, param);
}

void REGAL_CALL gmock_glPointParameteriv(GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glPointParameteriv(pname, params);
}

void REGAL_CALL gmock_glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue) {
  return RegalGMockInterface::current->glSecondaryColor3b(red, green, blue);
}

void REGAL_CALL gmock_glSecondaryColor3bv(const GLbyte *v) {
  return RegalGMockInterface::current->glSecondaryColor3bv(v);
}

void REGAL_CALL gmock_glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue) {
  return RegalGMockInterface::current->glSecondaryColor3d(red, green, blue);
}

void REGAL_CALL gmock_glSecondaryColor3dv(const GLdouble *v) {
  return RegalGMockInterface::current->glSecondaryColor3dv(v);
}

void REGAL_CALL gmock_glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue) {
  return RegalGMockInterface::current->glSecondaryColor3f(red, green, blue);
}

void REGAL_CALL gmock_glSecondaryColor3fv(const GLfloat *v) {
  return RegalGMockInterface::current->glSecondaryColor3fv(v);
}

void REGAL_CALL gmock_glSecondaryColor3i(GLint red, GLint green, GLint blue) {
  return RegalGMockInterface::current->glSecondaryColor3i(red, green, blue);
}

void REGAL_CALL gmock_glSecondaryColor3iv(const GLint *v) {
  return RegalGMockInterface::current->glSecondaryColor3iv(v);
}

void REGAL_CALL gmock_glSecondaryColor3s(GLshort red, GLshort green, GLshort blue) {
  return RegalGMockInterface::current->glSecondaryColor3s(red, green, blue);
}

void REGAL_CALL gmock_glSecondaryColor3sv(const GLshort *v) {
  return RegalGMockInterface::current->glSecondaryColor3sv(v);
}

void REGAL_CALL gmock_glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue) {
  return RegalGMockInterface::current->glSecondaryColor3ub(red, green, blue);
}

void REGAL_CALL gmock_glSecondaryColor3ubv(const GLubyte *v) {
  return RegalGMockInterface::current->glSecondaryColor3ubv(v);
}

void REGAL_CALL gmock_glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue) {
  return RegalGMockInterface::current->glSecondaryColor3ui(red, green, blue);
}

void REGAL_CALL gmock_glSecondaryColor3uiv(const GLuint *v) {
  return RegalGMockInterface::current->glSecondaryColor3uiv(v);
}

void REGAL_CALL gmock_glSecondaryColor3us(GLushort red, GLushort green, GLushort blue) {
  return RegalGMockInterface::current->glSecondaryColor3us(red, green, blue);
}

void REGAL_CALL gmock_glSecondaryColor3usv(const GLushort *v) {
  return RegalGMockInterface::current->glSecondaryColor3usv(v);
}

void REGAL_CALL gmock_glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glSecondaryColorPointer(size, type, stride, pointer);
}

void REGAL_CALL gmock_glWindowPos2d(GLdouble x, GLdouble y) {
  return RegalGMockInterface::current->glWindowPos2d(x, y);
}

void REGAL_CALL gmock_glWindowPos2dv(const GLdouble *p) {
  return RegalGMockInterface::current->glWindowPos2dv(p);
}

void REGAL_CALL gmock_glWindowPos2f(GLfloat x, GLfloat y) {
  return RegalGMockInterface::current->glWindowPos2f(x, y);
}

void REGAL_CALL gmock_glWindowPos2fv(const GLfloat *p) {
  return RegalGMockInterface::current->glWindowPos2fv(p);
}

void REGAL_CALL gmock_glWindowPos2i(GLint x, GLint y) {
  return RegalGMockInterface::current->glWindowPos2i(x, y);
}

void REGAL_CALL gmock_glWindowPos2iv(const GLint *p) {
  return RegalGMockInterface::current->glWindowPos2iv(p);
}

void REGAL_CALL gmock_glWindowPos2s(GLshort x, GLshort y) {
  return RegalGMockInterface::current->glWindowPos2s(x, y);
}

void REGAL_CALL gmock_glWindowPos2sv(const GLshort *p) {
  return RegalGMockInterface::current->glWindowPos2sv(p);
}

void REGAL_CALL gmock_glWindowPos3d(GLdouble x, GLdouble y, GLdouble z) {
  return RegalGMockInterface::current->glWindowPos3d(x, y, z);
}

void REGAL_CALL gmock_glWindowPos3dv(const GLdouble *p) {
  return RegalGMockInterface::current->glWindowPos3dv(p);
}

void REGAL_CALL gmock_glWindowPos3f(GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glWindowPos3f(x, y, z);
}

void REGAL_CALL gmock_glWindowPos3fv(const GLfloat *p) {
  return RegalGMockInterface::current->glWindowPos3fv(p);
}

void REGAL_CALL gmock_glWindowPos3i(GLint x, GLint y, GLint z) {
  return RegalGMockInterface::current->glWindowPos3i(x, y, z);
}

void REGAL_CALL gmock_glWindowPos3iv(const GLint *p) {
  return RegalGMockInterface::current->glWindowPos3iv(p);
}

void REGAL_CALL gmock_glWindowPos3s(GLshort x, GLshort y, GLshort z) {
  return RegalGMockInterface::current->glWindowPos3s(x, y, z);
}

void REGAL_CALL gmock_glWindowPos3sv(const GLshort *p) {
  return RegalGMockInterface::current->glWindowPos3sv(p);
}

void REGAL_CALL gmock_glBeginQuery(GLenum target, GLuint id) {
  return RegalGMockInterface::current->glBeginQuery(target, id);
}

void REGAL_CALL gmock_glBindBuffer(GLenum target, GLuint buffer) {
  return RegalGMockInterface::current->glBindBuffer(target, buffer);
}

void REGAL_CALL gmock_glBufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage) {
  return RegalGMockInterface::current->glBufferData(target, size, data, usage);
}

void REGAL_CALL gmock_glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data) {
  return RegalGMockInterface::current->glBufferSubData(target, offset, size, data);
}

void REGAL_CALL gmock_glDeleteBuffers(GLsizei n, const GLuint *buffers) {
  return RegalGMockInterface::current->glDeleteBuffers(n, buffers);
}

void REGAL_CALL gmock_glDeleteQueries(GLsizei n, const GLuint *ids) {
  return RegalGMockInterface::current->glDeleteQueries(n, ids);
}

void REGAL_CALL gmock_glEndQuery(GLenum target) {
  return RegalGMockInterface::current->glEndQuery(target);
}

void REGAL_CALL gmock_glGenBuffers(GLsizei n, GLuint *buffers) {
  return RegalGMockInterface::current->glGenBuffers(n, buffers);
}

void REGAL_CALL gmock_glGenQueries(GLsizei n, GLuint *ids) {
  return RegalGMockInterface::current->glGenQueries(n, ids);
}

void REGAL_CALL gmock_glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetBufferParameteriv(target, pname, params);
}

void REGAL_CALL gmock_glGetBufferPointerv(GLenum target, GLenum pname, GLvoid **params) {
  return RegalGMockInterface::current->glGetBufferPointerv(target, pname, params);
}

void REGAL_CALL gmock_glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data) {
  return RegalGMockInterface::current->glGetBufferSubData(target, offset, size, data);
}

void REGAL_CALL gmock_glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetQueryObjectiv(id, pname, params);
}

void REGAL_CALL gmock_glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params) {
  return RegalGMockInterface::current->glGetQueryObjectuiv(id, pname, params);
}

void REGAL_CALL gmock_glGetQueryiv(GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetQueryiv(target, pname, params);
}

GLboolean REGAL_CALL gmock_glIsBuffer(GLuint buffer) {
  return RegalGMockInterface::current->glIsBuffer(buffer);
}

GLboolean REGAL_CALL gmock_glIsQuery(GLuint id) {
  return RegalGMockInterface::current->glIsQuery(id);
}

GLvoid * REGAL_CALL gmock_glMapBuffer(GLenum target, GLenum access) {
  return RegalGMockInterface::current->glMapBuffer(target, access);
}

GLboolean REGAL_CALL gmock_glUnmapBuffer(GLenum target) {
  return RegalGMockInterface::current->glUnmapBuffer(target);
}

void REGAL_CALL gmock_glAttachShader(GLuint program, GLuint shader) {
  return RegalGMockInterface::current->glAttachShader(program, shader);
}

void REGAL_CALL gmock_glBindAttribLocation(GLuint program, GLuint index, const GLchar *name) {
  return RegalGMockInterface::current->glBindAttribLocation(program, index, name);
}

void REGAL_CALL gmock_glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha) {
  return RegalGMockInterface::current->glBlendEquationSeparate(modeRGB, modeAlpha);
}

void REGAL_CALL gmock_glCompileShader(GLuint shader) {
  return RegalGMockInterface::current->glCompileShader(shader);
}

GLuint REGAL_CALL gmock_glCreateProgram(void) {
  return RegalGMockInterface::current->glCreateProgram();
}

GLuint REGAL_CALL gmock_glCreateShader(GLenum type) {
  return RegalGMockInterface::current->glCreateShader(type);
}

void REGAL_CALL gmock_glDeleteProgram(GLuint program) {
  return RegalGMockInterface::current->glDeleteProgram(program);
}

void REGAL_CALL gmock_glDeleteShader(GLuint shader) {
  return RegalGMockInterface::current->glDeleteShader(shader);
}

void REGAL_CALL gmock_glDetachShader(GLuint program, GLuint shader) {
  return RegalGMockInterface::current->glDetachShader(program, shader);
}

void REGAL_CALL gmock_glDisableVertexAttribArray(GLuint index) {
  return RegalGMockInterface::current->glDisableVertexAttribArray(index);
}

void REGAL_CALL gmock_glDrawBuffers(GLsizei n, const GLenum *bufs) {
  return RegalGMockInterface::current->glDrawBuffers(n, bufs);
}

void REGAL_CALL gmock_glEnableVertexAttribArray(GLuint index) {
  return RegalGMockInterface::current->glEnableVertexAttribArray(index);
}

void REGAL_CALL gmock_glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) {
  return RegalGMockInterface::current->glGetActiveAttrib(program, index, bufSize, length, size, type, name);
}

void REGAL_CALL gmock_glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) {
  return RegalGMockInterface::current->glGetActiveUniform(program, index, bufSize, length, size, type, name);
}

void REGAL_CALL gmock_glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders) {
  return RegalGMockInterface::current->glGetAttachedShaders(program, maxCount, count, shaders);
}

GLint REGAL_CALL gmock_glGetAttribLocation(GLuint program, const GLchar *name) {
  return RegalGMockInterface::current->glGetAttribLocation(program, name);
}

void REGAL_CALL gmock_glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {
  return RegalGMockInterface::current->glGetProgramInfoLog(program, bufSize, length, infoLog);
}

void REGAL_CALL gmock_glGetProgramiv(GLuint program, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetProgramiv(program, pname, params);
}

void REGAL_CALL gmock_glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {
  return RegalGMockInterface::current->glGetShaderInfoLog(shader, bufSize, length, infoLog);
}

void REGAL_CALL gmock_glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source) {
  return RegalGMockInterface::current->glGetShaderSource(shader, bufSize, length, source);
}

void REGAL_CALL gmock_glGetShaderiv(GLuint shader, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetShaderiv(shader, pname, params);
}

GLint REGAL_CALL gmock_glGetUniformLocation(GLuint program, const GLchar *name) {
  return RegalGMockInterface::current->glGetUniformLocation(program, name);
}

void REGAL_CALL gmock_glGetUniformfv(GLuint program, GLint location, GLfloat *params) {
  return RegalGMockInterface::current->glGetUniformfv(program, location, params);
}

void REGAL_CALL gmock_glGetUniformiv(GLuint program, GLint location, GLint *params) {
  return RegalGMockInterface::current->glGetUniformiv(program, location, params);
}

void REGAL_CALL gmock_glGetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid **pointer) {
  return RegalGMockInterface::current->glGetVertexAttribPointerv(index, pname, pointer);
}

void REGAL_CALL gmock_glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params) {
  return RegalGMockInterface::current->glGetVertexAttribdv(index, pname, params);
}

void REGAL_CALL gmock_glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetVertexAttribfv(index, pname, params);
}

void REGAL_CALL gmock_glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetVertexAttribiv(index, pname, params);
}

GLboolean REGAL_CALL gmock_glIsProgram(GLuint program) {
  return RegalGMockInterface::current->glIsProgram(program);
}

GLboolean REGAL_CALL gmock_glIsShader(GLuint shader) {
  return RegalGMockInterface::current->glIsShader(shader);
}

void REGAL_CALL gmock_glLinkProgram(GLuint program) {
  return RegalGMockInterface::current->glLinkProgram(program);
}

void REGAL_CALL gmock_glShaderSource(GLuint shader, GLsizei count, const GLchar **string, const GLint *length) {
  return RegalGMockInterface::current->glShaderSource(shader, count, string, length);
}

void REGAL_CALL gmock_glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask) {
  return RegalGMockInterface::current->glStencilFuncSeparate(face, func, ref, mask);
}

void REGAL_CALL gmock_glStencilMaskSeparate(GLenum face, GLuint mask) {
  return RegalGMockInterface::current->glStencilMaskSeparate(face, mask);
}

void REGAL_CALL gmock_glStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass) {
  return RegalGMockInterface::current->glStencilOpSeparate(face, fail, zfail, zpass);
}

void REGAL_CALL gmock_glUniform1f(GLint location, GLfloat v0) {
  return RegalGMockInterface::current->glUniform1f(location, v0);
}

void REGAL_CALL gmock_glUniform1fv(GLint location, GLsizei count, const GLfloat *value) {
  return RegalGMockInterface::current->glUniform1fv(location, count, value);
}

void REGAL_CALL gmock_glUniform1i(GLint location, GLint v0) {
  return RegalGMockInterface::current->glUniform1i(location, v0);
}

void REGAL_CALL gmock_glUniform1iv(GLint location, GLsizei count, const GLint *value) {
  return RegalGMockInterface::current->glUniform1iv(location, count, value);
}

void REGAL_CALL gmock_glUniform2f(GLint location, GLfloat v0, GLfloat v1) {
  return RegalGMockInterface::current->glUniform2f(location, v0, v1);
}

void REGAL_CALL gmock_glUniform2fv(GLint location, GLsizei count, const GLfloat *value) {
  return RegalGMockInterface::current->glUniform2fv(location, count, value);
}

void REGAL_CALL gmock_glUniform2i(GLint location, GLint v0, GLint v1) {
  return RegalGMockInterface::current->glUniform2i(location, v0, v1);
}

void REGAL_CALL gmock_glUniform2iv(GLint location, GLsizei count, const GLint *value) {
  return RegalGMockInterface::current->glUniform2iv(location, count, value);
}

void REGAL_CALL gmock_glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
  return RegalGMockInterface::current->glUniform3f(location, v0, v1, v2);
}

void REGAL_CALL gmock_glUniform3fv(GLint location, GLsizei count, const GLfloat *value) {
  return RegalGMockInterface::current->glUniform3fv(location, count, value);
}

void REGAL_CALL gmock_glUniform3i(GLint location, GLint v0, GLint v1, GLint v2) {
  return RegalGMockInterface::current->glUniform3i(location, v0, v1, v2);
}

void REGAL_CALL gmock_glUniform3iv(GLint location, GLsizei count, const GLint *value) {
  return RegalGMockInterface::current->glUniform3iv(location, count, value);
}

void REGAL_CALL gmock_glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
  return RegalGMockInterface::current->glUniform4f(location, v0, v1, v2, v3);
}

void REGAL_CALL gmock_glUniform4fv(GLint location, GLsizei count, const GLfloat *value) {
  return RegalGMockInterface::current->glUniform4fv(location, count, value);
}

void REGAL_CALL gmock_glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
  return RegalGMockInterface::current->glUniform4i(location, v0, v1, v2, v3);
}

void REGAL_CALL gmock_glUniform4iv(GLint location, GLsizei count, const GLint *value) {
  return RegalGMockInterface::current->glUniform4iv(location, count, value);
}

void REGAL_CALL gmock_glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glUniformMatrix2fv(location, count, transpose, value);
}

void REGAL_CALL gmock_glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glUniformMatrix3fv(location, count, transpose, value);
}

void REGAL_CALL gmock_glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glUniformMatrix4fv(location, count, transpose, value);
}

void REGAL_CALL gmock_glUseProgram(GLuint program) {
  return RegalGMockInterface::current->glUseProgram(program);
}

void REGAL_CALL gmock_glValidateProgram(GLuint program) {
  return RegalGMockInterface::current->glValidateProgram(program);
}

void REGAL_CALL gmock_glVertexAttrib1d(GLuint index, GLdouble x) {
  return RegalGMockInterface::current->glVertexAttrib1d(index, x);
}

void REGAL_CALL gmock_glVertexAttrib1dv(GLuint index, const GLdouble *v) {
  return RegalGMockInterface::current->glVertexAttrib1dv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib1f(GLuint index, GLfloat x) {
  return RegalGMockInterface::current->glVertexAttrib1f(index, x);
}

void REGAL_CALL gmock_glVertexAttrib1fv(GLuint index, const GLfloat *v) {
  return RegalGMockInterface::current->glVertexAttrib1fv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib1s(GLuint index, GLshort x) {
  return RegalGMockInterface::current->glVertexAttrib1s(index, x);
}

void REGAL_CALL gmock_glVertexAttrib1sv(GLuint index, const GLshort *v) {
  return RegalGMockInterface::current->glVertexAttrib1sv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y) {
  return RegalGMockInterface::current->glVertexAttrib2d(index, x, y);
}

void REGAL_CALL gmock_glVertexAttrib2dv(GLuint index, const GLdouble *v) {
  return RegalGMockInterface::current->glVertexAttrib2dv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y) {
  return RegalGMockInterface::current->glVertexAttrib2f(index, x, y);
}

void REGAL_CALL gmock_glVertexAttrib2fv(GLuint index, const GLfloat *v) {
  return RegalGMockInterface::current->glVertexAttrib2fv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib2s(GLuint index, GLshort x, GLshort y) {
  return RegalGMockInterface::current->glVertexAttrib2s(index, x, y);
}

void REGAL_CALL gmock_glVertexAttrib2sv(GLuint index, const GLshort *v) {
  return RegalGMockInterface::current->glVertexAttrib2sv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
  return RegalGMockInterface::current->glVertexAttrib3d(index, x, y, z);
}

void REGAL_CALL gmock_glVertexAttrib3dv(GLuint index, const GLdouble *v) {
  return RegalGMockInterface::current->glVertexAttrib3dv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glVertexAttrib3f(index, x, y, z);
}

void REGAL_CALL gmock_glVertexAttrib3fv(GLuint index, const GLfloat *v) {
  return RegalGMockInterface::current->glVertexAttrib3fv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z) {
  return RegalGMockInterface::current->glVertexAttrib3s(index, x, y, z);
}

void REGAL_CALL gmock_glVertexAttrib3sv(GLuint index, const GLshort *v) {
  return RegalGMockInterface::current->glVertexAttrib3sv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4Nbv(GLuint index, const GLbyte *v) {
  return RegalGMockInterface::current->glVertexAttrib4Nbv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4Niv(GLuint index, const GLint *v) {
  return RegalGMockInterface::current->glVertexAttrib4Niv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4Nsv(GLuint index, const GLshort *v) {
  return RegalGMockInterface::current->glVertexAttrib4Nsv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {
  return RegalGMockInterface::current->glVertexAttrib4Nub(index, x, y, z, w);
}

void REGAL_CALL gmock_glVertexAttrib4Nubv(GLuint index, const GLubyte *v) {
  return RegalGMockInterface::current->glVertexAttrib4Nubv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4Nuiv(GLuint index, const GLuint *v) {
  return RegalGMockInterface::current->glVertexAttrib4Nuiv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4Nusv(GLuint index, const GLushort *v) {
  return RegalGMockInterface::current->glVertexAttrib4Nusv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4bv(GLuint index, const GLbyte *v) {
  return RegalGMockInterface::current->glVertexAttrib4bv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  return RegalGMockInterface::current->glVertexAttrib4d(index, x, y, z, w);
}

void REGAL_CALL gmock_glVertexAttrib4dv(GLuint index, const GLdouble *v) {
  return RegalGMockInterface::current->glVertexAttrib4dv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  return RegalGMockInterface::current->glVertexAttrib4f(index, x, y, z, w);
}

void REGAL_CALL gmock_glVertexAttrib4fv(GLuint index, const GLfloat *v) {
  return RegalGMockInterface::current->glVertexAttrib4fv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4iv(GLuint index, const GLint *v) {
  return RegalGMockInterface::current->glVertexAttrib4iv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {
  return RegalGMockInterface::current->glVertexAttrib4s(index, x, y, z, w);
}

void REGAL_CALL gmock_glVertexAttrib4sv(GLuint index, const GLshort *v) {
  return RegalGMockInterface::current->glVertexAttrib4sv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4ubv(GLuint index, const GLubyte *v) {
  return RegalGMockInterface::current->glVertexAttrib4ubv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4uiv(GLuint index, const GLuint *v) {
  return RegalGMockInterface::current->glVertexAttrib4uiv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4usv(GLuint index, const GLushort *v) {
  return RegalGMockInterface::current->glVertexAttrib4usv(index, v);
}

void REGAL_CALL gmock_glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glVertexAttribPointer(index, size, type, normalized, stride, pointer);
}

void REGAL_CALL gmock_glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glUniformMatrix2x3fv(location, count, transpose, value);
}

void REGAL_CALL gmock_glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glUniformMatrix2x4fv(location, count, transpose, value);
}

void REGAL_CALL gmock_glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glUniformMatrix3x2fv(location, count, transpose, value);
}

void REGAL_CALL gmock_glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glUniformMatrix3x4fv(location, count, transpose, value);
}

void REGAL_CALL gmock_glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glUniformMatrix4x2fv(location, count, transpose, value);
}

void REGAL_CALL gmock_glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glUniformMatrix4x3fv(location, count, transpose, value);
}

void REGAL_CALL gmock_glBeginConditionalRender(GLuint id, GLenum mode) {
  return RegalGMockInterface::current->glBeginConditionalRender(id, mode);
}

void REGAL_CALL gmock_glBeginTransformFeedback(GLenum primitiveMode) {
  return RegalGMockInterface::current->glBeginTransformFeedback(primitiveMode);
}

void REGAL_CALL gmock_glBindFragDataLocation(GLuint program, GLuint color, const GLchar *name) {
  return RegalGMockInterface::current->glBindFragDataLocation(program, color, name);
}

void REGAL_CALL gmock_glClampColor(GLenum target, GLenum clamp) {
  return RegalGMockInterface::current->glClampColor(target, clamp);
}

void REGAL_CALL gmock_glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) {
  return RegalGMockInterface::current->glClearBufferfi(buffer, drawbuffer, depth, stencil);
}

void REGAL_CALL gmock_glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value) {
  return RegalGMockInterface::current->glClearBufferfv(buffer, drawbuffer, value);
}

void REGAL_CALL gmock_glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value) {
  return RegalGMockInterface::current->glClearBufferiv(buffer, drawbuffer, value);
}

void REGAL_CALL gmock_glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value) {
  return RegalGMockInterface::current->glClearBufferuiv(buffer, drawbuffer, value);
}

void REGAL_CALL gmock_glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {
  return RegalGMockInterface::current->glColorMaski(index, r, g, b, a);
}

void REGAL_CALL gmock_glDisablei(GLenum cap, GLuint index) {
  return RegalGMockInterface::current->glDisablei(cap, index);
}

void REGAL_CALL gmock_glEnablei(GLenum cap, GLuint index) {
  return RegalGMockInterface::current->glEnablei(cap, index);
}

void REGAL_CALL gmock_glEndConditionalRender(void) {
  return RegalGMockInterface::current->glEndConditionalRender();
}

void REGAL_CALL gmock_glEndTransformFeedback(void) {
  return RegalGMockInterface::current->glEndTransformFeedback();
}

void REGAL_CALL gmock_glGetBooleani_v(GLenum target, GLuint index, GLboolean *data) {
  return RegalGMockInterface::current->glGetBooleani_v(target, index, data);
}

GLint REGAL_CALL gmock_glGetFragDataLocation(GLuint program, const GLchar *name) {
  return RegalGMockInterface::current->glGetFragDataLocation(program, name);
}

const GLubyte * REGAL_CALL gmock_glGetStringi(GLenum name, GLuint index) {
  return RegalGMockInterface::current->glGetStringi(name, index);
}

void REGAL_CALL gmock_glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetTexParameterIiv(target, pname, params);
}

void REGAL_CALL gmock_glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params) {
  return RegalGMockInterface::current->glGetTexParameterIuiv(target, pname, params);
}

void REGAL_CALL gmock_glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) {
  return RegalGMockInterface::current->glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name);
}

void REGAL_CALL gmock_glGetUniformuiv(GLuint program, GLint location, GLuint *params) {
  return RegalGMockInterface::current->glGetUniformuiv(program, location, params);
}

void REGAL_CALL gmock_glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetVertexAttribIiv(index, pname, params);
}

void REGAL_CALL gmock_glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params) {
  return RegalGMockInterface::current->glGetVertexAttribIuiv(index, pname, params);
}

GLboolean REGAL_CALL gmock_glIsEnabledi(GLenum target, GLuint index) {
  return RegalGMockInterface::current->glIsEnabledi(target, index);
}

void REGAL_CALL gmock_glTexParameterIiv(GLenum target, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glTexParameterIiv(target, pname, params);
}

void REGAL_CALL gmock_glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params) {
  return RegalGMockInterface::current->glTexParameterIuiv(target, pname, params);
}

void REGAL_CALL gmock_glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar **varyings, GLenum bufferMode) {
  return RegalGMockInterface::current->glTransformFeedbackVaryings(program, count, varyings, bufferMode);
}

void REGAL_CALL gmock_glUniform1ui(GLint location, GLuint v0) {
  return RegalGMockInterface::current->glUniform1ui(location, v0);
}

void REGAL_CALL gmock_glUniform1uiv(GLint location, GLsizei count, const GLuint *value) {
  return RegalGMockInterface::current->glUniform1uiv(location, count, value);
}

void REGAL_CALL gmock_glUniform2ui(GLint location, GLuint v0, GLuint v1) {
  return RegalGMockInterface::current->glUniform2ui(location, v0, v1);
}

void REGAL_CALL gmock_glUniform2uiv(GLint location, GLsizei count, const GLuint *value) {
  return RegalGMockInterface::current->glUniform2uiv(location, count, value);
}

void REGAL_CALL gmock_glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2) {
  return RegalGMockInterface::current->glUniform3ui(location, v0, v1, v2);
}

void REGAL_CALL gmock_glUniform3uiv(GLint location, GLsizei count, const GLuint *value) {
  return RegalGMockInterface::current->glUniform3uiv(location, count, value);
}

void REGAL_CALL gmock_glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
  return RegalGMockInterface::current->glUniform4ui(location, v0, v1, v2, v3);
}

void REGAL_CALL gmock_glUniform4uiv(GLint location, GLsizei count, const GLuint *value) {
  return RegalGMockInterface::current->glUniform4uiv(location, count, value);
}

void REGAL_CALL gmock_glVertexAttribI1i(GLuint index, GLint x) {
  return RegalGMockInterface::current->glVertexAttribI1i(index, x);
}

void REGAL_CALL gmock_glVertexAttribI1iv(GLuint index, const GLint *v) {
  return RegalGMockInterface::current->glVertexAttribI1iv(index, v);
}

void REGAL_CALL gmock_glVertexAttribI1ui(GLuint index, GLuint x) {
  return RegalGMockInterface::current->glVertexAttribI1ui(index, x);
}

void REGAL_CALL gmock_glVertexAttribI1uiv(GLuint index, const GLuint *v) {
  return RegalGMockInterface::current->glVertexAttribI1uiv(index, v);
}

void REGAL_CALL gmock_glVertexAttribI2i(GLuint index, GLint x, GLint y) {
  return RegalGMockInterface::current->glVertexAttribI2i(index, x, y);
}

void REGAL_CALL gmock_glVertexAttribI2iv(GLuint index, const GLint *v) {
  return RegalGMockInterface::current->glVertexAttribI2iv(index, v);
}

void REGAL_CALL gmock_glVertexAttribI2ui(GLuint index, GLuint x, GLuint y) {
  return RegalGMockInterface::current->glVertexAttribI2ui(index, x, y);
}

void REGAL_CALL gmock_glVertexAttribI2uiv(GLuint index, const GLuint *v) {
  return RegalGMockInterface::current->glVertexAttribI2uiv(index, v);
}

void REGAL_CALL gmock_glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z) {
  return RegalGMockInterface::current->glVertexAttribI3i(index, x, y, z);
}

void REGAL_CALL gmock_glVertexAttribI3iv(GLuint index, const GLint *v) {
  return RegalGMockInterface::current->glVertexAttribI3iv(index, v);
}

void REGAL_CALL gmock_glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z) {
  return RegalGMockInterface::current->glVertexAttribI3ui(index, x, y, z);
}

void REGAL_CALL gmock_glVertexAttribI3uiv(GLuint index, const GLuint *v) {
  return RegalGMockInterface::current->glVertexAttribI3uiv(index, v);
}

void REGAL_CALL gmock_glVertexAttribI4bv(GLuint index, const GLbyte *v) {
  return RegalGMockInterface::current->glVertexAttribI4bv(index, v);
}

void REGAL_CALL gmock_glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w) {
  return RegalGMockInterface::current->glVertexAttribI4i(index, x, y, z, w);
}

void REGAL_CALL gmock_glVertexAttribI4iv(GLuint index, const GLint *v) {
  return RegalGMockInterface::current->glVertexAttribI4iv(index, v);
}

void REGAL_CALL gmock_glVertexAttribI4sv(GLuint index, const GLshort *v) {
  return RegalGMockInterface::current->glVertexAttribI4sv(index, v);
}

void REGAL_CALL gmock_glVertexAttribI4ubv(GLuint index, const GLubyte *v) {
  return RegalGMockInterface::current->glVertexAttribI4ubv(index, v);
}

void REGAL_CALL gmock_glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
  return RegalGMockInterface::current->glVertexAttribI4ui(index, x, y, z, w);
}

void REGAL_CALL gmock_glVertexAttribI4uiv(GLuint index, const GLuint *v) {
  return RegalGMockInterface::current->glVertexAttribI4uiv(index, v);
}

void REGAL_CALL gmock_glVertexAttribI4usv(GLuint index, const GLushort *v) {
  return RegalGMockInterface::current->glVertexAttribI4usv(index, v);
}

void REGAL_CALL gmock_glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glVertexAttribIPointer(index, size, type, stride, pointer);
}

void REGAL_CALL gmock_glDrawArraysInstanced(GLenum mode, GLint start, GLsizei count, GLsizei primcount) {
  return RegalGMockInterface::current->glDrawArraysInstanced(mode, start, count, primcount);
}

void REGAL_CALL gmock_glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount) {
  return RegalGMockInterface::current->glDrawElementsInstanced(mode, count, type, indices, primcount);
}

void REGAL_CALL gmock_glPrimitiveRestartIndex(GLuint index) {
  return RegalGMockInterface::current->glPrimitiveRestartIndex(index);
}

void REGAL_CALL gmock_glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer) {
  return RegalGMockInterface::current->glTexBuffer(target, internalformat, buffer);
}

void REGAL_CALL gmock_glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level) {
  return RegalGMockInterface::current->glFramebufferTexture(target, attachment, texture, level);
}

void REGAL_CALL gmock_glFramebufferTextureFace(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) {
  return RegalGMockInterface::current->glFramebufferTextureFace(target, attachment, texture, level, face);
}

void REGAL_CALL gmock_glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params) {
  return RegalGMockInterface::current->glGetBufferParameteri64v(target, pname, params);
}

void REGAL_CALL gmock_glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data) {
  return RegalGMockInterface::current->glGetInteger64i_v(target, index, data);
}

void REGAL_CALL gmock_glVertexAttribDivisor(GLuint index, GLuint divisor) {
  return RegalGMockInterface::current->glVertexAttribDivisor(index, divisor);
}

void REGAL_CALL gmock_glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
  return RegalGMockInterface::current->glBlendEquationSeparatei(buf, modeRGB, modeAlpha);
}

void REGAL_CALL gmock_glBlendEquationi(GLuint buf, GLenum mode) {
  return RegalGMockInterface::current->glBlendEquationi(buf, mode);
}

void REGAL_CALL gmock_glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
  return RegalGMockInterface::current->glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}

void REGAL_CALL gmock_glBlendFunci(GLuint buf, GLenum src, GLenum dst) {
  return RegalGMockInterface::current->glBlendFunci(buf, src, dst);
}

void REGAL_CALL gmock_glTbufferMask3DFX(GLuint mask) {
  return RegalGMockInterface::current->glTbufferMask3DFX(mask);
}

void REGAL_CALL gmock_glDebugMessageCallbackAMD(GLDEBUGPROCAMD callback, GLvoid *userParam) {
  return RegalGMockInterface::current->glDebugMessageCallbackAMD(callback, userParam);
}

void REGAL_CALL gmock_glDebugMessageEnableAMD(GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) {
  return RegalGMockInterface::current->glDebugMessageEnableAMD(category, severity, count, ids, enabled);
}

void REGAL_CALL gmock_glDebugMessageInsertAMD(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf) {
  return RegalGMockInterface::current->glDebugMessageInsertAMD(category, severity, id, length, buf);
}

GLuint REGAL_CALL gmock_glGetDebugMessageLogAMD(GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message) {
  return RegalGMockInterface::current->glGetDebugMessageLogAMD(count, bufsize, categories, severities, ids, lengths, message);
}

void REGAL_CALL gmock_glBlendEquationIndexedAMD(GLuint buf, GLenum mode) {
  return RegalGMockInterface::current->glBlendEquationIndexedAMD(buf, mode);
}

void REGAL_CALL gmock_glBlendEquationSeparateIndexedAMD(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
  return RegalGMockInterface::current->glBlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha);
}

void REGAL_CALL gmock_glBlendFuncIndexedAMD(GLuint buf, GLenum src, GLenum dst) {
  return RegalGMockInterface::current->glBlendFuncIndexedAMD(buf, src, dst);
}

void REGAL_CALL gmock_glBlendFuncSeparateIndexedAMD(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
  return RegalGMockInterface::current->glBlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}

void REGAL_CALL gmock_glMultiDrawArraysIndirectAMD(GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride) {
  return RegalGMockInterface::current->glMultiDrawArraysIndirectAMD(mode, indirect, primcount, stride);
}

void REGAL_CALL gmock_glMultiDrawElementsIndirectAMD(GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride) {
  return RegalGMockInterface::current->glMultiDrawElementsIndirectAMD(mode, type, indirect, primcount, stride);
}

void REGAL_CALL gmock_glDeleteNamesAMD(GLenum identifier, GLuint num, const GLuint *names) {
  return RegalGMockInterface::current->glDeleteNamesAMD(identifier, num, names);
}

void REGAL_CALL gmock_glGenNamesAMD(GLenum identifier, GLuint num, GLuint *names) {
  return RegalGMockInterface::current->glGenNamesAMD(identifier, num, names);
}

GLboolean REGAL_CALL gmock_glIsNameAMD(GLenum identifier, GLuint name) {
  return RegalGMockInterface::current->glIsNameAMD(identifier, name);
}

void REGAL_CALL gmock_glBeginPerfMonitorAMD(GLuint monitor) {
  return RegalGMockInterface::current->glBeginPerfMonitorAMD(monitor);
}

void REGAL_CALL gmock_glDeletePerfMonitorsAMD(GLsizei n, GLuint *monitors) {
  return RegalGMockInterface::current->glDeletePerfMonitorsAMD(n, monitors);
}

void REGAL_CALL gmock_glEndPerfMonitorAMD(GLuint monitor) {
  return RegalGMockInterface::current->glEndPerfMonitorAMD(monitor);
}

void REGAL_CALL gmock_glGenPerfMonitorsAMD(GLsizei n, GLuint *monitors) {
  return RegalGMockInterface::current->glGenPerfMonitorsAMD(n, monitors);
}

void REGAL_CALL gmock_glGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten) {
  return RegalGMockInterface::current->glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten);
}

void REGAL_CALL gmock_glGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, GLvoid *data) {
  return RegalGMockInterface::current->glGetPerfMonitorCounterInfoAMD(group, counter, pname, data);
}

void REGAL_CALL gmock_glGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString) {
  return RegalGMockInterface::current->glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString);
}

void REGAL_CALL gmock_glGetPerfMonitorCountersAMD(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei countersSize, GLuint *counters) {
  return RegalGMockInterface::current->glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, countersSize, counters);
}

void REGAL_CALL gmock_glGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString) {
  return RegalGMockInterface::current->glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString);
}

void REGAL_CALL gmock_glGetPerfMonitorGroupsAMD(GLint *numGroups, GLsizei groupsSize, GLuint *groups) {
  return RegalGMockInterface::current->glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups);
}

void REGAL_CALL gmock_glSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList) {
  return RegalGMockInterface::current->glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList);
}

void REGAL_CALL gmock_glSetMultisamplefvAMD(GLenum pname, GLuint index, const GLfloat *val) {
  return RegalGMockInterface::current->glSetMultisamplefvAMD(pname, index, val);
}

void REGAL_CALL gmock_glStencilOpValueAMD(GLenum face, GLuint value) {
  return RegalGMockInterface::current->glStencilOpValueAMD(face, value);
}

void REGAL_CALL gmock_glTessellationFactorAMD(GLfloat factor) {
  return RegalGMockInterface::current->glTessellationFactorAMD(factor);
}

void REGAL_CALL gmock_glTessellationModeAMD(GLenum mode) {
  return RegalGMockInterface::current->glTessellationModeAMD(mode);
}

void REGAL_CALL gmock_glBlitFramebufferANGLE(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  return RegalGMockInterface::current->glBlitFramebufferANGLE(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

void REGAL_CALL gmock_glRenderbufferStorageMultisampleANGLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glRenderbufferStorageMultisampleANGLE(target, samples, internalformat, width, height);
}

void REGAL_CALL gmock_glDrawArraysInstancedANGLE(GLenum mode, GLint first, GLsizei count, GLsizei primcount) {
  return RegalGMockInterface::current->glDrawArraysInstancedANGLE(mode, first, count, primcount);
}

void REGAL_CALL gmock_glDrawElementsInstancedANGLE(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount) {
  return RegalGMockInterface::current->glDrawElementsInstancedANGLE(mode, count, type, indices, primcount);
}

void REGAL_CALL gmock_glVertexAttribDivisorANGLE(GLuint index, GLuint divisor) {
  return RegalGMockInterface::current->glVertexAttribDivisorANGLE(index, divisor);
}

void REGAL_CALL gmock_glGetTranslatedShaderSourceANGLE(GLuint shader, GLsizei bufsize, GLsizei *length, GLchar *source) {
  return RegalGMockInterface::current->glGetTranslatedShaderSourceANGLE(shader, bufsize, length, source);
}

void REGAL_CALL gmock_glCopyTextureLevelsAPPLE(GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount) {
  return RegalGMockInterface::current->glCopyTextureLevelsAPPLE(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount);
}

void REGAL_CALL gmock_glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count) {
  return RegalGMockInterface::current->glDrawElementArrayAPPLE(mode, first, count);
}

void REGAL_CALL gmock_glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count) {
  return RegalGMockInterface::current->glDrawRangeElementArrayAPPLE(mode, start, end, first, count);
}

void REGAL_CALL gmock_glElementPointerAPPLE(GLenum type, const GLvoid *pointer) {
  return RegalGMockInterface::current->glElementPointerAPPLE(type, pointer);
}

void REGAL_CALL gmock_glMultiDrawElementArrayAPPLE(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount) {
  return RegalGMockInterface::current->glMultiDrawElementArrayAPPLE(mode, first, count, primcount);
}

void REGAL_CALL gmock_glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount) {
  return RegalGMockInterface::current->glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount);
}

void REGAL_CALL gmock_glDeleteFencesAPPLE(GLsizei n, const GLuint *fences) {
  return RegalGMockInterface::current->glDeleteFencesAPPLE(n, fences);
}

void REGAL_CALL gmock_glFinishFenceAPPLE(GLuint fence) {
  return RegalGMockInterface::current->glFinishFenceAPPLE(fence);
}

void REGAL_CALL gmock_glFinishObjectAPPLE(GLenum object, GLint name) {
  return RegalGMockInterface::current->glFinishObjectAPPLE(object, name);
}

void REGAL_CALL gmock_glGenFencesAPPLE(GLsizei n, GLuint *fences) {
  return RegalGMockInterface::current->glGenFencesAPPLE(n, fences);
}

GLboolean REGAL_CALL gmock_glIsFenceAPPLE(GLuint fence) {
  return RegalGMockInterface::current->glIsFenceAPPLE(fence);
}

void REGAL_CALL gmock_glSetFenceAPPLE(GLuint fence) {
  return RegalGMockInterface::current->glSetFenceAPPLE(fence);
}

GLboolean REGAL_CALL gmock_glTestFenceAPPLE(GLuint fence) {
  return RegalGMockInterface::current->glTestFenceAPPLE(fence);
}

GLboolean REGAL_CALL gmock_glTestObjectAPPLE(GLenum object, GLuint name) {
  return RegalGMockInterface::current->glTestObjectAPPLE(object, name);
}

void REGAL_CALL gmock_glBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param) {
  return RegalGMockInterface::current->glBufferParameteriAPPLE(target, pname, param);
}

void REGAL_CALL gmock_glFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size) {
  return RegalGMockInterface::current->glFlushMappedBufferRangeAPPLE(target, offset, size);
}

void REGAL_CALL gmock_glFinishRenderAPPLE(void) {
  return RegalGMockInterface::current->glFinishRenderAPPLE();
}

void REGAL_CALL gmock_glFlushRenderAPPLE(void) {
  return RegalGMockInterface::current->glFlushRenderAPPLE();
}

void REGAL_CALL gmock_glSwapAPPLE(void) {
  return RegalGMockInterface::current->glSwapAPPLE();
}

void REGAL_CALL gmock_glRenderbufferStorageMultisampleAPPLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glRenderbufferStorageMultisampleAPPLE(target, samples, internalformat, width, height);
}

void REGAL_CALL gmock_glResolveMultisampleFramebufferAPPLE(void) {
  return RegalGMockInterface::current->glResolveMultisampleFramebufferAPPLE();
}

void REGAL_CALL gmock_glGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetObjectParameterivAPPLE(objectType, name, pname, params);
}

GLenum REGAL_CALL gmock_glObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option) {
  return RegalGMockInterface::current->glObjectPurgeableAPPLE(objectType, name, option);
}

GLenum REGAL_CALL gmock_glObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option) {
  return RegalGMockInterface::current->glObjectUnpurgeableAPPLE(objectType, name, option);
}

GLenum REGAL_CALL gmock_glClientWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout) {
  return RegalGMockInterface::current->glClientWaitSyncAPPLE(sync, flags, timeout);
}

void REGAL_CALL gmock_glDeleteSyncAPPLE(GLsync sync) {
  return RegalGMockInterface::current->glDeleteSyncAPPLE(sync);
}

GLsync REGAL_CALL gmock_glFenceSyncAPPLE(GLenum condition, GLbitfield flags) {
  return RegalGMockInterface::current->glFenceSyncAPPLE(condition, flags);
}

void REGAL_CALL gmock_glGetInteger64vAPPLE(GLenum pname, GLint64 *params) {
  return RegalGMockInterface::current->glGetInteger64vAPPLE(pname, params);
}

void REGAL_CALL gmock_glGetSyncivAPPLE(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values) {
  return RegalGMockInterface::current->glGetSyncivAPPLE(sync, pname, bufSize, length, values);
}

GLboolean REGAL_CALL gmock_glIsSyncAPPLE(GLsync sync) {
  return RegalGMockInterface::current->glIsSyncAPPLE(sync);
}

void REGAL_CALL gmock_glWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout) {
  return RegalGMockInterface::current->glWaitSyncAPPLE(sync, flags, timeout);
}

void REGAL_CALL gmock_glGetTexParameterPointervAPPLE(GLenum target, GLenum pname, GLvoid **params) {
  return RegalGMockInterface::current->glGetTexParameterPointervAPPLE(target, pname, params);
}

void REGAL_CALL gmock_glTextureRangeAPPLE(GLenum target, GLsizei length, GLvoid *pointer) {
  return RegalGMockInterface::current->glTextureRangeAPPLE(target, length, pointer);
}

void REGAL_CALL gmock_glBindVertexArrayAPPLE(GLuint array) {
  return RegalGMockInterface::current->glBindVertexArrayAPPLE(array);
}

void REGAL_CALL gmock_glDeleteVertexArraysAPPLE(GLsizei n, const GLuint *arrays) {
  return RegalGMockInterface::current->glDeleteVertexArraysAPPLE(n, arrays);
}

void REGAL_CALL gmock_glGenVertexArraysAPPLE(GLsizei n, const GLuint *arrays) {
  return RegalGMockInterface::current->glGenVertexArraysAPPLE(n, arrays);
}

GLboolean REGAL_CALL gmock_glIsVertexArrayAPPLE(GLuint array) {
  return RegalGMockInterface::current->glIsVertexArrayAPPLE(array);
}

void REGAL_CALL gmock_glFlushVertexArrayRangeAPPLE(GLsizei length, GLvoid *pointer) {
  return RegalGMockInterface::current->glFlushVertexArrayRangeAPPLE(length, pointer);
}

void REGAL_CALL gmock_glVertexArrayParameteriAPPLE(GLenum pname, GLint param) {
  return RegalGMockInterface::current->glVertexArrayParameteriAPPLE(pname, param);
}

void REGAL_CALL gmock_glVertexArrayRangeAPPLE(GLsizei length, GLvoid *pointer) {
  return RegalGMockInterface::current->glVertexArrayRangeAPPLE(length, pointer);
}

void REGAL_CALL gmock_glDisableVertexAttribAPPLE(GLuint index, GLenum pname) {
  return RegalGMockInterface::current->glDisableVertexAttribAPPLE(index, pname);
}

void REGAL_CALL gmock_glEnableVertexAttribAPPLE(GLuint index, GLenum pname) {
  return RegalGMockInterface::current->glEnableVertexAttribAPPLE(index, pname);
}

GLboolean REGAL_CALL gmock_glIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname) {
  return RegalGMockInterface::current->glIsVertexAttribEnabledAPPLE(index, pname);
}

void REGAL_CALL gmock_glMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points) {
  return RegalGMockInterface::current->glMapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points);
}

void REGAL_CALL gmock_glMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points) {
  return RegalGMockInterface::current->glMapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points);
}

void REGAL_CALL gmock_glMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points) {
  // glMapVertexAttrib2dAPPLE has too many arguments for GMock.
}

void REGAL_CALL gmock_glMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points) {
  // glMapVertexAttrib2fAPPLE has too many arguments for GMock.
}

void REGAL_CALL gmock_glClearDepthf(GLclampf d) {
  return RegalGMockInterface::current->glClearDepthf(d);
}

void REGAL_CALL gmock_glDepthRangef(GLclampf n, GLclampf f) {
  return RegalGMockInterface::current->glDepthRangef(n, f);
}

void REGAL_CALL gmock_glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision) {
  return RegalGMockInterface::current->glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision);
}

void REGAL_CALL gmock_glReleaseShaderCompiler(void) {
  return RegalGMockInterface::current->glReleaseShaderCompiler();
}

void REGAL_CALL gmock_glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length) {
  return RegalGMockInterface::current->glShaderBinary(count, shaders, binaryformat, binary, length);
}

void REGAL_CALL gmock_glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei primcount, GLuint baseinstance) {
  return RegalGMockInterface::current->glDrawArraysInstancedBaseInstance(mode, first, count, primcount, baseinstance);
}

void REGAL_CALL gmock_glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLuint baseinstance) {
  return RegalGMockInterface::current->glDrawElementsInstancedBaseInstance(mode, count, type, indices, primcount, baseinstance);
}

void REGAL_CALL gmock_glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex, GLuint baseinstance) {
  return RegalGMockInterface::current->glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, primcount, basevertex, baseinstance);
}

void REGAL_CALL gmock_glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name) {
  return RegalGMockInterface::current->glBindFragDataLocationIndexed(program, colorNumber, index, name);
}

GLint REGAL_CALL gmock_glGetFragDataIndex(GLuint program, const GLchar *name) {
  return RegalGMockInterface::current->glGetFragDataIndex(program, name);
}

GLsync REGAL_CALL gmock_glCreateSyncFromCLeventARB(cl_context context, cl_event event, GLbitfield flags) {
  return RegalGMockInterface::current->glCreateSyncFromCLeventARB(context, event, flags);
}

void REGAL_CALL gmock_glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data) {
  return RegalGMockInterface::current->glClearBufferData(target, internalformat, format, type, data);
}

void REGAL_CALL gmock_glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data) {
  return RegalGMockInterface::current->glClearBufferSubData(target, internalformat, offset, size, format, type, data);
}

void REGAL_CALL gmock_glClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data) {
  return RegalGMockInterface::current->glClearNamedBufferDataEXT(buffer, internalformat, format, type, data);
}

void REGAL_CALL gmock_glClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data) {
  return RegalGMockInterface::current->glClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data);
}

void REGAL_CALL gmock_glClampColorARB(GLenum target, GLenum clamp) {
  return RegalGMockInterface::current->glClampColorARB(target, clamp);
}

void REGAL_CALL gmock_glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) {
  return RegalGMockInterface::current->glDispatchCompute(num_groups_x, num_groups_y, num_groups_z);
}

void REGAL_CALL gmock_glDispatchComputeIndirect(GLintptr indirect) {
  return RegalGMockInterface::current->glDispatchComputeIndirect(indirect);
}

void REGAL_CALL gmock_glCopyBufferSubData(GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size) {
  return RegalGMockInterface::current->glCopyBufferSubData(readtarget, writetarget, readoffset, writeoffset, size);
}

void REGAL_CALL gmock_glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) {
  // glCopyImageSubData has too many arguments for GMock.
}

void REGAL_CALL gmock_glDebugMessageCallbackARB(GLDEBUGPROCARB callback, GLvoid *userParam) {
  return RegalGMockInterface::current->glDebugMessageCallbackARB(callback, userParam);
}

void REGAL_CALL gmock_glDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) {
  return RegalGMockInterface::current->glDebugMessageControlARB(source, type, severity, count, ids, enabled);
}

void REGAL_CALL gmock_glDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf) {
  return RegalGMockInterface::current->glDebugMessageInsertARB(source, type, id, severity, length, buf);
}

GLuint REGAL_CALL gmock_glGetDebugMessageLogARB(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) {
  return RegalGMockInterface::current->glGetDebugMessageLogARB(count, bufsize, sources, types, ids, severities, lengths, messageLog);
}

void REGAL_CALL gmock_glDrawBuffersARB(GLsizei n, const GLenum *bufs) {
  return RegalGMockInterface::current->glDrawBuffersARB(n, bufs);
}

void REGAL_CALL gmock_glBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha) {
  return RegalGMockInterface::current->glBlendEquationSeparateiARB(buf, modeRGB, modeAlpha);
}

void REGAL_CALL gmock_glBlendEquationiARB(GLuint buf, GLenum mode) {
  return RegalGMockInterface::current->glBlendEquationiARB(buf, mode);
}

void REGAL_CALL gmock_glBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) {
  return RegalGMockInterface::current->glBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}

void REGAL_CALL gmock_glBlendFunciARB(GLuint buf, GLenum src, GLenum dst) {
  return RegalGMockInterface::current->glBlendFunciARB(buf, src, dst);
}

void REGAL_CALL gmock_glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, GLvoid *indices, GLint basevertex) {
  return RegalGMockInterface::current->glDrawElementsBaseVertex(mode, count, type, indices, basevertex);
}

void REGAL_CALL gmock_glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex) {
  return RegalGMockInterface::current->glDrawElementsInstancedBaseVertex(mode, count, type, indices, primcount, basevertex);
}

void REGAL_CALL gmock_glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, GLvoid *indices, GLint basevertex) {
  return RegalGMockInterface::current->glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);
}

void REGAL_CALL gmock_glMultiDrawElementsBaseVertex(GLenum mode, GLsizei *count, GLenum type, GLvoid **indices, GLsizei primcount, GLint *basevertex) {
  return RegalGMockInterface::current->glMultiDrawElementsBaseVertex(mode, count, type, indices, primcount, basevertex);
}

void REGAL_CALL gmock_glDrawArraysIndirect(GLenum mode, const GLvoid *indirect) {
  return RegalGMockInterface::current->glDrawArraysIndirect(mode, indirect);
}

void REGAL_CALL gmock_glDrawElementsIndirect(GLenum mode, GLenum type, const GLvoid *indirect) {
  return RegalGMockInterface::current->glDrawElementsIndirect(mode, type, indirect);
}

void REGAL_CALL gmock_glDrawArraysInstancedARB(GLenum mode, GLint start, GLsizei count, GLsizei primcount) {
  return RegalGMockInterface::current->glDrawArraysInstancedARB(mode, start, count, primcount);
}

void REGAL_CALL gmock_glDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount) {
  return RegalGMockInterface::current->glDrawElementsInstancedARB(mode, count, type, indices, primcount);
}

void REGAL_CALL gmock_glFramebufferParameteri(GLenum target, GLenum pname, GLint param) {
  return RegalGMockInterface::current->glFramebufferParameteri(target, pname, param);
}

void REGAL_CALL gmock_glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetFramebufferParameteriv(target, pname, params);
}

void REGAL_CALL gmock_glGetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetNamedFramebufferParameterivEXT(framebuffer, pname, params);
}

void REGAL_CALL gmock_glNamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param) {
  return RegalGMockInterface::current->glNamedFramebufferParameteriEXT(framebuffer, pname, param);
}

void REGAL_CALL gmock_glBindFramebuffer(GLenum target, GLuint framebuffer) {
  return RegalGMockInterface::current->glBindFramebuffer(target, framebuffer);
}

void REGAL_CALL gmock_glBindRenderbuffer(GLenum target, GLuint renderbuffer) {
  return RegalGMockInterface::current->glBindRenderbuffer(target, renderbuffer);
}

void REGAL_CALL gmock_glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  return RegalGMockInterface::current->glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

GLenum REGAL_CALL gmock_glCheckFramebufferStatus(GLenum target) {
  return RegalGMockInterface::current->glCheckFramebufferStatus(target);
}

void REGAL_CALL gmock_glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers) {
  return RegalGMockInterface::current->glDeleteFramebuffers(n, framebuffers);
}

void REGAL_CALL gmock_glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers) {
  return RegalGMockInterface::current->glDeleteRenderbuffers(n, renderbuffers);
}

void REGAL_CALL gmock_glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
  return RegalGMockInterface::current->glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
}

void REGAL_CALL gmock_glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  return RegalGMockInterface::current->glFramebufferTexture1D(target, attachment, textarget, texture, level);
}

void REGAL_CALL gmock_glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  return RegalGMockInterface::current->glFramebufferTexture2D(target, attachment, textarget, texture, level);
}

void REGAL_CALL gmock_glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer) {
  return RegalGMockInterface::current->glFramebufferTexture3D(target, attachment, textarget, texture, level, layer);
}

void REGAL_CALL gmock_glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {
  return RegalGMockInterface::current->glFramebufferTextureLayer(target, attachment, texture, level, layer);
}

void REGAL_CALL gmock_glGenFramebuffers(GLsizei n, GLuint *framebuffers) {
  return RegalGMockInterface::current->glGenFramebuffers(n, framebuffers);
}

void REGAL_CALL gmock_glGenRenderbuffers(GLsizei n, GLuint *renderbuffers) {
  return RegalGMockInterface::current->glGenRenderbuffers(n, renderbuffers);
}

void REGAL_CALL gmock_glGenerateMipmap(GLenum target) {
  return RegalGMockInterface::current->glGenerateMipmap(target);
}

void REGAL_CALL gmock_glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetFramebufferAttachmentParameteriv(target, attachment, pname, params);
}

void REGAL_CALL gmock_glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetRenderbufferParameteriv(target, pname, params);
}

GLboolean REGAL_CALL gmock_glIsFramebuffer(GLuint framebuffer) {
  return RegalGMockInterface::current->glIsFramebuffer(framebuffer);
}

GLboolean REGAL_CALL gmock_glIsRenderbuffer(GLuint renderbuffer) {
  return RegalGMockInterface::current->glIsRenderbuffer(renderbuffer);
}

void REGAL_CALL gmock_glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glRenderbufferStorage(target, internalformat, width, height);
}

void REGAL_CALL gmock_glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glRenderbufferStorageMultisample(target, samples, internalformat, width, height);
}

void REGAL_CALL gmock_glFramebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level) {
  return RegalGMockInterface::current->glFramebufferTextureARB(target, attachment, texture, level);
}

void REGAL_CALL gmock_glFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) {
  return RegalGMockInterface::current->glFramebufferTextureFaceARB(target, attachment, texture, level, face);
}

void REGAL_CALL gmock_glFramebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {
  return RegalGMockInterface::current->glFramebufferTextureLayerARB(target, attachment, texture, level, layer);
}

void REGAL_CALL gmock_glProgramParameteriARB(GLuint program, GLenum pname, GLint value) {
  return RegalGMockInterface::current->glProgramParameteriARB(program, pname, value);
}

void REGAL_CALL gmock_glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary) {
  return RegalGMockInterface::current->glGetProgramBinary(program, bufSize, length, binaryFormat, binary);
}

void REGAL_CALL gmock_glProgramBinary(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length) {
  return RegalGMockInterface::current->glProgramBinary(program, binaryFormat, binary, length);
}

void REGAL_CALL gmock_glProgramParameteri(GLuint program, GLenum pname, GLint value) {
  return RegalGMockInterface::current->glProgramParameteri(program, pname, value);
}

void REGAL_CALL gmock_glGetUniformdv(GLuint program, GLint location, GLdouble *params) {
  return RegalGMockInterface::current->glGetUniformdv(program, location, params);
}

void REGAL_CALL gmock_glUniform1d(GLint location, GLdouble x) {
  return RegalGMockInterface::current->glUniform1d(location, x);
}

void REGAL_CALL gmock_glUniform1dv(GLint location, GLsizei count, const GLdouble *value) {
  return RegalGMockInterface::current->glUniform1dv(location, count, value);
}

void REGAL_CALL gmock_glUniform2d(GLint location, GLdouble x, GLdouble y) {
  return RegalGMockInterface::current->glUniform2d(location, x, y);
}

void REGAL_CALL gmock_glUniform2dv(GLint location, GLsizei count, const GLdouble *value) {
  return RegalGMockInterface::current->glUniform2dv(location, count, value);
}

void REGAL_CALL gmock_glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z) {
  return RegalGMockInterface::current->glUniform3d(location, x, y, z);
}

void REGAL_CALL gmock_glUniform3dv(GLint location, GLsizei count, const GLdouble *value) {
  return RegalGMockInterface::current->glUniform3dv(location, count, value);
}

void REGAL_CALL gmock_glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  return RegalGMockInterface::current->glUniform4d(location, x, y, z, w);
}

void REGAL_CALL gmock_glUniform4dv(GLint location, GLsizei count, const GLdouble *value) {
  return RegalGMockInterface::current->glUniform4dv(location, count, value);
}

void REGAL_CALL gmock_glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  return RegalGMockInterface::current->glUniformMatrix2dv(location, count, transpose, value);
}

void REGAL_CALL gmock_glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  return RegalGMockInterface::current->glUniformMatrix2x3dv(location, count, transpose, value);
}

void REGAL_CALL gmock_glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  return RegalGMockInterface::current->glUniformMatrix2x4dv(location, count, transpose, value);
}

void REGAL_CALL gmock_glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  return RegalGMockInterface::current->glUniformMatrix3dv(location, count, transpose, value);
}

void REGAL_CALL gmock_glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  return RegalGMockInterface::current->glUniformMatrix3x2dv(location, count, transpose, value);
}

void REGAL_CALL gmock_glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  return RegalGMockInterface::current->glUniformMatrix3x4dv(location, count, transpose, value);
}

void REGAL_CALL gmock_glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  return RegalGMockInterface::current->glUniformMatrix4dv(location, count, transpose, value);
}

void REGAL_CALL gmock_glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  return RegalGMockInterface::current->glUniformMatrix4x2dv(location, count, transpose, value);
}

void REGAL_CALL gmock_glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  return RegalGMockInterface::current->glUniformMatrix4x3dv(location, count, transpose, value);
}

void REGAL_CALL gmock_glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data) {
  return RegalGMockInterface::current->glColorSubTable(target, start, count, format, type, data);
}

void REGAL_CALL gmock_glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table) {
  return RegalGMockInterface::current->glColorTable(target, internalformat, width, format, type, table);
}

void REGAL_CALL gmock_glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glColorTableParameterfv(target, pname, params);
}

void REGAL_CALL gmock_glColorTableParameteriv(GLenum target, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glColorTableParameteriv(target, pname, params);
}

void REGAL_CALL gmock_glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image) {
  return RegalGMockInterface::current->glConvolutionFilter1D(target, internalformat, width, format, type, image);
}

void REGAL_CALL gmock_glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image) {
  return RegalGMockInterface::current->glConvolutionFilter2D(target, internalformat, width, height, format, type, image);
}

void REGAL_CALL gmock_glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params) {
  return RegalGMockInterface::current->glConvolutionParameterf(target, pname, params);
}

void REGAL_CALL gmock_glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glConvolutionParameterfv(target, pname, params);
}

void REGAL_CALL gmock_glConvolutionParameteri(GLenum target, GLenum pname, GLint params) {
  return RegalGMockInterface::current->glConvolutionParameteri(target, pname, params);
}

void REGAL_CALL gmock_glConvolutionParameteriv(GLenum target, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glConvolutionParameteriv(target, pname, params);
}

void REGAL_CALL gmock_glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) {
  return RegalGMockInterface::current->glCopyColorSubTable(target, start, x, y, width);
}

void REGAL_CALL gmock_glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) {
  return RegalGMockInterface::current->glCopyColorTable(target, internalformat, x, y, width);
}

void REGAL_CALL gmock_glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) {
  return RegalGMockInterface::current->glCopyConvolutionFilter1D(target, internalformat, x, y, width);
}

void REGAL_CALL gmock_glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glCopyConvolutionFilter2D(target, internalformat, x, y, width, height);
}

void REGAL_CALL gmock_glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid *table) {
  return RegalGMockInterface::current->glGetColorTable(target, format, type, table);
}

void REGAL_CALL gmock_glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetColorTableParameterfv(target, pname, params);
}

void REGAL_CALL gmock_glGetColorTableParameteriv(GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetColorTableParameteriv(target, pname, params);
}

void REGAL_CALL gmock_glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid *image) {
  return RegalGMockInterface::current->glGetConvolutionFilter(target, format, type, image);
}

void REGAL_CALL gmock_glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetConvolutionParameterfv(target, pname, params);
}

void REGAL_CALL gmock_glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetConvolutionParameteriv(target, pname, params);
}

void REGAL_CALL gmock_glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values) {
  return RegalGMockInterface::current->glGetHistogram(target, reset, format, type, values);
}

void REGAL_CALL gmock_glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetHistogramParameterfv(target, pname, params);
}

void REGAL_CALL gmock_glGetHistogramParameteriv(GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetHistogramParameteriv(target, pname, params);
}

void REGAL_CALL gmock_glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values) {
  return RegalGMockInterface::current->glGetMinmax(target, reset, format, types, values);
}

void REGAL_CALL gmock_glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetMinmaxParameterfv(target, pname, params);
}

void REGAL_CALL gmock_glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetMinmaxParameteriv(target, pname, params);
}

void REGAL_CALL gmock_glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span) {
  return RegalGMockInterface::current->glGetSeparableFilter(target, format, type, row, column, span);
}

void REGAL_CALL gmock_glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) {
  return RegalGMockInterface::current->glHistogram(target, width, internalformat, sink);
}

void REGAL_CALL gmock_glMinmax(GLenum target, GLenum internalformat, GLboolean sink) {
  return RegalGMockInterface::current->glMinmax(target, internalformat, sink);
}

void REGAL_CALL gmock_glResetHistogram(GLenum target) {
  return RegalGMockInterface::current->glResetHistogram(target);
}

void REGAL_CALL gmock_glResetMinmax(GLenum target) {
  return RegalGMockInterface::current->glResetMinmax(target);
}

void REGAL_CALL gmock_glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column) {
  return RegalGMockInterface::current->glSeparableFilter2D(target, internalformat, width, height, format, type, row, column);
}

void REGAL_CALL gmock_glVertexAttribDivisorARB(GLuint index, GLuint divisor) {
  return RegalGMockInterface::current->glVertexAttribDivisorARB(index, divisor);
}

void REGAL_CALL gmock_glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params) {
  return RegalGMockInterface::current->glGetInternalformativ(target, internalformat, pname, bufSize, params);
}

void REGAL_CALL gmock_glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params) {
  return RegalGMockInterface::current->glGetInternalformati64v(target, internalformat, pname, bufSize, params);
}

void REGAL_CALL gmock_glInvalidateBufferData(GLuint buffer) {
  return RegalGMockInterface::current->glInvalidateBufferData(buffer);
}

void REGAL_CALL gmock_glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length) {
  return RegalGMockInterface::current->glInvalidateBufferSubData(buffer, offset, length);
}

void REGAL_CALL gmock_glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments) {
  return RegalGMockInterface::current->glInvalidateFramebuffer(target, numAttachments, attachments);
}

void REGAL_CALL gmock_glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height);
}

void REGAL_CALL gmock_glInvalidateTexImage(GLuint texture, GLint level) {
  return RegalGMockInterface::current->glInvalidateTexImage(texture, level);
}

void REGAL_CALL gmock_glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth) {
  return RegalGMockInterface::current->glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth);
}

void REGAL_CALL gmock_glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length) {
  return RegalGMockInterface::current->glFlushMappedBufferRange(target, offset, length);
}

GLvoid * REGAL_CALL gmock_glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) {
  return RegalGMockInterface::current->glMapBufferRange(target, offset, length, access);
}

void REGAL_CALL gmock_glCurrentPaletteMatrixARB(GLint index) {
  return RegalGMockInterface::current->glCurrentPaletteMatrixARB(index);
}

void REGAL_CALL gmock_glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid *pointer) {
  return RegalGMockInterface::current->glMatrixIndexPointerARB(size, type, stride, pointer);
}

void REGAL_CALL gmock_glMatrixIndexubvARB(GLint size, GLubyte *indices) {
  return RegalGMockInterface::current->glMatrixIndexubvARB(size, indices);
}

void REGAL_CALL gmock_glMatrixIndexuivARB(GLint size, GLuint *indices) {
  return RegalGMockInterface::current->glMatrixIndexuivARB(size, indices);
}

void REGAL_CALL gmock_glMatrixIndexusvARB(GLint size, GLushort *indices) {
  return RegalGMockInterface::current->glMatrixIndexusvARB(size, indices);
}

void REGAL_CALL gmock_glMultiDrawArraysIndirect(GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride) {
  return RegalGMockInterface::current->glMultiDrawArraysIndirect(mode, indirect, primcount, stride);
}

void REGAL_CALL gmock_glMultiDrawElementsIndirect(GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride) {
  return RegalGMockInterface::current->glMultiDrawElementsIndirect(mode, type, indirect, primcount, stride);
}

void REGAL_CALL gmock_glSampleCoverageARB(GLclampf value, GLboolean invert) {
  return RegalGMockInterface::current->glSampleCoverageARB(value, invert);
}

void REGAL_CALL gmock_glActiveTextureARB(GLenum texture) {
  return RegalGMockInterface::current->glActiveTextureARB(texture);
}

void REGAL_CALL gmock_glClientActiveTextureARB(GLenum texture) {
  return RegalGMockInterface::current->glClientActiveTextureARB(texture);
}

void REGAL_CALL gmock_glMultiTexCoord1dARB(GLenum target, GLdouble s) {
  return RegalGMockInterface::current->glMultiTexCoord1dARB(target, s);
}

void REGAL_CALL gmock_glMultiTexCoord1dvARB(GLenum target, const GLdouble *v) {
  return RegalGMockInterface::current->glMultiTexCoord1dvARB(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord1fARB(GLenum target, GLfloat s) {
  return RegalGMockInterface::current->glMultiTexCoord1fARB(target, s);
}

void REGAL_CALL gmock_glMultiTexCoord1fvARB(GLenum target, const GLfloat *v) {
  return RegalGMockInterface::current->glMultiTexCoord1fvARB(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord1iARB(GLenum target, GLint s) {
  return RegalGMockInterface::current->glMultiTexCoord1iARB(target, s);
}

void REGAL_CALL gmock_glMultiTexCoord1ivARB(GLenum target, const GLint *v) {
  return RegalGMockInterface::current->glMultiTexCoord1ivARB(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord1sARB(GLenum target, GLshort s) {
  return RegalGMockInterface::current->glMultiTexCoord1sARB(target, s);
}

void REGAL_CALL gmock_glMultiTexCoord1svARB(GLenum target, const GLshort *v) {
  return RegalGMockInterface::current->glMultiTexCoord1svARB(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t) {
  return RegalGMockInterface::current->glMultiTexCoord2dARB(target, s, t);
}

void REGAL_CALL gmock_glMultiTexCoord2dvARB(GLenum target, const GLdouble *v) {
  return RegalGMockInterface::current->glMultiTexCoord2dvARB(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t) {
  return RegalGMockInterface::current->glMultiTexCoord2fARB(target, s, t);
}

void REGAL_CALL gmock_glMultiTexCoord2fvARB(GLenum target, const GLfloat *v) {
  return RegalGMockInterface::current->glMultiTexCoord2fvARB(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord2iARB(GLenum target, GLint s, GLint t) {
  return RegalGMockInterface::current->glMultiTexCoord2iARB(target, s, t);
}

void REGAL_CALL gmock_glMultiTexCoord2ivARB(GLenum target, const GLint *v) {
  return RegalGMockInterface::current->glMultiTexCoord2ivARB(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t) {
  return RegalGMockInterface::current->glMultiTexCoord2sARB(target, s, t);
}

void REGAL_CALL gmock_glMultiTexCoord2svARB(GLenum target, const GLshort *v) {
  return RegalGMockInterface::current->glMultiTexCoord2svARB(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r) {
  return RegalGMockInterface::current->glMultiTexCoord3dARB(target, s, t, r);
}

void REGAL_CALL gmock_glMultiTexCoord3dvARB(GLenum target, const GLdouble *v) {
  return RegalGMockInterface::current->glMultiTexCoord3dvARB(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r) {
  return RegalGMockInterface::current->glMultiTexCoord3fARB(target, s, t, r);
}

void REGAL_CALL gmock_glMultiTexCoord3fvARB(GLenum target, const GLfloat *v) {
  return RegalGMockInterface::current->glMultiTexCoord3fvARB(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r) {
  return RegalGMockInterface::current->glMultiTexCoord3iARB(target, s, t, r);
}

void REGAL_CALL gmock_glMultiTexCoord3ivARB(GLenum target, const GLint *v) {
  return RegalGMockInterface::current->glMultiTexCoord3ivARB(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r) {
  return RegalGMockInterface::current->glMultiTexCoord3sARB(target, s, t, r);
}

void REGAL_CALL gmock_glMultiTexCoord3svARB(GLenum target, const GLshort *v) {
  return RegalGMockInterface::current->glMultiTexCoord3svARB(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
  return RegalGMockInterface::current->glMultiTexCoord4dARB(target, s, t, r, q);
}

void REGAL_CALL gmock_glMultiTexCoord4dvARB(GLenum target, const GLdouble *v) {
  return RegalGMockInterface::current->glMultiTexCoord4dvARB(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
  return RegalGMockInterface::current->glMultiTexCoord4fARB(target, s, t, r, q);
}

void REGAL_CALL gmock_glMultiTexCoord4fvARB(GLenum target, const GLfloat *v) {
  return RegalGMockInterface::current->glMultiTexCoord4fvARB(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q) {
  return RegalGMockInterface::current->glMultiTexCoord4iARB(target, s, t, r, q);
}

void REGAL_CALL gmock_glMultiTexCoord4ivARB(GLenum target, const GLint *v) {
  return RegalGMockInterface::current->glMultiTexCoord4ivARB(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) {
  return RegalGMockInterface::current->glMultiTexCoord4sARB(target, s, t, r, q);
}

void REGAL_CALL gmock_glMultiTexCoord4svARB(GLenum target, const GLshort *v) {
  return RegalGMockInterface::current->glMultiTexCoord4svARB(target, v);
}

void REGAL_CALL gmock_glBeginQueryARB(GLenum target, GLuint id) {
  return RegalGMockInterface::current->glBeginQueryARB(target, id);
}

void REGAL_CALL gmock_glDeleteQueriesARB(GLsizei n, const GLuint *ids) {
  return RegalGMockInterface::current->glDeleteQueriesARB(n, ids);
}

void REGAL_CALL gmock_glEndQueryARB(GLenum target) {
  return RegalGMockInterface::current->glEndQueryARB(target);
}

void REGAL_CALL gmock_glGenQueriesARB(GLsizei n, GLuint *ids) {
  return RegalGMockInterface::current->glGenQueriesARB(n, ids);
}

void REGAL_CALL gmock_glGetQueryObjectivARB(GLuint id, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetQueryObjectivARB(id, pname, params);
}

void REGAL_CALL gmock_glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint *params) {
  return RegalGMockInterface::current->glGetQueryObjectuivARB(id, pname, params);
}

void REGAL_CALL gmock_glGetQueryivARB(GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetQueryivARB(target, pname, params);
}

GLboolean REGAL_CALL gmock_glIsQueryARB(GLuint id) {
  return RegalGMockInterface::current->glIsQueryARB(id);
}

void REGAL_CALL gmock_glPointParameterfARB(GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glPointParameterfARB(pname, param);
}

void REGAL_CALL gmock_glPointParameterfvARB(GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glPointParameterfvARB(pname, params);
}

void REGAL_CALL gmock_glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetProgramInterfaceiv(program, programInterface, pname, params);
}

GLuint REGAL_CALL gmock_glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name) {
  return RegalGMockInterface::current->glGetProgramResourceIndex(program, programInterface, name);
}

GLint REGAL_CALL gmock_glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name) {
  return RegalGMockInterface::current->glGetProgramResourceLocation(program, programInterface, name);
}

GLint REGAL_CALL gmock_glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name) {
  return RegalGMockInterface::current->glGetProgramResourceLocationIndex(program, programInterface, name);
}

void REGAL_CALL gmock_glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name) {
  return RegalGMockInterface::current->glGetProgramResourceName(program, programInterface, index, bufSize, length, name);
}

void REGAL_CALL gmock_glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params) {
  return RegalGMockInterface::current->glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params);
}

void REGAL_CALL gmock_glProvokingVertex(GLenum mode) {
  return RegalGMockInterface::current->glProvokingVertex(mode);
}

GLenum REGAL_CALL gmock_glGetGraphicsResetStatusARB(void) {
  return RegalGMockInterface::current->glGetGraphicsResetStatusARB();
}

void REGAL_CALL gmock_glGetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table) {
  return RegalGMockInterface::current->glGetnColorTableARB(target, format, type, bufSize, table);
}

void REGAL_CALL gmock_glGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, GLvoid *img) {
  return RegalGMockInterface::current->glGetnCompressedTexImageARB(target, lod, bufSize, img);
}

void REGAL_CALL gmock_glGetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image) {
  return RegalGMockInterface::current->glGetnConvolutionFilterARB(target, format, type, bufSize, image);
}

void REGAL_CALL gmock_glGetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values) {
  return RegalGMockInterface::current->glGetnHistogramARB(target, reset, format, type, bufSize, values);
}

void REGAL_CALL gmock_glGetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v) {
  return RegalGMockInterface::current->glGetnMapdvARB(target, query, bufSize, v);
}

void REGAL_CALL gmock_glGetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v) {
  return RegalGMockInterface::current->glGetnMapfvARB(target, query, bufSize, v);
}

void REGAL_CALL gmock_glGetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint *v) {
  return RegalGMockInterface::current->glGetnMapivARB(target, query, bufSize, v);
}

void REGAL_CALL gmock_glGetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values) {
  return RegalGMockInterface::current->glGetnMinmaxARB(target, reset, format, type, bufSize, values);
}

void REGAL_CALL gmock_glGetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat *values) {
  return RegalGMockInterface::current->glGetnPixelMapfvARB(map, bufSize, values);
}

void REGAL_CALL gmock_glGetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint *values) {
  return RegalGMockInterface::current->glGetnPixelMapuivARB(map, bufSize, values);
}

void REGAL_CALL gmock_glGetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort *values) {
  return RegalGMockInterface::current->glGetnPixelMapusvARB(map, bufSize, values);
}

void REGAL_CALL gmock_glGetnPolygonStippleARB(GLsizei bufSize, GLubyte *pattern) {
  return RegalGMockInterface::current->glGetnPolygonStippleARB(bufSize, pattern);
}

void REGAL_CALL gmock_glGetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span) {
  return RegalGMockInterface::current->glGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, span);
}

void REGAL_CALL gmock_glGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img) {
  return RegalGMockInterface::current->glGetnTexImageARB(target, level, format, type, bufSize, img);
}

void REGAL_CALL gmock_glGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble *params) {
  return RegalGMockInterface::current->glGetnUniformdvARB(program, location, bufSize, params);
}

void REGAL_CALL gmock_glGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat *params) {
  return RegalGMockInterface::current->glGetnUniformfvARB(program, location, bufSize, params);
}

void REGAL_CALL gmock_glGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint *params) {
  return RegalGMockInterface::current->glGetnUniformivARB(program, location, bufSize, params);
}

void REGAL_CALL gmock_glGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint *params) {
  return RegalGMockInterface::current->glGetnUniformuivARB(program, location, bufSize, params);
}

void REGAL_CALL gmock_glReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data) {
  return RegalGMockInterface::current->glReadnPixelsARB(x, y, width, height, format, type, bufSize, data);
}

void REGAL_CALL gmock_glMinSampleShading(GLclampf value) {
  return RegalGMockInterface::current->glMinSampleShading(value);
}

void REGAL_CALL gmock_glMinSampleShadingARB(GLclampf value) {
  return RegalGMockInterface::current->glMinSampleShadingARB(value);
}

void REGAL_CALL gmock_glBindSampler(GLuint unit, GLuint sampler) {
  return RegalGMockInterface::current->glBindSampler(unit, sampler);
}

void REGAL_CALL gmock_glDeleteSamplers(GLsizei count, const GLuint *samplers) {
  return RegalGMockInterface::current->glDeleteSamplers(count, samplers);
}

void REGAL_CALL gmock_glGenSamplers(GLsizei count, GLuint *samplers) {
  return RegalGMockInterface::current->glGenSamplers(count, samplers);
}

void REGAL_CALL gmock_glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetSamplerParameterIiv(sampler, pname, params);
}

void REGAL_CALL gmock_glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params) {
  return RegalGMockInterface::current->glGetSamplerParameterIuiv(sampler, pname, params);
}

void REGAL_CALL gmock_glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetSamplerParameterfv(sampler, pname, params);
}

void REGAL_CALL gmock_glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetSamplerParameteriv(sampler, pname, params);
}

GLboolean REGAL_CALL gmock_glIsSampler(GLuint sampler) {
  return RegalGMockInterface::current->glIsSampler(sampler);
}

void REGAL_CALL gmock_glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glSamplerParameterIiv(sampler, pname, params);
}

void REGAL_CALL gmock_glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *params) {
  return RegalGMockInterface::current->glSamplerParameterIuiv(sampler, pname, params);
}

void REGAL_CALL gmock_glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glSamplerParameterf(sampler, pname, param);
}

void REGAL_CALL gmock_glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glSamplerParameterfv(sampler, pname, params);
}

void REGAL_CALL gmock_glSamplerParameteri(GLuint sampler, GLenum pname, GLint param) {
  return RegalGMockInterface::current->glSamplerParameteri(sampler, pname, param);
}

void REGAL_CALL gmock_glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glSamplerParameteriv(sampler, pname, params);
}

void REGAL_CALL gmock_glActiveShaderProgram(GLuint pipeline, GLuint program) {
  return RegalGMockInterface::current->glActiveShaderProgram(pipeline, program);
}

void REGAL_CALL gmock_glBindProgramPipeline(GLuint pipeline) {
  return RegalGMockInterface::current->glBindProgramPipeline(pipeline);
}

GLuint REGAL_CALL gmock_glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar **strings) {
  return RegalGMockInterface::current->glCreateShaderProgramv(type, count, strings);
}

void REGAL_CALL gmock_glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines) {
  return RegalGMockInterface::current->glDeleteProgramPipelines(n, pipelines);
}

void REGAL_CALL gmock_glGenProgramPipelines(GLsizei n, GLuint *pipelines) {
  return RegalGMockInterface::current->glGenProgramPipelines(n, pipelines);
}

void REGAL_CALL gmock_glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {
  return RegalGMockInterface::current->glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog);
}

void REGAL_CALL gmock_glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetProgramPipelineiv(pipeline, pname, params);
}

GLboolean REGAL_CALL gmock_glIsProgramPipeline(GLuint pipeline) {
  return RegalGMockInterface::current->glIsProgramPipeline(pipeline);
}

void REGAL_CALL gmock_glProgramUniform1d(GLuint program, GLint location, GLdouble x) {
  return RegalGMockInterface::current->glProgramUniform1d(program, location, x);
}

void REGAL_CALL gmock_glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
  return RegalGMockInterface::current->glProgramUniform1dv(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform1f(GLuint program, GLint location, GLfloat x) {
  return RegalGMockInterface::current->glProgramUniform1f(program, location, x);
}

void REGAL_CALL gmock_glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
  return RegalGMockInterface::current->glProgramUniform1fv(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform1i(GLuint program, GLint location, GLint x) {
  return RegalGMockInterface::current->glProgramUniform1i(program, location, x);
}

void REGAL_CALL gmock_glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value) {
  return RegalGMockInterface::current->glProgramUniform1iv(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform1ui(GLuint program, GLint location, GLuint v0) {
  return RegalGMockInterface::current->glProgramUniform1ui(program, location, v0);
}

void REGAL_CALL gmock_glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {
  return RegalGMockInterface::current->glProgramUniform1uiv(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform2d(GLuint program, GLint location, GLdouble x, GLdouble y) {
  return RegalGMockInterface::current->glProgramUniform2d(program, location, x, y);
}

void REGAL_CALL gmock_glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
  return RegalGMockInterface::current->glProgramUniform2dv(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform2f(GLuint program, GLint location, GLfloat x, GLfloat y) {
  return RegalGMockInterface::current->glProgramUniform2f(program, location, x, y);
}

void REGAL_CALL gmock_glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
  return RegalGMockInterface::current->glProgramUniform2fv(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform2i(GLuint program, GLint location, GLint x, GLint y) {
  return RegalGMockInterface::current->glProgramUniform2i(program, location, x, y);
}

void REGAL_CALL gmock_glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value) {
  return RegalGMockInterface::current->glProgramUniform2iv(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform2ui(GLuint program, GLint location, GLuint x, GLuint y) {
  return RegalGMockInterface::current->glProgramUniform2ui(program, location, x, y);
}

void REGAL_CALL gmock_glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {
  return RegalGMockInterface::current->glProgramUniform2uiv(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform3d(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z) {
  return RegalGMockInterface::current->glProgramUniform3d(program, location, x, y, z);
}

void REGAL_CALL gmock_glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
  return RegalGMockInterface::current->glProgramUniform3dv(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform3f(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glProgramUniform3f(program, location, x, y, z);
}

void REGAL_CALL gmock_glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
  return RegalGMockInterface::current->glProgramUniform3fv(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform3i(GLuint program, GLint location, GLint x, GLint y, GLint z) {
  return RegalGMockInterface::current->glProgramUniform3i(program, location, x, y, z);
}

void REGAL_CALL gmock_glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value) {
  return RegalGMockInterface::current->glProgramUniform3iv(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform3ui(GLuint program, GLint location, GLuint x, GLuint y, GLuint z) {
  return RegalGMockInterface::current->glProgramUniform3ui(program, location, x, y, z);
}

void REGAL_CALL gmock_glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {
  return RegalGMockInterface::current->glProgramUniform3uiv(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform4d(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  return RegalGMockInterface::current->glProgramUniform4d(program, location, x, y, z, w);
}

void REGAL_CALL gmock_glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
  return RegalGMockInterface::current->glProgramUniform4dv(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform4f(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  return RegalGMockInterface::current->glProgramUniform4f(program, location, x, y, z, w);
}

void REGAL_CALL gmock_glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
  return RegalGMockInterface::current->glProgramUniform4fv(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform4i(GLuint program, GLint location, GLint x, GLint y, GLint z, GLint w) {
  return RegalGMockInterface::current->glProgramUniform4i(program, location, x, y, z, w);
}

void REGAL_CALL gmock_glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value) {
  return RegalGMockInterface::current->glProgramUniform4iv(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform4ui(GLuint program, GLint location, GLuint x, GLuint y, GLuint z, GLuint w) {
  return RegalGMockInterface::current->glProgramUniform4ui(program, location, x, y, z, w);
}

void REGAL_CALL gmock_glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value) {
  return RegalGMockInterface::current->glProgramUniform4uiv(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix2dv(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix2fv(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix2x3dv(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix2x3fv(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix2x4dv(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix2x4fv(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix3dv(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix3fv(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix3x2dv(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix3x2fv(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix3x4dv(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix3x4fv(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix4dv(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix4fv(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix4x2dv(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix4x2fv(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix4x3dv(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix4x3fv(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program) {
  return RegalGMockInterface::current->glUseProgramStages(pipeline, stages, program);
}

void REGAL_CALL gmock_glValidateProgramPipeline(GLuint pipeline) {
  return RegalGMockInterface::current->glValidateProgramPipeline(pipeline);
}

void REGAL_CALL gmock_glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params);
}

void REGAL_CALL gmock_glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) {
  return RegalGMockInterface::current->glBindImageTexture(unit, texture, level, layered, layer, access, format);
}

void REGAL_CALL gmock_glMemoryBarrier(GLbitfield barriers) {
  return RegalGMockInterface::current->glMemoryBarrier(barriers);
}

void REGAL_CALL gmock_glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj) {
  return RegalGMockInterface::current->glAttachObjectARB(containerObj, obj);
}

void REGAL_CALL gmock_glCompileShaderARB(GLhandleARB shaderObj) {
  return RegalGMockInterface::current->glCompileShaderARB(shaderObj);
}

GLhandleARB REGAL_CALL gmock_glCreateProgramObjectARB(void) {
  return RegalGMockInterface::current->glCreateProgramObjectARB();
}

GLhandleARB REGAL_CALL gmock_glCreateShaderObjectARB(GLenum shaderType) {
  return RegalGMockInterface::current->glCreateShaderObjectARB(shaderType);
}

void REGAL_CALL gmock_glDeleteObjectARB(GLhandleARB obj) {
  return RegalGMockInterface::current->glDeleteObjectARB(obj);
}

void REGAL_CALL gmock_glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj) {
  return RegalGMockInterface::current->glDetachObjectARB(containerObj, attachedObj);
}

void REGAL_CALL gmock_glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name) {
  return RegalGMockInterface::current->glGetActiveUniformARB(programObj, index, maxLength, length, size, type, name);
}

void REGAL_CALL gmock_glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj) {
  return RegalGMockInterface::current->glGetAttachedObjectsARB(containerObj, maxCount, count, obj);
}

GLhandleARB REGAL_CALL gmock_glGetHandleARB(GLenum pname) {
  return RegalGMockInterface::current->glGetHandleARB(pname);
}

void REGAL_CALL gmock_glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog) {
  return RegalGMockInterface::current->glGetInfoLogARB(obj, maxLength, length, infoLog);
}

void REGAL_CALL gmock_glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetObjectParameterfvARB(obj, pname, params);
}

void REGAL_CALL gmock_glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetObjectParameterivARB(obj, pname, params);
}

void REGAL_CALL gmock_glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source) {
  return RegalGMockInterface::current->glGetShaderSourceARB(obj, maxLength, length, source);
}

GLint REGAL_CALL gmock_glGetUniformLocationARB(GLhandleARB programObj, const GLcharARB *name) {
  return RegalGMockInterface::current->glGetUniformLocationARB(programObj, name);
}

void REGAL_CALL gmock_glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat *params) {
  return RegalGMockInterface::current->glGetUniformfvARB(programObj, location, params);
}

void REGAL_CALL gmock_glGetUniformivARB(GLhandleARB programObj, GLint location, GLint *params) {
  return RegalGMockInterface::current->glGetUniformivARB(programObj, location, params);
}

void REGAL_CALL gmock_glLinkProgramARB(GLhandleARB programObj) {
  return RegalGMockInterface::current->glLinkProgramARB(programObj);
}

void REGAL_CALL gmock_glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length) {
  return RegalGMockInterface::current->glShaderSourceARB(shaderObj, count, string, length);
}

void REGAL_CALL gmock_glUniform1fARB(GLint location, GLfloat v0) {
  return RegalGMockInterface::current->glUniform1fARB(location, v0);
}

void REGAL_CALL gmock_glUniform1fvARB(GLint location, GLsizei count, const GLfloat *value) {
  return RegalGMockInterface::current->glUniform1fvARB(location, count, value);
}

void REGAL_CALL gmock_glUniform1iARB(GLint location, GLint v0) {
  return RegalGMockInterface::current->glUniform1iARB(location, v0);
}

void REGAL_CALL gmock_glUniform1ivARB(GLint location, GLsizei count, const GLint *value) {
  return RegalGMockInterface::current->glUniform1ivARB(location, count, value);
}

void REGAL_CALL gmock_glUniform2fARB(GLint location, GLfloat v0, GLfloat v1) {
  return RegalGMockInterface::current->glUniform2fARB(location, v0, v1);
}

void REGAL_CALL gmock_glUniform2fvARB(GLint location, GLsizei count, const GLfloat *value) {
  return RegalGMockInterface::current->glUniform2fvARB(location, count, value);
}

void REGAL_CALL gmock_glUniform2iARB(GLint location, GLint v0, GLint v1) {
  return RegalGMockInterface::current->glUniform2iARB(location, v0, v1);
}

void REGAL_CALL gmock_glUniform2ivARB(GLint location, GLsizei count, const GLint *value) {
  return RegalGMockInterface::current->glUniform2ivARB(location, count, value);
}

void REGAL_CALL gmock_glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
  return RegalGMockInterface::current->glUniform3fARB(location, v0, v1, v2);
}

void REGAL_CALL gmock_glUniform3fvARB(GLint location, GLsizei count, const GLfloat *value) {
  return RegalGMockInterface::current->glUniform3fvARB(location, count, value);
}

void REGAL_CALL gmock_glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2) {
  return RegalGMockInterface::current->glUniform3iARB(location, v0, v1, v2);
}

void REGAL_CALL gmock_glUniform3ivARB(GLint location, GLsizei count, const GLint *value) {
  return RegalGMockInterface::current->glUniform3ivARB(location, count, value);
}

void REGAL_CALL gmock_glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
  return RegalGMockInterface::current->glUniform4fARB(location, v0, v1, v2, v3);
}

void REGAL_CALL gmock_glUniform4fvARB(GLint location, GLsizei count, const GLfloat *value) {
  return RegalGMockInterface::current->glUniform4fvARB(location, count, value);
}

void REGAL_CALL gmock_glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
  return RegalGMockInterface::current->glUniform4iARB(location, v0, v1, v2, v3);
}

void REGAL_CALL gmock_glUniform4ivARB(GLint location, GLsizei count, const GLint *value) {
  return RegalGMockInterface::current->glUniform4ivARB(location, count, value);
}

void REGAL_CALL gmock_glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glUniformMatrix2fvARB(location, count, transpose, value);
}

void REGAL_CALL gmock_glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glUniformMatrix3fvARB(location, count, transpose, value);
}

void REGAL_CALL gmock_glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glUniformMatrix4fvARB(location, count, transpose, value);
}

void REGAL_CALL gmock_glUseProgramObjectARB(GLhandleARB programObj) {
  return RegalGMockInterface::current->glUseProgramObjectARB(programObj);
}

void REGAL_CALL gmock_glValidateProgramARB(GLhandleARB programObj) {
  return RegalGMockInterface::current->glValidateProgramARB(programObj);
}

void REGAL_CALL gmock_glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding) {
  return RegalGMockInterface::current->glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding);
}

void REGAL_CALL gmock_glGetActiveSubroutineName(GLuint program, GLenum shaderType, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name) {
  return RegalGMockInterface::current->glGetActiveSubroutineName(program, shaderType, index, bufSize, length, name);
}

void REGAL_CALL gmock_glGetActiveSubroutineUniformName(GLuint program, GLenum shaderType, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name) {
  return RegalGMockInterface::current->glGetActiveSubroutineUniformName(program, shaderType, index, bufSize, length, name);
}

void REGAL_CALL gmock_glGetActiveSubroutineUniformiv(GLuint program, GLenum shaderType, GLuint index, GLenum pname, GLint *values) {
  return RegalGMockInterface::current->glGetActiveSubroutineUniformiv(program, shaderType, index, pname, values);
}

void REGAL_CALL gmock_glGetProgramStageiv(GLuint program, GLenum shaderType, GLenum pname, GLint *values) {
  return RegalGMockInterface::current->glGetProgramStageiv(program, shaderType, pname, values);
}

GLuint REGAL_CALL gmock_glGetSubroutineIndex(GLuint program, GLenum shaderType, const GLchar *name) {
  return RegalGMockInterface::current->glGetSubroutineIndex(program, shaderType, name);
}

GLint REGAL_CALL gmock_glGetSubroutineUniformLocation(GLuint program, GLenum shaderType, const GLchar *name) {
  return RegalGMockInterface::current->glGetSubroutineUniformLocation(program, shaderType, name);
}

void REGAL_CALL gmock_glGetUniformSubroutineuiv(GLenum shaderType, GLint location, GLuint *params) {
  return RegalGMockInterface::current->glGetUniformSubroutineuiv(shaderType, location, params);
}

void REGAL_CALL gmock_glUniformSubroutinesuiv(GLenum shaderType, GLsizei count, const GLuint *indices) {
  return RegalGMockInterface::current->glUniformSubroutinesuiv(shaderType, count, indices);
}

void REGAL_CALL gmock_glCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar **path, const GLint *length) {
  return RegalGMockInterface::current->glCompileShaderIncludeARB(shader, count, path, length);
}

void REGAL_CALL gmock_glDeleteNamedStringARB(GLint namelen, const GLchar *name) {
  return RegalGMockInterface::current->glDeleteNamedStringARB(namelen, name);
}

void REGAL_CALL gmock_glGetNamedStringARB(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string) {
  return RegalGMockInterface::current->glGetNamedStringARB(namelen, name, bufSize, stringlen, string);
}

void REGAL_CALL gmock_glGetNamedStringivARB(GLint namelen, const GLchar *name, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetNamedStringivARB(namelen, name, pname, params);
}

GLboolean REGAL_CALL gmock_glIsNamedStringARB(GLint namelen, const GLchar *name) {
  return RegalGMockInterface::current->glIsNamedStringARB(namelen, name);
}

void REGAL_CALL gmock_glNamedStringARB(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string) {
  return RegalGMockInterface::current->glNamedStringARB(type, namelen, name, stringlen, string);
}

GLenum REGAL_CALL gmock_glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) {
  return RegalGMockInterface::current->glClientWaitSync(sync, flags, timeout);
}

void REGAL_CALL gmock_glDeleteSync(GLsync sync) {
  return RegalGMockInterface::current->glDeleteSync(sync);
}

GLsync REGAL_CALL gmock_glFenceSync(GLenum condition, GLbitfield flags) {
  return RegalGMockInterface::current->glFenceSync(condition, flags);
}

void REGAL_CALL gmock_glGetInteger64v(GLenum pname, GLint64 *params) {
  return RegalGMockInterface::current->glGetInteger64v(pname, params);
}

void REGAL_CALL gmock_glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values) {
  return RegalGMockInterface::current->glGetSynciv(sync, pname, bufSize, length, values);
}

GLboolean REGAL_CALL gmock_glIsSync(GLsync sync) {
  return RegalGMockInterface::current->glIsSync(sync);
}

void REGAL_CALL gmock_glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) {
  return RegalGMockInterface::current->glWaitSync(sync, flags, timeout);
}

void REGAL_CALL gmock_glPatchParameterfv(GLenum pname, const GLfloat *values) {
  return RegalGMockInterface::current->glPatchParameterfv(pname, values);
}

void REGAL_CALL gmock_glPatchParameteri(GLenum pname, GLint value) {
  return RegalGMockInterface::current->glPatchParameteri(pname, value);
}

void REGAL_CALL gmock_glTexBufferARB(GLenum target, GLenum internalformat, GLuint buffer) {
  return RegalGMockInterface::current->glTexBufferARB(target, internalformat, buffer);
}

void REGAL_CALL gmock_glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  return RegalGMockInterface::current->glTexBufferRange(target, internalformat, buffer, offset, size);
}

void REGAL_CALL gmock_glTextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  return RegalGMockInterface::current->glTextureBufferRangeEXT(texture, target, internalformat, buffer, offset, size);
}

void REGAL_CALL gmock_glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data) {
  return RegalGMockInterface::current->glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data);
}

void REGAL_CALL gmock_glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data) {
  return RegalGMockInterface::current->glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data);
}

void REGAL_CALL gmock_glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data) {
  return RegalGMockInterface::current->glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data);
}

void REGAL_CALL gmock_glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data) {
  return RegalGMockInterface::current->glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data);
}

void REGAL_CALL gmock_glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data) {
  return RegalGMockInterface::current->glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

void REGAL_CALL gmock_glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data) {
  // glCompressedTexSubImage3DARB has too many arguments for GMock.
}

void REGAL_CALL gmock_glGetCompressedTexImageARB(GLenum target, GLint lod, GLvoid *img) {
  return RegalGMockInterface::current->glGetCompressedTexImageARB(target, lod, img);
}

void REGAL_CALL gmock_glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val) {
  return RegalGMockInterface::current->glGetMultisamplefv(pname, index, val);
}

void REGAL_CALL gmock_glSampleMaski(GLuint index, GLbitfield mask) {
  return RegalGMockInterface::current->glSampleMaski(index, mask);
}

void REGAL_CALL gmock_glTexImage2DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
  return RegalGMockInterface::current->glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
}

void REGAL_CALL gmock_glTexImage3DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
  return RegalGMockInterface::current->glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}

void REGAL_CALL gmock_glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) {
  return RegalGMockInterface::current->glTexStorage1D(target, levels, internalformat, width);
}

void REGAL_CALL gmock_glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glTexStorage2D(target, levels, internalformat, width, height);
}

void REGAL_CALL gmock_glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
  return RegalGMockInterface::current->glTexStorage3D(target, levels, internalformat, width, height, depth);
}

void REGAL_CALL gmock_glTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) {
  return RegalGMockInterface::current->glTextureStorage1DEXT(texture, target, levels, internalformat, width);
}

void REGAL_CALL gmock_glTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glTextureStorage2DEXT(texture, target, levels, internalformat, width, height);
}

void REGAL_CALL gmock_glTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
  return RegalGMockInterface::current->glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth);
}

void REGAL_CALL gmock_glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
  return RegalGMockInterface::current->glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
}

void REGAL_CALL gmock_glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
  return RegalGMockInterface::current->glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}

void REGAL_CALL gmock_glTextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
  return RegalGMockInterface::current->glTextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations);
}

void REGAL_CALL gmock_glTextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) {
  return RegalGMockInterface::current->glTextureStorage3DMultisampleEXT(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
}

void REGAL_CALL gmock_glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) {
  return RegalGMockInterface::current->glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
}

void REGAL_CALL gmock_glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params) {
  return RegalGMockInterface::current->glGetQueryObjecti64v(id, pname, params);
}

void REGAL_CALL gmock_glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params) {
  return RegalGMockInterface::current->glGetQueryObjectui64v(id, pname, params);
}

void REGAL_CALL gmock_glQueryCounter(GLuint id, GLenum target) {
  return RegalGMockInterface::current->glQueryCounter(id, target);
}

void REGAL_CALL gmock_glBindTransformFeedback(GLenum target, GLuint id) {
  return RegalGMockInterface::current->glBindTransformFeedback(target, id);
}

void REGAL_CALL gmock_glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids) {
  return RegalGMockInterface::current->glDeleteTransformFeedbacks(n, ids);
}

void REGAL_CALL gmock_glDrawTransformFeedback(GLenum mode, GLuint name) {
  return RegalGMockInterface::current->glDrawTransformFeedback(mode, name);
}

void REGAL_CALL gmock_glGenTransformFeedbacks(GLsizei n, GLuint *ids) {
  return RegalGMockInterface::current->glGenTransformFeedbacks(n, ids);
}

GLboolean REGAL_CALL gmock_glIsTransformFeedback(GLuint id) {
  return RegalGMockInterface::current->glIsTransformFeedback(id);
}

void REGAL_CALL gmock_glPauseTransformFeedback(void) {
  return RegalGMockInterface::current->glPauseTransformFeedback();
}

void REGAL_CALL gmock_glResumeTransformFeedback(void) {
  return RegalGMockInterface::current->glResumeTransformFeedback();
}

void REGAL_CALL gmock_glBeginQueryIndexed(GLenum target, GLuint index, GLuint id) {
  return RegalGMockInterface::current->glBeginQueryIndexed(target, index, id);
}

void REGAL_CALL gmock_glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream) {
  return RegalGMockInterface::current->glDrawTransformFeedbackStream(mode, id, stream);
}

void REGAL_CALL gmock_glEndQueryIndexed(GLenum target, GLuint index) {
  return RegalGMockInterface::current->glEndQueryIndexed(target, index);
}

void REGAL_CALL gmock_glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetQueryIndexediv(target, index, pname, params);
}

void REGAL_CALL gmock_glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei primcount) {
  return RegalGMockInterface::current->glDrawTransformFeedbackInstanced(mode, id, primcount);
}

void REGAL_CALL gmock_glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei primcount) {
  return RegalGMockInterface::current->glDrawTransformFeedbackStreamInstanced(mode, id, stream, primcount);
}

void REGAL_CALL gmock_glLoadTransposeMatrixdARB(const GLdouble *m) {
  return RegalGMockInterface::current->glLoadTransposeMatrixdARB(m);
}

void REGAL_CALL gmock_glLoadTransposeMatrixfARB(const GLfloat *m) {
  return RegalGMockInterface::current->glLoadTransposeMatrixfARB(m);
}

void REGAL_CALL gmock_glMultTransposeMatrixdARB(const GLdouble *m) {
  return RegalGMockInterface::current->glMultTransposeMatrixdARB(m);
}

void REGAL_CALL gmock_glMultTransposeMatrixfARB(const GLfloat *m) {
  return RegalGMockInterface::current->glMultTransposeMatrixfARB(m);
}

void REGAL_CALL gmock_glBindBufferBase(GLenum target, GLuint index, GLuint buffer) {
  return RegalGMockInterface::current->glBindBufferBase(target, index, buffer);
}

void REGAL_CALL gmock_glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  return RegalGMockInterface::current->glBindBufferRange(target, index, buffer, offset, size);
}

void REGAL_CALL gmock_glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName) {
  return RegalGMockInterface::current->glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName);
}

void REGAL_CALL gmock_glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params);
}

void REGAL_CALL gmock_glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName) {
  return RegalGMockInterface::current->glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName);
}

void REGAL_CALL gmock_glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params);
}

void REGAL_CALL gmock_glGetIntegeri_v(GLenum target, GLuint index, GLint *data) {
  return RegalGMockInterface::current->glGetIntegeri_v(target, index, data);
}

GLuint REGAL_CALL gmock_glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName) {
  return RegalGMockInterface::current->glGetUniformBlockIndex(program, uniformBlockName);
}

void REGAL_CALL gmock_glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar **uniformNames, GLuint *uniformIndices) {
  return RegalGMockInterface::current->glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices);
}

void REGAL_CALL gmock_glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) {
  return RegalGMockInterface::current->glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
}

void REGAL_CALL gmock_glBindVertexArray(GLuint array) {
  return RegalGMockInterface::current->glBindVertexArray(array);
}

void REGAL_CALL gmock_glDeleteVertexArrays(GLsizei n, const GLuint *arrays) {
  return RegalGMockInterface::current->glDeleteVertexArrays(n, arrays);
}

void REGAL_CALL gmock_glGenVertexArrays(GLsizei n, GLuint *arrays) {
  return RegalGMockInterface::current->glGenVertexArrays(n, arrays);
}

GLboolean REGAL_CALL gmock_glIsVertexArray(GLuint array) {
  return RegalGMockInterface::current->glIsVertexArray(array);
}

void REGAL_CALL gmock_glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params) {
  return RegalGMockInterface::current->glGetVertexAttribLdv(index, pname, params);
}

void REGAL_CALL gmock_glVertexAttribL1d(GLuint index, GLdouble x) {
  return RegalGMockInterface::current->glVertexAttribL1d(index, x);
}

void REGAL_CALL gmock_glVertexAttribL1dv(GLuint index, const GLdouble *v) {
  return RegalGMockInterface::current->glVertexAttribL1dv(index, v);
}

void REGAL_CALL gmock_glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y) {
  return RegalGMockInterface::current->glVertexAttribL2d(index, x, y);
}

void REGAL_CALL gmock_glVertexAttribL2dv(GLuint index, const GLdouble *v) {
  return RegalGMockInterface::current->glVertexAttribL2dv(index, v);
}

void REGAL_CALL gmock_glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
  return RegalGMockInterface::current->glVertexAttribL3d(index, x, y, z);
}

void REGAL_CALL gmock_glVertexAttribL3dv(GLuint index, const GLdouble *v) {
  return RegalGMockInterface::current->glVertexAttribL3dv(index, v);
}

void REGAL_CALL gmock_glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  return RegalGMockInterface::current->glVertexAttribL4d(index, x, y, z, w);
}

void REGAL_CALL gmock_glVertexAttribL4dv(GLuint index, const GLdouble *v) {
  return RegalGMockInterface::current->glVertexAttribL4dv(index, v);
}

void REGAL_CALL gmock_glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glVertexAttribLPointer(index, size, type, stride, pointer);
}

void REGAL_CALL gmock_glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {
  return RegalGMockInterface::current->glBindVertexBuffer(bindingindex, buffer, offset, stride);
}

void REGAL_CALL gmock_glVertexAttribBinding(GLuint attribindex, GLuint bindingindex) {
  return RegalGMockInterface::current->glVertexAttribBinding(attribindex, bindingindex);
}

void REGAL_CALL gmock_glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {
  return RegalGMockInterface::current->glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset);
}

void REGAL_CALL gmock_glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  return RegalGMockInterface::current->glVertexAttribIFormat(attribindex, size, type, relativeoffset);
}

void REGAL_CALL gmock_glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  return RegalGMockInterface::current->glVertexAttribLFormat(attribindex, size, type, relativeoffset);
}

void REGAL_CALL gmock_glVertexBindingDivisor(GLuint bindingindex, GLuint divisor) {
  return RegalGMockInterface::current->glVertexBindingDivisor(bindingindex, divisor);
}

void REGAL_CALL gmock_glVertexBlendARB(GLint count) {
  return RegalGMockInterface::current->glVertexBlendARB(count);
}

void REGAL_CALL gmock_glWeightPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid *pointer) {
  return RegalGMockInterface::current->glWeightPointerARB(size, type, stride, pointer);
}

void REGAL_CALL gmock_glWeightbvARB(GLint size, GLbyte *weights) {
  return RegalGMockInterface::current->glWeightbvARB(size, weights);
}

void REGAL_CALL gmock_glWeightdvARB(GLint size, GLdouble *weights) {
  return RegalGMockInterface::current->glWeightdvARB(size, weights);
}

void REGAL_CALL gmock_glWeightfvARB(GLint size, GLfloat *weights) {
  return RegalGMockInterface::current->glWeightfvARB(size, weights);
}

void REGAL_CALL gmock_glWeightivARB(GLint size, GLint *weights) {
  return RegalGMockInterface::current->glWeightivARB(size, weights);
}

void REGAL_CALL gmock_glWeightsvARB(GLint size, GLshort *weights) {
  return RegalGMockInterface::current->glWeightsvARB(size, weights);
}

void REGAL_CALL gmock_glWeightubvARB(GLint size, GLubyte *weights) {
  return RegalGMockInterface::current->glWeightubvARB(size, weights);
}

void REGAL_CALL gmock_glWeightuivARB(GLint size, GLuint *weights) {
  return RegalGMockInterface::current->glWeightuivARB(size, weights);
}

void REGAL_CALL gmock_glWeightusvARB(GLint size, GLushort *weights) {
  return RegalGMockInterface::current->glWeightusvARB(size, weights);
}

void REGAL_CALL gmock_glBindBufferARB(GLenum target, GLuint buffer) {
  return RegalGMockInterface::current->glBindBufferARB(target, buffer);
}

void REGAL_CALL gmock_glBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage) {
  return RegalGMockInterface::current->glBufferDataARB(target, size, data, usage);
}

void REGAL_CALL gmock_glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data) {
  return RegalGMockInterface::current->glBufferSubDataARB(target, offset, size, data);
}

void REGAL_CALL gmock_glDeleteBuffersARB(GLsizei n, const GLuint *buffers) {
  return RegalGMockInterface::current->glDeleteBuffersARB(n, buffers);
}

void REGAL_CALL gmock_glGenBuffersARB(GLsizei n, GLuint *buffers) {
  return RegalGMockInterface::current->glGenBuffersARB(n, buffers);
}

void REGAL_CALL gmock_glGetBufferParameterivARB(GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetBufferParameterivARB(target, pname, params);
}

void REGAL_CALL gmock_glGetBufferPointervARB(GLenum target, GLenum pname, GLvoid **params) {
  return RegalGMockInterface::current->glGetBufferPointervARB(target, pname, params);
}

void REGAL_CALL gmock_glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data) {
  return RegalGMockInterface::current->glGetBufferSubDataARB(target, offset, size, data);
}

GLboolean REGAL_CALL gmock_glIsBufferARB(GLuint buffer) {
  return RegalGMockInterface::current->glIsBufferARB(buffer);
}

GLvoid * REGAL_CALL gmock_glMapBufferARB(GLenum target, GLenum access) {
  return RegalGMockInterface::current->glMapBufferARB(target, access);
}

GLboolean REGAL_CALL gmock_glUnmapBufferARB(GLenum target) {
  return RegalGMockInterface::current->glUnmapBufferARB(target);
}

void REGAL_CALL gmock_glBindProgramARB(GLenum target, GLuint program) {
  return RegalGMockInterface::current->glBindProgramARB(target, program);
}

void REGAL_CALL gmock_glDeleteProgramsARB(GLsizei n, const GLuint *programs) {
  return RegalGMockInterface::current->glDeleteProgramsARB(n, programs);
}

void REGAL_CALL gmock_glDisableVertexAttribArrayARB(GLuint index) {
  return RegalGMockInterface::current->glDisableVertexAttribArrayARB(index);
}

void REGAL_CALL gmock_glEnableVertexAttribArrayARB(GLuint index) {
  return RegalGMockInterface::current->glEnableVertexAttribArrayARB(index);
}

void REGAL_CALL gmock_glGenProgramsARB(GLsizei n, GLuint *programs) {
  return RegalGMockInterface::current->glGenProgramsARB(n, programs);
}

void REGAL_CALL gmock_glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble *params) {
  return RegalGMockInterface::current->glGetProgramEnvParameterdvARB(target, index, params);
}

void REGAL_CALL gmock_glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat *params) {
  return RegalGMockInterface::current->glGetProgramEnvParameterfvARB(target, index, params);
}

void REGAL_CALL gmock_glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble *params) {
  return RegalGMockInterface::current->glGetProgramLocalParameterdvARB(target, index, params);
}

void REGAL_CALL gmock_glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat *params) {
  return RegalGMockInterface::current->glGetProgramLocalParameterfvARB(target, index, params);
}

void REGAL_CALL gmock_glGetProgramStringARB(GLenum target, GLenum pname, GLvoid *string) {
  return RegalGMockInterface::current->glGetProgramStringARB(target, pname, string);
}

void REGAL_CALL gmock_glGetProgramivARB(GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetProgramivARB(target, pname, params);
}

void REGAL_CALL gmock_glGetVertexAttribPointervARB(GLuint index, GLenum pname, GLvoid **pointer) {
  return RegalGMockInterface::current->glGetVertexAttribPointervARB(index, pname, pointer);
}

void REGAL_CALL gmock_glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble *params) {
  return RegalGMockInterface::current->glGetVertexAttribdvARB(index, pname, params);
}

void REGAL_CALL gmock_glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetVertexAttribfvARB(index, pname, params);
}

void REGAL_CALL gmock_glGetVertexAttribivARB(GLuint index, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetVertexAttribivARB(index, pname, params);
}

GLboolean REGAL_CALL gmock_glIsProgramARB(GLuint program) {
  return RegalGMockInterface::current->glIsProgramARB(program);
}

void REGAL_CALL gmock_glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  return RegalGMockInterface::current->glProgramEnvParameter4dARB(target, index, x, y, z, w);
}

void REGAL_CALL gmock_glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble *params) {
  return RegalGMockInterface::current->glProgramEnvParameter4dvARB(target, index, params);
}

void REGAL_CALL gmock_glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  return RegalGMockInterface::current->glProgramEnvParameter4fARB(target, index, x, y, z, w);
}

void REGAL_CALL gmock_glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat *params) {
  return RegalGMockInterface::current->glProgramEnvParameter4fvARB(target, index, params);
}

void REGAL_CALL gmock_glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  return RegalGMockInterface::current->glProgramLocalParameter4dARB(target, index, x, y, z, w);
}

void REGAL_CALL gmock_glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble *params) {
  return RegalGMockInterface::current->glProgramLocalParameter4dvARB(target, index, params);
}

void REGAL_CALL gmock_glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  return RegalGMockInterface::current->glProgramLocalParameter4fARB(target, index, x, y, z, w);
}

void REGAL_CALL gmock_glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat *params) {
  return RegalGMockInterface::current->glProgramLocalParameter4fvARB(target, index, params);
}

void REGAL_CALL gmock_glProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid *string) {
  return RegalGMockInterface::current->glProgramStringARB(target, format, len, string);
}

void REGAL_CALL gmock_glVertexAttrib1dARB(GLuint index, GLdouble x) {
  return RegalGMockInterface::current->glVertexAttrib1dARB(index, x);
}

void REGAL_CALL gmock_glVertexAttrib1dvARB(GLuint index, const GLdouble *v) {
  return RegalGMockInterface::current->glVertexAttrib1dvARB(index, v);
}

void REGAL_CALL gmock_glVertexAttrib1fARB(GLuint index, GLfloat x) {
  return RegalGMockInterface::current->glVertexAttrib1fARB(index, x);
}

void REGAL_CALL gmock_glVertexAttrib1fvARB(GLuint index, const GLfloat *v) {
  return RegalGMockInterface::current->glVertexAttrib1fvARB(index, v);
}

void REGAL_CALL gmock_glVertexAttrib1sARB(GLuint index, GLshort x) {
  return RegalGMockInterface::current->glVertexAttrib1sARB(index, x);
}

void REGAL_CALL gmock_glVertexAttrib1svARB(GLuint index, const GLshort *v) {
  return RegalGMockInterface::current->glVertexAttrib1svARB(index, v);
}

void REGAL_CALL gmock_glVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y) {
  return RegalGMockInterface::current->glVertexAttrib2dARB(index, x, y);
}

void REGAL_CALL gmock_glVertexAttrib2dvARB(GLuint index, const GLdouble *v) {
  return RegalGMockInterface::current->glVertexAttrib2dvARB(index, v);
}

void REGAL_CALL gmock_glVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y) {
  return RegalGMockInterface::current->glVertexAttrib2fARB(index, x, y);
}

void REGAL_CALL gmock_glVertexAttrib2fvARB(GLuint index, const GLfloat *v) {
  return RegalGMockInterface::current->glVertexAttrib2fvARB(index, v);
}

void REGAL_CALL gmock_glVertexAttrib2sARB(GLuint index, GLshort x, GLshort y) {
  return RegalGMockInterface::current->glVertexAttrib2sARB(index, x, y);
}

void REGAL_CALL gmock_glVertexAttrib2svARB(GLuint index, const GLshort *v) {
  return RegalGMockInterface::current->glVertexAttrib2svARB(index, v);
}

void REGAL_CALL gmock_glVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
  return RegalGMockInterface::current->glVertexAttrib3dARB(index, x, y, z);
}

void REGAL_CALL gmock_glVertexAttrib3dvARB(GLuint index, const GLdouble *v) {
  return RegalGMockInterface::current->glVertexAttrib3dvARB(index, v);
}

void REGAL_CALL gmock_glVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glVertexAttrib3fARB(index, x, y, z);
}

void REGAL_CALL gmock_glVertexAttrib3fvARB(GLuint index, const GLfloat *v) {
  return RegalGMockInterface::current->glVertexAttrib3fvARB(index, v);
}

void REGAL_CALL gmock_glVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z) {
  return RegalGMockInterface::current->glVertexAttrib3sARB(index, x, y, z);
}

void REGAL_CALL gmock_glVertexAttrib3svARB(GLuint index, const GLshort *v) {
  return RegalGMockInterface::current->glVertexAttrib3svARB(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4NbvARB(GLuint index, const GLbyte *v) {
  return RegalGMockInterface::current->glVertexAttrib4NbvARB(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4NivARB(GLuint index, const GLint *v) {
  return RegalGMockInterface::current->glVertexAttrib4NivARB(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4NsvARB(GLuint index, const GLshort *v) {
  return RegalGMockInterface::current->glVertexAttrib4NsvARB(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {
  return RegalGMockInterface::current->glVertexAttrib4NubARB(index, x, y, z, w);
}

void REGAL_CALL gmock_glVertexAttrib4NubvARB(GLuint index, const GLubyte *v) {
  return RegalGMockInterface::current->glVertexAttrib4NubvARB(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4NuivARB(GLuint index, const GLuint *v) {
  return RegalGMockInterface::current->glVertexAttrib4NuivARB(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4NusvARB(GLuint index, const GLushort *v) {
  return RegalGMockInterface::current->glVertexAttrib4NusvARB(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4bvARB(GLuint index, const GLbyte *v) {
  return RegalGMockInterface::current->glVertexAttrib4bvARB(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  return RegalGMockInterface::current->glVertexAttrib4dARB(index, x, y, z, w);
}

void REGAL_CALL gmock_glVertexAttrib4dvARB(GLuint index, const GLdouble *v) {
  return RegalGMockInterface::current->glVertexAttrib4dvARB(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  return RegalGMockInterface::current->glVertexAttrib4fARB(index, x, y, z, w);
}

void REGAL_CALL gmock_glVertexAttrib4fvARB(GLuint index, const GLfloat *v) {
  return RegalGMockInterface::current->glVertexAttrib4fvARB(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4ivARB(GLuint index, const GLint *v) {
  return RegalGMockInterface::current->glVertexAttrib4ivARB(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {
  return RegalGMockInterface::current->glVertexAttrib4sARB(index, x, y, z, w);
}

void REGAL_CALL gmock_glVertexAttrib4svARB(GLuint index, const GLshort *v) {
  return RegalGMockInterface::current->glVertexAttrib4svARB(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4ubvARB(GLuint index, const GLubyte *v) {
  return RegalGMockInterface::current->glVertexAttrib4ubvARB(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4uivARB(GLuint index, const GLuint *v) {
  return RegalGMockInterface::current->glVertexAttrib4uivARB(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4usvARB(GLuint index, const GLushort *v) {
  return RegalGMockInterface::current->glVertexAttrib4usvARB(index, v);
}

void REGAL_CALL gmock_glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glVertexAttribPointerARB(index, size, type, normalized, stride, pointer);
}

void REGAL_CALL gmock_glBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB *name) {
  return RegalGMockInterface::current->glBindAttribLocationARB(programObj, index, name);
}

void REGAL_CALL gmock_glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name) {
  return RegalGMockInterface::current->glGetActiveAttribARB(programObj, index, maxLength, length, size, type, name);
}

GLint REGAL_CALL gmock_glGetAttribLocationARB(GLhandleARB programObj, const GLcharARB *name) {
  return RegalGMockInterface::current->glGetAttribLocationARB(programObj, name);
}

void REGAL_CALL gmock_glColorP3ui(GLenum type, GLuint color) {
  return RegalGMockInterface::current->glColorP3ui(type, color);
}

void REGAL_CALL gmock_glColorP3uiv(GLenum type, const GLuint *color) {
  return RegalGMockInterface::current->glColorP3uiv(type, color);
}

void REGAL_CALL gmock_glColorP4ui(GLenum type, GLuint color) {
  return RegalGMockInterface::current->glColorP4ui(type, color);
}

void REGAL_CALL gmock_glColorP4uiv(GLenum type, const GLuint *color) {
  return RegalGMockInterface::current->glColorP4uiv(type, color);
}

void REGAL_CALL gmock_glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords) {
  return RegalGMockInterface::current->glMultiTexCoordP1ui(texture, type, coords);
}

void REGAL_CALL gmock_glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords) {
  return RegalGMockInterface::current->glMultiTexCoordP1uiv(texture, type, coords);
}

void REGAL_CALL gmock_glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords) {
  return RegalGMockInterface::current->glMultiTexCoordP2ui(texture, type, coords);
}

void REGAL_CALL gmock_glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords) {
  return RegalGMockInterface::current->glMultiTexCoordP2uiv(texture, type, coords);
}

void REGAL_CALL gmock_glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords) {
  return RegalGMockInterface::current->glMultiTexCoordP3ui(texture, type, coords);
}

void REGAL_CALL gmock_glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords) {
  return RegalGMockInterface::current->glMultiTexCoordP3uiv(texture, type, coords);
}

void REGAL_CALL gmock_glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords) {
  return RegalGMockInterface::current->glMultiTexCoordP4ui(texture, type, coords);
}

void REGAL_CALL gmock_glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords) {
  return RegalGMockInterface::current->glMultiTexCoordP4uiv(texture, type, coords);
}

void REGAL_CALL gmock_glNormalP3ui(GLenum type, GLuint coords) {
  return RegalGMockInterface::current->glNormalP3ui(type, coords);
}

void REGAL_CALL gmock_glNormalP3uiv(GLenum type, const GLuint *coords) {
  return RegalGMockInterface::current->glNormalP3uiv(type, coords);
}

void REGAL_CALL gmock_glSecondaryColorP3ui(GLenum type, GLuint color) {
  return RegalGMockInterface::current->glSecondaryColorP3ui(type, color);
}

void REGAL_CALL gmock_glSecondaryColorP3uiv(GLenum type, const GLuint *color) {
  return RegalGMockInterface::current->glSecondaryColorP3uiv(type, color);
}

void REGAL_CALL gmock_glTexCoordP1ui(GLenum type, GLuint coords) {
  return RegalGMockInterface::current->glTexCoordP1ui(type, coords);
}

void REGAL_CALL gmock_glTexCoordP1uiv(GLenum type, const GLuint *coords) {
  return RegalGMockInterface::current->glTexCoordP1uiv(type, coords);
}

void REGAL_CALL gmock_glTexCoordP2ui(GLenum type, GLuint coords) {
  return RegalGMockInterface::current->glTexCoordP2ui(type, coords);
}

void REGAL_CALL gmock_glTexCoordP2uiv(GLenum type, const GLuint *coords) {
  return RegalGMockInterface::current->glTexCoordP2uiv(type, coords);
}

void REGAL_CALL gmock_glTexCoordP3ui(GLenum type, GLuint coords) {
  return RegalGMockInterface::current->glTexCoordP3ui(type, coords);
}

void REGAL_CALL gmock_glTexCoordP3uiv(GLenum type, const GLuint *coords) {
  return RegalGMockInterface::current->glTexCoordP3uiv(type, coords);
}

void REGAL_CALL gmock_glTexCoordP4ui(GLenum type, GLuint coords) {
  return RegalGMockInterface::current->glTexCoordP4ui(type, coords);
}

void REGAL_CALL gmock_glTexCoordP4uiv(GLenum type, const GLuint *coords) {
  return RegalGMockInterface::current->glTexCoordP4uiv(type, coords);
}

void REGAL_CALL gmock_glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
  return RegalGMockInterface::current->glVertexAttribP1ui(index, type, normalized, value);
}

void REGAL_CALL gmock_glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {
  return RegalGMockInterface::current->glVertexAttribP1uiv(index, type, normalized, value);
}

void REGAL_CALL gmock_glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
  return RegalGMockInterface::current->glVertexAttribP2ui(index, type, normalized, value);
}

void REGAL_CALL gmock_glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {
  return RegalGMockInterface::current->glVertexAttribP2uiv(index, type, normalized, value);
}

void REGAL_CALL gmock_glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
  return RegalGMockInterface::current->glVertexAttribP3ui(index, type, normalized, value);
}

void REGAL_CALL gmock_glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {
  return RegalGMockInterface::current->glVertexAttribP3uiv(index, type, normalized, value);
}

void REGAL_CALL gmock_glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) {
  return RegalGMockInterface::current->glVertexAttribP4ui(index, type, normalized, value);
}

void REGAL_CALL gmock_glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value) {
  return RegalGMockInterface::current->glVertexAttribP4uiv(index, type, normalized, value);
}

void REGAL_CALL gmock_glVertexP2ui(GLenum type, GLuint coords) {
  return RegalGMockInterface::current->glVertexP2ui(type, coords);
}

void REGAL_CALL gmock_glVertexP2uiv(GLenum type, const GLuint *coords) {
  return RegalGMockInterface::current->glVertexP2uiv(type, coords);
}

void REGAL_CALL gmock_glVertexP3ui(GLenum type, GLuint coords) {
  return RegalGMockInterface::current->glVertexP3ui(type, coords);
}

void REGAL_CALL gmock_glVertexP3uiv(GLenum type, const GLuint *coords) {
  return RegalGMockInterface::current->glVertexP3uiv(type, coords);
}

void REGAL_CALL gmock_glVertexP4ui(GLenum type, GLuint coords) {
  return RegalGMockInterface::current->glVertexP4ui(type, coords);
}

void REGAL_CALL gmock_glVertexP4uiv(GLenum type, const GLuint *coords) {
  return RegalGMockInterface::current->glVertexP4uiv(type, coords);
}

void REGAL_CALL gmock_glDepthRangeArrayv(GLuint first, GLsizei count, const GLclampd *v) {
  return RegalGMockInterface::current->glDepthRangeArrayv(first, count, v);
}

void REGAL_CALL gmock_glDepthRangeIndexed(GLuint index, GLclampd n, GLclampd f) {
  return RegalGMockInterface::current->glDepthRangeIndexed(index, n, f);
}

void REGAL_CALL gmock_glGetDoublei_v(GLenum target, GLuint index, GLdouble *v) {
  return RegalGMockInterface::current->glGetDoublei_v(target, index, v);
}

void REGAL_CALL gmock_glGetFloati_v(GLenum target, GLuint index, GLfloat *v) {
  return RegalGMockInterface::current->glGetFloati_v(target, index, v);
}

void REGAL_CALL gmock_glScissorArrayv(GLuint first, GLsizei count, const GLint *v) {
  return RegalGMockInterface::current->glScissorArrayv(first, count, v);
}

void REGAL_CALL gmock_glScissorIndexed(GLuint index, GLint left, GLint bottom, GLint width, GLint height) {
  return RegalGMockInterface::current->glScissorIndexed(index, left, bottom, width, height);
}

void REGAL_CALL gmock_glScissorIndexedv(GLuint index, const GLint *v) {
  return RegalGMockInterface::current->glScissorIndexedv(index, v);
}

void REGAL_CALL gmock_glViewportArrayv(GLuint first, GLsizei count, const GLfloat *v) {
  return RegalGMockInterface::current->glViewportArrayv(first, count, v);
}

void REGAL_CALL gmock_glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) {
  return RegalGMockInterface::current->glViewportIndexedf(index, x, y, w, h);
}

void REGAL_CALL gmock_glViewportIndexedfv(GLuint index, const GLfloat *v) {
  return RegalGMockInterface::current->glViewportIndexedfv(index, v);
}

void REGAL_CALL gmock_glWindowPos2dARB(GLdouble x, GLdouble y) {
  return RegalGMockInterface::current->glWindowPos2dARB(x, y);
}

void REGAL_CALL gmock_glWindowPos2dvARB(const GLdouble *p) {
  return RegalGMockInterface::current->glWindowPos2dvARB(p);
}

void REGAL_CALL gmock_glWindowPos2fARB(GLfloat x, GLfloat y) {
  return RegalGMockInterface::current->glWindowPos2fARB(x, y);
}

void REGAL_CALL gmock_glWindowPos2fvARB(const GLfloat *p) {
  return RegalGMockInterface::current->glWindowPos2fvARB(p);
}

void REGAL_CALL gmock_glWindowPos2iARB(GLint x, GLint y) {
  return RegalGMockInterface::current->glWindowPos2iARB(x, y);
}

void REGAL_CALL gmock_glWindowPos2ivARB(const GLint *p) {
  return RegalGMockInterface::current->glWindowPos2ivARB(p);
}

void REGAL_CALL gmock_glWindowPos2sARB(GLshort x, GLshort y) {
  return RegalGMockInterface::current->glWindowPos2sARB(x, y);
}

void REGAL_CALL gmock_glWindowPos2svARB(const GLshort *p) {
  return RegalGMockInterface::current->glWindowPos2svARB(p);
}

void REGAL_CALL gmock_glWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z) {
  return RegalGMockInterface::current->glWindowPos3dARB(x, y, z);
}

void REGAL_CALL gmock_glWindowPos3dvARB(const GLdouble *p) {
  return RegalGMockInterface::current->glWindowPos3dvARB(p);
}

void REGAL_CALL gmock_glWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glWindowPos3fARB(x, y, z);
}

void REGAL_CALL gmock_glWindowPos3fvARB(const GLfloat *p) {
  return RegalGMockInterface::current->glWindowPos3fvARB(p);
}

void REGAL_CALL gmock_glWindowPos3iARB(GLint x, GLint y, GLint z) {
  return RegalGMockInterface::current->glWindowPos3iARB(x, y, z);
}

void REGAL_CALL gmock_glWindowPos3ivARB(const GLint *p) {
  return RegalGMockInterface::current->glWindowPos3ivARB(p);
}

void REGAL_CALL gmock_glWindowPos3sARB(GLshort x, GLshort y, GLshort z) {
  return RegalGMockInterface::current->glWindowPos3sARB(x, y, z);
}

void REGAL_CALL gmock_glWindowPos3svARB(const GLshort *p) {
  return RegalGMockInterface::current->glWindowPos3svARB(p);
}

void REGAL_CALL gmock_glDrawBuffersATI(GLsizei n, const GLenum *bufs) {
  return RegalGMockInterface::current->glDrawBuffersATI(n, bufs);
}

void REGAL_CALL gmock_glDrawElementArrayATI(GLenum mode, GLsizei count) {
  return RegalGMockInterface::current->glDrawElementArrayATI(mode, count);
}

void REGAL_CALL gmock_glDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count) {
  return RegalGMockInterface::current->glDrawRangeElementArrayATI(mode, start, end, count);
}

void REGAL_CALL gmock_glElementPointerATI(GLenum type, const GLvoid *pointer) {
  return RegalGMockInterface::current->glElementPointerATI(type, pointer);
}

void REGAL_CALL gmock_glGetTexBumpParameterfvATI(GLenum pname, GLfloat *param) {
  return RegalGMockInterface::current->glGetTexBumpParameterfvATI(pname, param);
}

void REGAL_CALL gmock_glGetTexBumpParameterivATI(GLenum pname, GLint *param) {
  return RegalGMockInterface::current->glGetTexBumpParameterivATI(pname, param);
}

void REGAL_CALL gmock_glTexBumpParameterfvATI(GLenum pname, GLfloat *param) {
  return RegalGMockInterface::current->glTexBumpParameterfvATI(pname, param);
}

void REGAL_CALL gmock_glTexBumpParameterivATI(GLenum pname, GLint *param) {
  return RegalGMockInterface::current->glTexBumpParameterivATI(pname, param);
}

void REGAL_CALL gmock_glAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) {
  return RegalGMockInterface::current->glAlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
}

void REGAL_CALL gmock_glAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) {
  return RegalGMockInterface::current->glAlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
}

void REGAL_CALL gmock_glAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) {
  // glAlphaFragmentOp3ATI has too many arguments for GMock.
}

void REGAL_CALL gmock_glBeginFragmentShaderATI(void) {
  return RegalGMockInterface::current->glBeginFragmentShaderATI();
}

void REGAL_CALL gmock_glBindFragmentShaderATI(GLuint id) {
  return RegalGMockInterface::current->glBindFragmentShaderATI(id);
}

void REGAL_CALL gmock_glColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) {
  return RegalGMockInterface::current->glColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
}

void REGAL_CALL gmock_glColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) {
  return RegalGMockInterface::current->glColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
}

void REGAL_CALL gmock_glColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) {
  // glColorFragmentOp3ATI has too many arguments for GMock.
}

void REGAL_CALL gmock_glDeleteFragmentShaderATI(GLuint id) {
  return RegalGMockInterface::current->glDeleteFragmentShaderATI(id);
}

void REGAL_CALL gmock_glEndFragmentShaderATI(void) {
  return RegalGMockInterface::current->glEndFragmentShaderATI();
}

GLuint REGAL_CALL gmock_glGenFragmentShadersATI(GLuint range) {
  return RegalGMockInterface::current->glGenFragmentShadersATI(range);
}

void REGAL_CALL gmock_glPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle) {
  return RegalGMockInterface::current->glPassTexCoordATI(dst, coord, swizzle);
}

void REGAL_CALL gmock_glSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle) {
  return RegalGMockInterface::current->glSampleMapATI(dst, interp, swizzle);
}

void REGAL_CALL gmock_glSetFragmentShaderConstantATI(GLuint dst, const GLfloat *value) {
  return RegalGMockInterface::current->glSetFragmentShaderConstantATI(dst, value);
}

GLvoid * REGAL_CALL gmock_glMapObjectBufferATI(GLuint buffer) {
  return RegalGMockInterface::current->glMapObjectBufferATI(buffer);
}

void REGAL_CALL gmock_glUnmapObjectBufferATI(GLuint buffer) {
  return RegalGMockInterface::current->glUnmapObjectBufferATI(buffer);
}

void REGAL_CALL gmock_glPNTrianglesfATI(GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glPNTrianglesfATI(pname, param);
}

void REGAL_CALL gmock_glPNTrianglesiATI(GLenum pname, GLint param) {
  return RegalGMockInterface::current->glPNTrianglesiATI(pname, param);
}

void REGAL_CALL gmock_glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask) {
  return RegalGMockInterface::current->glStencilFuncSeparateATI(frontfunc, backfunc, ref, mask);
}

void REGAL_CALL gmock_glStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) {
  return RegalGMockInterface::current->glStencilOpSeparateATI(face, sfail, dpfail, dppass);
}

void REGAL_CALL gmock_glArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) {
  return RegalGMockInterface::current->glArrayObjectATI(array, size, type, stride, buffer, offset);
}

void REGAL_CALL gmock_glFreeObjectBufferATI(GLuint buffer) {
  return RegalGMockInterface::current->glFreeObjectBufferATI(buffer);
}

void REGAL_CALL gmock_glGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetArrayObjectfvATI(array, pname, params);
}

void REGAL_CALL gmock_glGetArrayObjectivATI(GLenum array, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetArrayObjectivATI(array, pname, params);
}

void REGAL_CALL gmock_glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetObjectBufferfvATI(buffer, pname, params);
}

void REGAL_CALL gmock_glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetObjectBufferivATI(buffer, pname, params);
}

void REGAL_CALL gmock_glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetVariantArrayObjectfvATI(id, pname, params);
}

void REGAL_CALL gmock_glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetVariantArrayObjectivATI(id, pname, params);
}

GLboolean REGAL_CALL gmock_glIsObjectBufferATI(GLuint buffer) {
  return RegalGMockInterface::current->glIsObjectBufferATI(buffer);
}

GLuint REGAL_CALL gmock_glNewObjectBufferATI(GLsizei size, const GLvoid *pointer, GLenum usage) {
  return RegalGMockInterface::current->glNewObjectBufferATI(size, pointer, usage);
}

void REGAL_CALL gmock_glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const GLvoid *pointer, GLenum preserve) {
  return RegalGMockInterface::current->glUpdateObjectBufferATI(buffer, offset, size, pointer, preserve);
}

void REGAL_CALL gmock_glVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) {
  return RegalGMockInterface::current->glVariantArrayObjectATI(id, type, stride, buffer, offset);
}

void REGAL_CALL gmock_glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetVertexAttribArrayObjectfvATI(index, pname, params);
}

void REGAL_CALL gmock_glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetVertexAttribArrayObjectivATI(index, pname, params);
}

void REGAL_CALL gmock_glVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset) {
  return RegalGMockInterface::current->glVertexAttribArrayObjectATI(index, size, type, normalized, stride, buffer, offset);
}

void REGAL_CALL gmock_glClientActiveVertexStreamATI(GLenum stream) {
  return RegalGMockInterface::current->glClientActiveVertexStreamATI(stream);
}

void REGAL_CALL gmock_glNormalStream3bATI(GLenum stream, GLbyte x, GLbyte y, GLbyte z) {
  return RegalGMockInterface::current->glNormalStream3bATI(stream, x, y, z);
}

void REGAL_CALL gmock_glNormalStream3bvATI(GLenum stream, const GLbyte *coords) {
  return RegalGMockInterface::current->glNormalStream3bvATI(stream, coords);
}

void REGAL_CALL gmock_glNormalStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z) {
  return RegalGMockInterface::current->glNormalStream3dATI(stream, x, y, z);
}

void REGAL_CALL gmock_glNormalStream3dvATI(GLenum stream, const GLdouble *coords) {
  return RegalGMockInterface::current->glNormalStream3dvATI(stream, coords);
}

void REGAL_CALL gmock_glNormalStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glNormalStream3fATI(stream, x, y, z);
}

void REGAL_CALL gmock_glNormalStream3fvATI(GLenum stream, const GLfloat *coords) {
  return RegalGMockInterface::current->glNormalStream3fvATI(stream, coords);
}

void REGAL_CALL gmock_glNormalStream3iATI(GLenum stream, GLint x, GLint y, GLint z) {
  return RegalGMockInterface::current->glNormalStream3iATI(stream, x, y, z);
}

void REGAL_CALL gmock_glNormalStream3ivATI(GLenum stream, const GLint *coords) {
  return RegalGMockInterface::current->glNormalStream3ivATI(stream, coords);
}

void REGAL_CALL gmock_glNormalStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z) {
  return RegalGMockInterface::current->glNormalStream3sATI(stream, x, y, z);
}

void REGAL_CALL gmock_glNormalStream3svATI(GLenum stream, const GLshort *coords) {
  return RegalGMockInterface::current->glNormalStream3svATI(stream, coords);
}

void REGAL_CALL gmock_glVertexBlendEnvfATI(GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glVertexBlendEnvfATI(pname, param);
}

void REGAL_CALL gmock_glVertexBlendEnviATI(GLenum pname, GLint param) {
  return RegalGMockInterface::current->glVertexBlendEnviATI(pname, param);
}

void REGAL_CALL gmock_glVertexStream1dATI(GLenum stream, GLdouble x) {
  return RegalGMockInterface::current->glVertexStream1dATI(stream, x);
}

void REGAL_CALL gmock_glVertexStream1dvATI(GLenum stream, const GLdouble *coords) {
  return RegalGMockInterface::current->glVertexStream1dvATI(stream, coords);
}

void REGAL_CALL gmock_glVertexStream1fATI(GLenum stream, GLfloat x) {
  return RegalGMockInterface::current->glVertexStream1fATI(stream, x);
}

void REGAL_CALL gmock_glVertexStream1fvATI(GLenum stream, const GLfloat *coords) {
  return RegalGMockInterface::current->glVertexStream1fvATI(stream, coords);
}

void REGAL_CALL gmock_glVertexStream1iATI(GLenum stream, GLint x) {
  return RegalGMockInterface::current->glVertexStream1iATI(stream, x);
}

void REGAL_CALL gmock_glVertexStream1ivATI(GLenum stream, const GLint *coords) {
  return RegalGMockInterface::current->glVertexStream1ivATI(stream, coords);
}

void REGAL_CALL gmock_glVertexStream1sATI(GLenum stream, GLshort x) {
  return RegalGMockInterface::current->glVertexStream1sATI(stream, x);
}

void REGAL_CALL gmock_glVertexStream1svATI(GLenum stream, const GLshort *coords) {
  return RegalGMockInterface::current->glVertexStream1svATI(stream, coords);
}

void REGAL_CALL gmock_glVertexStream2dATI(GLenum stream, GLdouble x, GLdouble y) {
  return RegalGMockInterface::current->glVertexStream2dATI(stream, x, y);
}

void REGAL_CALL gmock_glVertexStream2dvATI(GLenum stream, const GLdouble *coords) {
  return RegalGMockInterface::current->glVertexStream2dvATI(stream, coords);
}

void REGAL_CALL gmock_glVertexStream2fATI(GLenum stream, GLfloat x, GLfloat y) {
  return RegalGMockInterface::current->glVertexStream2fATI(stream, x, y);
}

void REGAL_CALL gmock_glVertexStream2fvATI(GLenum stream, const GLfloat *coords) {
  return RegalGMockInterface::current->glVertexStream2fvATI(stream, coords);
}

void REGAL_CALL gmock_glVertexStream2iATI(GLenum stream, GLint x, GLint y) {
  return RegalGMockInterface::current->glVertexStream2iATI(stream, x, y);
}

void REGAL_CALL gmock_glVertexStream2ivATI(GLenum stream, const GLint *coords) {
  return RegalGMockInterface::current->glVertexStream2ivATI(stream, coords);
}

void REGAL_CALL gmock_glVertexStream2sATI(GLenum stream, GLshort x, GLshort y) {
  return RegalGMockInterface::current->glVertexStream2sATI(stream, x, y);
}

void REGAL_CALL gmock_glVertexStream2svATI(GLenum stream, const GLshort *coords) {
  return RegalGMockInterface::current->glVertexStream2svATI(stream, coords);
}

void REGAL_CALL gmock_glVertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z) {
  return RegalGMockInterface::current->glVertexStream3dATI(stream, x, y, z);
}

void REGAL_CALL gmock_glVertexStream3dvATI(GLenum stream, const GLdouble *coords) {
  return RegalGMockInterface::current->glVertexStream3dvATI(stream, coords);
}

void REGAL_CALL gmock_glVertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glVertexStream3fATI(stream, x, y, z);
}

void REGAL_CALL gmock_glVertexStream3fvATI(GLenum stream, const GLfloat *coords) {
  return RegalGMockInterface::current->glVertexStream3fvATI(stream, coords);
}

void REGAL_CALL gmock_glVertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z) {
  return RegalGMockInterface::current->glVertexStream3iATI(stream, x, y, z);
}

void REGAL_CALL gmock_glVertexStream3ivATI(GLenum stream, const GLint *coords) {
  return RegalGMockInterface::current->glVertexStream3ivATI(stream, coords);
}

void REGAL_CALL gmock_glVertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z) {
  return RegalGMockInterface::current->glVertexStream3sATI(stream, x, y, z);
}

void REGAL_CALL gmock_glVertexStream3svATI(GLenum stream, const GLshort *coords) {
  return RegalGMockInterface::current->glVertexStream3svATI(stream, coords);
}

void REGAL_CALL gmock_glVertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  return RegalGMockInterface::current->glVertexStream4dATI(stream, x, y, z, w);
}

void REGAL_CALL gmock_glVertexStream4dvATI(GLenum stream, const GLdouble *coords) {
  return RegalGMockInterface::current->glVertexStream4dvATI(stream, coords);
}

void REGAL_CALL gmock_glVertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  return RegalGMockInterface::current->glVertexStream4fATI(stream, x, y, z, w);
}

void REGAL_CALL gmock_glVertexStream4fvATI(GLenum stream, const GLfloat *coords) {
  return RegalGMockInterface::current->glVertexStream4fvATI(stream, coords);
}

void REGAL_CALL gmock_glVertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w) {
  return RegalGMockInterface::current->glVertexStream4iATI(stream, x, y, z, w);
}

void REGAL_CALL gmock_glVertexStream4ivATI(GLenum stream, const GLint *coords) {
  return RegalGMockInterface::current->glVertexStream4ivATI(stream, coords);
}

void REGAL_CALL gmock_glVertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w) {
  return RegalGMockInterface::current->glVertexStream4sATI(stream, x, y, z, w);
}

void REGAL_CALL gmock_glVertexStream4svATI(GLenum stream, const GLshort *coords) {
  return RegalGMockInterface::current->glVertexStream4svATI(stream, coords);
}

GLint REGAL_CALL gmock_glGetUniformBufferSizeEXT(GLuint program, GLint location) {
  return RegalGMockInterface::current->glGetUniformBufferSizeEXT(program, location);
}

GLintptr REGAL_CALL gmock_glGetUniformOffsetEXT(GLuint program, GLint location) {
  return RegalGMockInterface::current->glGetUniformOffsetEXT(program, location);
}

void REGAL_CALL gmock_glUniformBufferEXT(GLuint program, GLint location, GLuint buffer) {
  return RegalGMockInterface::current->glUniformBufferEXT(program, location, buffer);
}

void REGAL_CALL gmock_glBlendColorEXT(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha) {
  return RegalGMockInterface::current->glBlendColorEXT(red, green, blue, alpha);
}

void REGAL_CALL gmock_glBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha) {
  return RegalGMockInterface::current->glBlendEquationSeparateEXT(modeRGB, modeAlpha);
}

void REGAL_CALL gmock_glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) {
  return RegalGMockInterface::current->glBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

void REGAL_CALL gmock_glBlendEquationEXT(GLenum mode) {
  return RegalGMockInterface::current->glBlendEquationEXT(mode);
}

void REGAL_CALL gmock_glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *table) {
  return RegalGMockInterface::current->glColorSubTableEXT(target, start, count, format, type, table);
}

void REGAL_CALL gmock_glCopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) {
  return RegalGMockInterface::current->glCopyColorSubTableEXT(target, start, x, y, width);
}

void REGAL_CALL gmock_glLockArraysEXT(GLint first, GLsizei count) {
  return RegalGMockInterface::current->glLockArraysEXT(first, count);
}

void REGAL_CALL gmock_glUnlockArraysEXT(void) {
  return RegalGMockInterface::current->glUnlockArraysEXT();
}

void REGAL_CALL gmock_glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image) {
  return RegalGMockInterface::current->glConvolutionFilter1DEXT(target, internalformat, width, format, type, image);
}

void REGAL_CALL gmock_glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image) {
  return RegalGMockInterface::current->glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image);
}

void REGAL_CALL gmock_glConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glConvolutionParameterfEXT(target, pname, param);
}

void REGAL_CALL gmock_glConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glConvolutionParameterfvEXT(target, pname, params);
}

void REGAL_CALL gmock_glConvolutionParameteriEXT(GLenum target, GLenum pname, GLint param) {
  return RegalGMockInterface::current->glConvolutionParameteriEXT(target, pname, param);
}

void REGAL_CALL gmock_glConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glConvolutionParameterivEXT(target, pname, params);
}

void REGAL_CALL gmock_glCopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) {
  return RegalGMockInterface::current->glCopyConvolutionFilter1DEXT(target, internalformat, x, y, width);
}

void REGAL_CALL gmock_glCopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glCopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height);
}

void REGAL_CALL gmock_glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid *image) {
  return RegalGMockInterface::current->glGetConvolutionFilterEXT(target, format, type, image);
}

void REGAL_CALL gmock_glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetConvolutionParameterfvEXT(target, pname, params);
}

void REGAL_CALL gmock_glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetConvolutionParameterivEXT(target, pname, params);
}

void REGAL_CALL gmock_glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span) {
  return RegalGMockInterface::current->glGetSeparableFilterEXT(target, format, type, row, column, span);
}

void REGAL_CALL gmock_glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column) {
  return RegalGMockInterface::current->glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column);
}

void REGAL_CALL gmock_glBinormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz) {
  return RegalGMockInterface::current->glBinormal3bEXT(bx, by, bz);
}

void REGAL_CALL gmock_glBinormal3bvEXT(const GLbyte *v) {
  return RegalGMockInterface::current->glBinormal3bvEXT(v);
}

void REGAL_CALL gmock_glBinormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz) {
  return RegalGMockInterface::current->glBinormal3dEXT(bx, by, bz);
}

void REGAL_CALL gmock_glBinormal3dvEXT(const GLdouble *v) {
  return RegalGMockInterface::current->glBinormal3dvEXT(v);
}

void REGAL_CALL gmock_glBinormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz) {
  return RegalGMockInterface::current->glBinormal3fEXT(bx, by, bz);
}

void REGAL_CALL gmock_glBinormal3fvEXT(const GLfloat *v) {
  return RegalGMockInterface::current->glBinormal3fvEXT(v);
}

void REGAL_CALL gmock_glBinormal3iEXT(GLint bx, GLint by, GLint bz) {
  return RegalGMockInterface::current->glBinormal3iEXT(bx, by, bz);
}

void REGAL_CALL gmock_glBinormal3ivEXT(const GLint *v) {
  return RegalGMockInterface::current->glBinormal3ivEXT(v);
}

void REGAL_CALL gmock_glBinormal3sEXT(GLshort bx, GLshort by, GLshort bz) {
  return RegalGMockInterface::current->glBinormal3sEXT(bx, by, bz);
}

void REGAL_CALL gmock_glBinormal3svEXT(const GLshort *v) {
  return RegalGMockInterface::current->glBinormal3svEXT(v);
}

void REGAL_CALL gmock_glBinormalPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glBinormalPointerEXT(type, stride, pointer);
}

void REGAL_CALL gmock_glTangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz) {
  return RegalGMockInterface::current->glTangent3bEXT(tx, ty, tz);
}

void REGAL_CALL gmock_glTangent3bvEXT(const GLbyte *v) {
  return RegalGMockInterface::current->glTangent3bvEXT(v);
}

void REGAL_CALL gmock_glTangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz) {
  return RegalGMockInterface::current->glTangent3dEXT(tx, ty, tz);
}

void REGAL_CALL gmock_glTangent3dvEXT(const GLdouble *v) {
  return RegalGMockInterface::current->glTangent3dvEXT(v);
}

void REGAL_CALL gmock_glTangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz) {
  return RegalGMockInterface::current->glTangent3fEXT(tx, ty, tz);
}

void REGAL_CALL gmock_glTangent3fvEXT(const GLfloat *v) {
  return RegalGMockInterface::current->glTangent3fvEXT(v);
}

void REGAL_CALL gmock_glTangent3iEXT(GLint tx, GLint ty, GLint tz) {
  return RegalGMockInterface::current->glTangent3iEXT(tx, ty, tz);
}

void REGAL_CALL gmock_glTangent3ivEXT(const GLint *v) {
  return RegalGMockInterface::current->glTangent3ivEXT(v);
}

void REGAL_CALL gmock_glTangent3sEXT(GLshort tx, GLshort ty, GLshort tz) {
  return RegalGMockInterface::current->glTangent3sEXT(tx, ty, tz);
}

void REGAL_CALL gmock_glTangent3svEXT(const GLshort *v) {
  return RegalGMockInterface::current->glTangent3svEXT(v);
}

void REGAL_CALL gmock_glTangentPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glTangentPointerEXT(type, stride, pointer);
}

void REGAL_CALL gmock_glCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
  return RegalGMockInterface::current->glCopyTexImage1DEXT(target, level, internalformat, x, y, width, border);
}

void REGAL_CALL gmock_glCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
  return RegalGMockInterface::current->glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);
}

void REGAL_CALL gmock_glCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
  return RegalGMockInterface::current->glCopyTexSubImage1DEXT(target, level, xoffset, x, y, width);
}

void REGAL_CALL gmock_glCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);
}

void REGAL_CALL gmock_glCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glCopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

void REGAL_CALL gmock_glCullParameterdvEXT(GLenum pname, GLdouble *params) {
  return RegalGMockInterface::current->glCullParameterdvEXT(pname, params);
}

void REGAL_CALL gmock_glCullParameterfvEXT(GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glCullParameterfvEXT(pname, params);
}

void REGAL_CALL gmock_glGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label) {
  return RegalGMockInterface::current->glGetObjectLabelEXT(type, object, bufSize, length, label);
}

void REGAL_CALL gmock_glLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar *label) {
  return RegalGMockInterface::current->glLabelObjectEXT(type, object, length, label);
}

void REGAL_CALL gmock_glInsertEventMarkerEXT(GLsizei length, const GLchar *marker) {
  return RegalGMockInterface::current->glInsertEventMarkerEXT(length, marker);
}

void REGAL_CALL gmock_glPopGroupMarkerEXT(void) {
  return RegalGMockInterface::current->glPopGroupMarkerEXT();
}

void REGAL_CALL gmock_glPushGroupMarkerEXT(GLsizei length, const GLchar *marker) {
  return RegalGMockInterface::current->glPushGroupMarkerEXT(length, marker);
}

void REGAL_CALL gmock_glDepthBoundsEXT(GLclampd zmin, GLclampd zmax) {
  return RegalGMockInterface::current->glDepthBoundsEXT(zmin, zmax);
}

void REGAL_CALL gmock_glBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture) {
  return RegalGMockInterface::current->glBindMultiTextureEXT(texunit, target, texture);
}

GLenum REGAL_CALL gmock_glCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target) {
  return RegalGMockInterface::current->glCheckNamedFramebufferStatusEXT(framebuffer, target);
}

void REGAL_CALL gmock_glClientAttribDefaultEXT(GLbitfield mask) {
  return RegalGMockInterface::current->glClientAttribDefaultEXT(mask);
}

void REGAL_CALL gmock_glCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data) {
  return RegalGMockInterface::current->glCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, data);
}

void REGAL_CALL gmock_glCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits) {
  return RegalGMockInterface::current->glCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits);
}

void REGAL_CALL gmock_glCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits) {
  return RegalGMockInterface::current->glCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
}

void REGAL_CALL gmock_glCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data) {
  return RegalGMockInterface::current->glCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, data);
}

void REGAL_CALL gmock_glCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data) {
  return RegalGMockInterface::current->glCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

void REGAL_CALL gmock_glCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data) {
  // glCompressedMultiTexSubImage3DEXT has too many arguments for GMock.
}

void REGAL_CALL gmock_glCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits) {
  return RegalGMockInterface::current->glCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits);
}

void REGAL_CALL gmock_glCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits) {
  return RegalGMockInterface::current->glCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits);
}

void REGAL_CALL gmock_glCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits) {
  return RegalGMockInterface::current->glCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
}

void REGAL_CALL gmock_glCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits) {
  return RegalGMockInterface::current->glCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits);
}

void REGAL_CALL gmock_glCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits) {
  return RegalGMockInterface::current->glCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
}

void REGAL_CALL gmock_glCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits) {
  // glCompressedTextureSubImage3DEXT has too many arguments for GMock.
}

void REGAL_CALL gmock_glCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
  return RegalGMockInterface::current->glCopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border);
}

void REGAL_CALL gmock_glCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
  return RegalGMockInterface::current->glCopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border);
}

void REGAL_CALL gmock_glCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
  return RegalGMockInterface::current->glCopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width);
}

void REGAL_CALL gmock_glCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glCopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height);
}

void REGAL_CALL gmock_glCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glCopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

void REGAL_CALL gmock_glCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
  return RegalGMockInterface::current->glCopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border);
}

void REGAL_CALL gmock_glCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
  return RegalGMockInterface::current->glCopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border);
}

void REGAL_CALL gmock_glCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
  return RegalGMockInterface::current->glCopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width);
}

void REGAL_CALL gmock_glCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glCopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height);
}

void REGAL_CALL gmock_glCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glCopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

void REGAL_CALL gmock_glDisableClientStateIndexedEXT(GLenum array, GLuint index) {
  return RegalGMockInterface::current->glDisableClientStateIndexedEXT(array, index);
}

void REGAL_CALL gmock_glDisableClientStateiEXT(GLenum array, GLuint index) {
  return RegalGMockInterface::current->glDisableClientStateiEXT(array, index);
}

void REGAL_CALL gmock_glDisableVertexArrayAttribEXT(GLuint vaobj, GLenum array) {
  return RegalGMockInterface::current->glDisableVertexArrayAttribEXT(vaobj, array);
}

void REGAL_CALL gmock_glDisableVertexArrayEXT(GLuint vaobj, GLenum array) {
  return RegalGMockInterface::current->glDisableVertexArrayEXT(vaobj, array);
}

void REGAL_CALL gmock_glEnableClientStateIndexedEXT(GLenum array, GLuint index) {
  return RegalGMockInterface::current->glEnableClientStateIndexedEXT(array, index);
}

void REGAL_CALL gmock_glEnableClientStateiEXT(GLenum array, GLuint index) {
  return RegalGMockInterface::current->glEnableClientStateiEXT(array, index);
}

void REGAL_CALL gmock_glEnableVertexArrayAttribEXT(GLuint vaobj, GLenum array) {
  return RegalGMockInterface::current->glEnableVertexArrayAttribEXT(vaobj, array);
}

void REGAL_CALL gmock_glEnableVertexArrayEXT(GLuint vaobj, GLenum array) {
  return RegalGMockInterface::current->glEnableVertexArrayEXT(vaobj, array);
}

void REGAL_CALL gmock_glFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length) {
  return RegalGMockInterface::current->glFlushMappedNamedBufferRangeEXT(buffer, offset, length);
}

void REGAL_CALL gmock_glFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode) {
  return RegalGMockInterface::current->glFramebufferDrawBufferEXT(framebuffer, mode);
}

void REGAL_CALL gmock_glFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum *bufs) {
  return RegalGMockInterface::current->glFramebufferDrawBuffersEXT(framebuffer, n, bufs);
}

void REGAL_CALL gmock_glFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode) {
  return RegalGMockInterface::current->glFramebufferReadBufferEXT(framebuffer, mode);
}

void REGAL_CALL gmock_glGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target) {
  return RegalGMockInterface::current->glGenerateMultiTexMipmapEXT(texunit, target);
}

void REGAL_CALL gmock_glGenerateTextureMipmapEXT(GLuint texture, GLenum target) {
  return RegalGMockInterface::current->glGenerateTextureMipmapEXT(texture, target);
}

void REGAL_CALL gmock_glGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, GLvoid *img) {
  return RegalGMockInterface::current->glGetCompressedMultiTexImageEXT(texunit, target, lod, img);
}

void REGAL_CALL gmock_glGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, GLvoid *img) {
  return RegalGMockInterface::current->glGetCompressedTextureImageEXT(texture, target, lod, img);
}

void REGAL_CALL gmock_glGetDoubleIndexedvEXT(GLenum target, GLuint index, GLdouble *data) {
  return RegalGMockInterface::current->glGetDoubleIndexedvEXT(target, index, data);
}

void REGAL_CALL gmock_glGetDoublei_vEXT(GLenum target, GLuint index, GLdouble *data) {
  return RegalGMockInterface::current->glGetDoublei_vEXT(target, index, data);
}

void REGAL_CALL gmock_glGetFloatIndexedvEXT(GLenum target, GLuint index, GLfloat *data) {
  return RegalGMockInterface::current->glGetFloatIndexedvEXT(target, index, data);
}

void REGAL_CALL gmock_glGetFloati_vEXT(GLenum target, GLuint index, GLfloat *data) {
  return RegalGMockInterface::current->glGetFloati_vEXT(target, index, data);
}

void REGAL_CALL gmock_glGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetFramebufferParameterivEXT(framebuffer, pname, params);
}

void REGAL_CALL gmock_glGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetMultiTexEnvfvEXT(texunit, target, pname, params);
}

void REGAL_CALL gmock_glGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetMultiTexEnvivEXT(texunit, target, pname, params);
}

void REGAL_CALL gmock_glGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble *params) {
  return RegalGMockInterface::current->glGetMultiTexGendvEXT(texunit, coord, pname, params);
}

void REGAL_CALL gmock_glGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetMultiTexGenfvEXT(texunit, coord, pname, params);
}

void REGAL_CALL gmock_glGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetMultiTexGenivEXT(texunit, coord, pname, params);
}

void REGAL_CALL gmock_glGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels) {
  return RegalGMockInterface::current->glGetMultiTexImageEXT(texunit, target, level, format, type, pixels);
}

void REGAL_CALL gmock_glGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params);
}

void REGAL_CALL gmock_glGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetMultiTexLevelParameterivEXT(texunit, target, level, pname, params);
}

void REGAL_CALL gmock_glGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetMultiTexParameterIivEXT(texunit, target, pname, params);
}

void REGAL_CALL gmock_glGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint *params) {
  return RegalGMockInterface::current->glGetMultiTexParameterIuivEXT(texunit, target, pname, params);
}

void REGAL_CALL gmock_glGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetMultiTexParameterfvEXT(texunit, target, pname, params);
}

void REGAL_CALL gmock_glGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetMultiTexParameterivEXT(texunit, target, pname, params);
}

void REGAL_CALL gmock_glGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetNamedBufferParameterivEXT(buffer, pname, params);
}

void REGAL_CALL gmock_glGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, GLvoid **params) {
  return RegalGMockInterface::current->glGetNamedBufferPointervEXT(buffer, pname, params);
}

void REGAL_CALL gmock_glGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data) {
  return RegalGMockInterface::current->glGetNamedBufferSubDataEXT(buffer, offset, size, data);
}

void REGAL_CALL gmock_glGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params);
}

void REGAL_CALL gmock_glGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, GLint *params) {
  return RegalGMockInterface::current->glGetNamedProgramLocalParameterIivEXT(program, target, index, params);
}

void REGAL_CALL gmock_glGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, GLuint *params) {
  return RegalGMockInterface::current->glGetNamedProgramLocalParameterIuivEXT(program, target, index, params);
}

void REGAL_CALL gmock_glGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble *params) {
  return RegalGMockInterface::current->glGetNamedProgramLocalParameterdvEXT(program, target, index, params);
}

void REGAL_CALL gmock_glGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat *params) {
  return RegalGMockInterface::current->glGetNamedProgramLocalParameterfvEXT(program, target, index, params);
}

void REGAL_CALL gmock_glGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, GLvoid *string) {
  return RegalGMockInterface::current->glGetNamedProgramStringEXT(program, target, pname, string);
}

void REGAL_CALL gmock_glGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetNamedProgramivEXT(program, target, pname, params);
}

void REGAL_CALL gmock_glGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetNamedRenderbufferParameterivEXT(renderbuffer, pname, params);
}

void REGAL_CALL gmock_glGetPointerIndexedvEXT(GLenum target, GLuint index, GLvoid **data) {
  return RegalGMockInterface::current->glGetPointerIndexedvEXT(target, index, data);
}

void REGAL_CALL gmock_glGetPointeri_vEXT(GLenum pname, GLuint index, GLvoid **params) {
  return RegalGMockInterface::current->glGetPointeri_vEXT(pname, index, params);
}

void REGAL_CALL gmock_glGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels) {
  return RegalGMockInterface::current->glGetTextureImageEXT(texture, target, level, format, type, pixels);
}

void REGAL_CALL gmock_glGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetTextureLevelParameterfvEXT(texture, target, level, pname, params);
}

void REGAL_CALL gmock_glGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetTextureLevelParameterivEXT(texture, target, level, pname, params);
}

void REGAL_CALL gmock_glGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetTextureParameterIivEXT(texture, target, pname, params);
}

void REGAL_CALL gmock_glGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint *params) {
  return RegalGMockInterface::current->glGetTextureParameterIuivEXT(texture, target, pname, params);
}

void REGAL_CALL gmock_glGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetTextureParameterfvEXT(texture, target, pname, params);
}

void REGAL_CALL gmock_glGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetTextureParameterivEXT(texture, target, pname, params);
}

void REGAL_CALL gmock_glGetVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLint *param) {
  return RegalGMockInterface::current->glGetVertexArrayIntegeri_vEXT(vaobj, index, pname, param);
}

void REGAL_CALL gmock_glGetVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, GLint *param) {
  return RegalGMockInterface::current->glGetVertexArrayIntegervEXT(vaobj, pname, param);
}

void REGAL_CALL gmock_glGetVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLvoid **param) {
  return RegalGMockInterface::current->glGetVertexArrayPointeri_vEXT(vaobj, index, pname, param);
}

void REGAL_CALL gmock_glGetVertexArrayPointervEXT(GLuint vaobj, GLenum pname, GLvoid **param) {
  return RegalGMockInterface::current->glGetVertexArrayPointervEXT(vaobj, pname, param);
}

GLvoid * REGAL_CALL gmock_glMapNamedBufferEXT(GLuint buffer, GLenum access) {
  return RegalGMockInterface::current->glMapNamedBufferEXT(buffer, access);
}

GLvoid * REGAL_CALL gmock_glMapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) {
  return RegalGMockInterface::current->glMapNamedBufferRangeEXT(buffer, offset, length, access);
}

void REGAL_CALL gmock_glMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
  return RegalGMockInterface::current->glMatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar);
}

void REGAL_CALL gmock_glMatrixLoadIdentityEXT(GLenum mode) {
  return RegalGMockInterface::current->glMatrixLoadIdentityEXT(mode);
}

void REGAL_CALL gmock_glMatrixLoadTransposedEXT(GLenum mode, const GLdouble *m) {
  return RegalGMockInterface::current->glMatrixLoadTransposedEXT(mode, m);
}

void REGAL_CALL gmock_glMatrixLoadTransposefEXT(GLenum mode, const GLfloat *m) {
  return RegalGMockInterface::current->glMatrixLoadTransposefEXT(mode, m);
}

void REGAL_CALL gmock_glMatrixLoaddEXT(GLenum mode, const GLdouble *m) {
  return RegalGMockInterface::current->glMatrixLoaddEXT(mode, m);
}

void REGAL_CALL gmock_glMatrixLoadfEXT(GLenum mode, const GLfloat *m) {
  return RegalGMockInterface::current->glMatrixLoadfEXT(mode, m);
}

void REGAL_CALL gmock_glMatrixMultTransposedEXT(GLenum mode, const GLdouble *m) {
  return RegalGMockInterface::current->glMatrixMultTransposedEXT(mode, m);
}

void REGAL_CALL gmock_glMatrixMultTransposefEXT(GLenum mode, const GLfloat *m) {
  return RegalGMockInterface::current->glMatrixMultTransposefEXT(mode, m);
}

void REGAL_CALL gmock_glMatrixMultdEXT(GLenum mode, const GLdouble *m) {
  return RegalGMockInterface::current->glMatrixMultdEXT(mode, m);
}

void REGAL_CALL gmock_glMatrixMultfEXT(GLenum mode, const GLfloat *m) {
  return RegalGMockInterface::current->glMatrixMultfEXT(mode, m);
}

void REGAL_CALL gmock_glMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
  return RegalGMockInterface::current->glMatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar);
}

void REGAL_CALL gmock_glMatrixPopEXT(GLenum mode) {
  return RegalGMockInterface::current->glMatrixPopEXT(mode);
}

void REGAL_CALL gmock_glMatrixPushEXT(GLenum mode) {
  return RegalGMockInterface::current->glMatrixPushEXT(mode);
}

void REGAL_CALL gmock_glMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z) {
  return RegalGMockInterface::current->glMatrixRotatedEXT(mode, angle, x, y, z);
}

void REGAL_CALL gmock_glMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glMatrixRotatefEXT(mode, angle, x, y, z);
}

void REGAL_CALL gmock_glMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z) {
  return RegalGMockInterface::current->glMatrixScaledEXT(mode, x, y, z);
}

void REGAL_CALL gmock_glMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glMatrixScalefEXT(mode, x, y, z);
}

void REGAL_CALL gmock_glMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z) {
  return RegalGMockInterface::current->glMatrixTranslatedEXT(mode, x, y, z);
}

void REGAL_CALL gmock_glMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glMatrixTranslatefEXT(mode, x, y, z);
}

void REGAL_CALL gmock_glMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer) {
  return RegalGMockInterface::current->glMultiTexBufferEXT(texunit, target, internalformat, buffer);
}

void REGAL_CALL gmock_glMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glMultiTexCoordPointerEXT(texunit, size, type, stride, pointer);
}

void REGAL_CALL gmock_glMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glMultiTexEnvfEXT(texunit, target, pname, param);
}

void REGAL_CALL gmock_glMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glMultiTexEnvfvEXT(texunit, target, pname, params);
}

void REGAL_CALL gmock_glMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param) {
  return RegalGMockInterface::current->glMultiTexEnviEXT(texunit, target, pname, param);
}

void REGAL_CALL gmock_glMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glMultiTexEnvivEXT(texunit, target, pname, params);
}

void REGAL_CALL gmock_glMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param) {
  return RegalGMockInterface::current->glMultiTexGendEXT(texunit, coord, pname, param);
}

void REGAL_CALL gmock_glMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params) {
  return RegalGMockInterface::current->glMultiTexGendvEXT(texunit, coord, pname, params);
}

void REGAL_CALL gmock_glMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glMultiTexGenfEXT(texunit, coord, pname, param);
}

void REGAL_CALL gmock_glMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glMultiTexGenfvEXT(texunit, coord, pname, params);
}

void REGAL_CALL gmock_glMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param) {
  return RegalGMockInterface::current->glMultiTexGeniEXT(texunit, coord, pname, param);
}

void REGAL_CALL gmock_glMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glMultiTexGenivEXT(texunit, coord, pname, params);
}

void REGAL_CALL gmock_glMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels) {
  return RegalGMockInterface::current->glMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels);
}

void REGAL_CALL gmock_glMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels) {
  return RegalGMockInterface::current->glMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels);
}

void REGAL_CALL gmock_glMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels) {
  // glMultiTexImage3DEXT has too many arguments for GMock.
}

void REGAL_CALL gmock_glMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glMultiTexParameterIivEXT(texunit, target, pname, params);
}

void REGAL_CALL gmock_glMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint *params) {
  return RegalGMockInterface::current->glMultiTexParameterIuivEXT(texunit, target, pname, params);
}

void REGAL_CALL gmock_glMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glMultiTexParameterfEXT(texunit, target, pname, param);
}

void REGAL_CALL gmock_glMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *param) {
  return RegalGMockInterface::current->glMultiTexParameterfvEXT(texunit, target, pname, param);
}

void REGAL_CALL gmock_glMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param) {
  return RegalGMockInterface::current->glMultiTexParameteriEXT(texunit, target, pname, param);
}

void REGAL_CALL gmock_glMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *param) {
  return RegalGMockInterface::current->glMultiTexParameterivEXT(texunit, target, pname, param);
}

void REGAL_CALL gmock_glMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer) {
  return RegalGMockInterface::current->glMultiTexRenderbufferEXT(texunit, target, renderbuffer);
}

void REGAL_CALL gmock_glMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels) {
  return RegalGMockInterface::current->glMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels);
}

void REGAL_CALL gmock_glMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels) {
  return RegalGMockInterface::current->glMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
}

void REGAL_CALL gmock_glMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels) {
  // glMultiTexSubImage3DEXT has too many arguments for GMock.
}

void REGAL_CALL gmock_glNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage) {
  return RegalGMockInterface::current->glNamedBufferDataEXT(buffer, size, data, usage);
}

void REGAL_CALL gmock_glNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data) {
  return RegalGMockInterface::current->glNamedBufferSubDataEXT(buffer, offset, size, data);
}

void REGAL_CALL gmock_glNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
  return RegalGMockInterface::current->glNamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size);
}

void REGAL_CALL gmock_glNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
  return RegalGMockInterface::current->glNamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer);
}

void REGAL_CALL gmock_glNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  return RegalGMockInterface::current->glNamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level);
}

void REGAL_CALL gmock_glNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  return RegalGMockInterface::current->glNamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level);
}

void REGAL_CALL gmock_glNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
  return RegalGMockInterface::current->glNamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset);
}

void REGAL_CALL gmock_glNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) {
  return RegalGMockInterface::current->glNamedFramebufferTextureEXT(framebuffer, attachment, texture, level);
}

void REGAL_CALL gmock_glNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face) {
  return RegalGMockInterface::current->glNamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face);
}

void REGAL_CALL gmock_glNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) {
  return RegalGMockInterface::current->glNamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer);
}

void REGAL_CALL gmock_glNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  return RegalGMockInterface::current->glNamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w);
}

void REGAL_CALL gmock_glNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble *params) {
  return RegalGMockInterface::current->glNamedProgramLocalParameter4dvEXT(program, target, index, params);
}

void REGAL_CALL gmock_glNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  return RegalGMockInterface::current->glNamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w);
}

void REGAL_CALL gmock_glNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat *params) {
  return RegalGMockInterface::current->glNamedProgramLocalParameter4fvEXT(program, target, index, params);
}

void REGAL_CALL gmock_glNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) {
  return RegalGMockInterface::current->glNamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w);
}

void REGAL_CALL gmock_glNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, const GLint *params) {
  return RegalGMockInterface::current->glNamedProgramLocalParameterI4ivEXT(program, target, index, params);
}

void REGAL_CALL gmock_glNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
  return RegalGMockInterface::current->glNamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w);
}

void REGAL_CALL gmock_glNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, const GLuint *params) {
  return RegalGMockInterface::current->glNamedProgramLocalParameterI4uivEXT(program, target, index, params);
}

void REGAL_CALL gmock_glNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params) {
  return RegalGMockInterface::current->glNamedProgramLocalParameters4fvEXT(program, target, index, count, params);
}

void REGAL_CALL gmock_glNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params) {
  return RegalGMockInterface::current->glNamedProgramLocalParametersI4ivEXT(program, target, index, count, params);
}

void REGAL_CALL gmock_glNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params) {
  return RegalGMockInterface::current->glNamedProgramLocalParametersI4uivEXT(program, target, index, count, params);
}

void REGAL_CALL gmock_glNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid *string) {
  return RegalGMockInterface::current->glNamedProgramStringEXT(program, target, format, len, string);
}

void REGAL_CALL gmock_glNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glNamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height);
}

void REGAL_CALL gmock_glNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
}

void REGAL_CALL gmock_glNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glNamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height);
}

void REGAL_CALL gmock_glProgramUniform1dEXT(GLuint program, GLint location, GLdouble x) {
  return RegalGMockInterface::current->glProgramUniform1dEXT(program, location, x);
}

void REGAL_CALL gmock_glProgramUniform1dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
  return RegalGMockInterface::current->glProgramUniform1dvEXT(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0) {
  return RegalGMockInterface::current->glProgramUniform1fEXT(program, location, v0);
}

void REGAL_CALL gmock_glProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
  return RegalGMockInterface::current->glProgramUniform1fvEXT(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform1iEXT(GLuint program, GLint location, GLint v0) {
  return RegalGMockInterface::current->glProgramUniform1iEXT(program, location, v0);
}

void REGAL_CALL gmock_glProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value) {
  return RegalGMockInterface::current->glProgramUniform1ivEXT(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0) {
  return RegalGMockInterface::current->glProgramUniform1uiEXT(program, location, v0);
}

void REGAL_CALL gmock_glProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value) {
  return RegalGMockInterface::current->glProgramUniform1uivEXT(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y) {
  return RegalGMockInterface::current->glProgramUniform2dEXT(program, location, x, y);
}

void REGAL_CALL gmock_glProgramUniform2dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
  return RegalGMockInterface::current->glProgramUniform2dvEXT(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1) {
  return RegalGMockInterface::current->glProgramUniform2fEXT(program, location, v0, v1);
}

void REGAL_CALL gmock_glProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
  return RegalGMockInterface::current->glProgramUniform2fvEXT(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1) {
  return RegalGMockInterface::current->glProgramUniform2iEXT(program, location, v0, v1);
}

void REGAL_CALL gmock_glProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value) {
  return RegalGMockInterface::current->glProgramUniform2ivEXT(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1) {
  return RegalGMockInterface::current->glProgramUniform2uiEXT(program, location, v0, v1);
}

void REGAL_CALL gmock_glProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value) {
  return RegalGMockInterface::current->glProgramUniform2uivEXT(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z) {
  return RegalGMockInterface::current->glProgramUniform3dEXT(program, location, x, y, z);
}

void REGAL_CALL gmock_glProgramUniform3dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
  return RegalGMockInterface::current->glProgramUniform3dvEXT(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
  return RegalGMockInterface::current->glProgramUniform3fEXT(program, location, v0, v1, v2);
}

void REGAL_CALL gmock_glProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
  return RegalGMockInterface::current->glProgramUniform3fvEXT(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) {
  return RegalGMockInterface::current->glProgramUniform3iEXT(program, location, v0, v1, v2);
}

void REGAL_CALL gmock_glProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value) {
  return RegalGMockInterface::current->glProgramUniform3ivEXT(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) {
  return RegalGMockInterface::current->glProgramUniform3uiEXT(program, location, v0, v1, v2);
}

void REGAL_CALL gmock_glProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value) {
  return RegalGMockInterface::current->glProgramUniform3uivEXT(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  return RegalGMockInterface::current->glProgramUniform4dEXT(program, location, x, y, z, w);
}

void REGAL_CALL gmock_glProgramUniform4dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value) {
  return RegalGMockInterface::current->glProgramUniform4dvEXT(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
  return RegalGMockInterface::current->glProgramUniform4fEXT(program, location, v0, v1, v2, v3);
}

void REGAL_CALL gmock_glProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value) {
  return RegalGMockInterface::current->glProgramUniform4fvEXT(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
  return RegalGMockInterface::current->glProgramUniform4iEXT(program, location, v0, v1, v2, v3);
}

void REGAL_CALL gmock_glProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value) {
  return RegalGMockInterface::current->glProgramUniform4ivEXT(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
  return RegalGMockInterface::current->glProgramUniform4uiEXT(program, location, v0, v1, v2, v3);
}

void REGAL_CALL gmock_glProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value) {
  return RegalGMockInterface::current->glProgramUniform4uivEXT(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix2dvEXT(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix2fvEXT(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix3dvEXT(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix3fvEXT(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix4dvEXT(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix4fvEXT(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value);
}

void REGAL_CALL gmock_glPushClientAttribDefaultEXT(GLbitfield mask) {
  return RegalGMockInterface::current->glPushClientAttribDefaultEXT(mask);
}

void REGAL_CALL gmock_glTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer) {
  return RegalGMockInterface::current->glTextureBufferEXT(texture, target, internalformat, buffer);
}

void REGAL_CALL gmock_glTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels) {
  return RegalGMockInterface::current->glTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels);
}

void REGAL_CALL gmock_glTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels) {
  return RegalGMockInterface::current->glTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels);
}

void REGAL_CALL gmock_glTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels) {
  // glTextureImage3DEXT has too many arguments for GMock.
}

void REGAL_CALL gmock_glTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glTextureParameterIivEXT(texture, target, pname, params);
}

void REGAL_CALL gmock_glTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint *params) {
  return RegalGMockInterface::current->glTextureParameterIuivEXT(texture, target, pname, params);
}

void REGAL_CALL gmock_glTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glTextureParameterfEXT(texture, target, pname, param);
}

void REGAL_CALL gmock_glTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const GLfloat *param) {
  return RegalGMockInterface::current->glTextureParameterfvEXT(texture, target, pname, param);
}

void REGAL_CALL gmock_glTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param) {
  return RegalGMockInterface::current->glTextureParameteriEXT(texture, target, pname, param);
}

void REGAL_CALL gmock_glTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *param) {
  return RegalGMockInterface::current->glTextureParameterivEXT(texture, target, pname, param);
}

void REGAL_CALL gmock_glTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer) {
  return RegalGMockInterface::current->glTextureRenderbufferEXT(texture, target, renderbuffer);
}

void REGAL_CALL gmock_glTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels) {
  return RegalGMockInterface::current->glTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels);
}

void REGAL_CALL gmock_glTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels) {
  return RegalGMockInterface::current->glTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
}

void REGAL_CALL gmock_glTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels) {
  // glTextureSubImage3DEXT has too many arguments for GMock.
}

GLboolean REGAL_CALL gmock_glUnmapNamedBufferEXT(GLuint buffer) {
  return RegalGMockInterface::current->glUnmapNamedBufferEXT(buffer);
}

void REGAL_CALL gmock_glVertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset) {
  return RegalGMockInterface::current->glVertexArrayColorOffsetEXT(vaobj, buffer, size, type, stride, offset);
}

void REGAL_CALL gmock_glVertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, const GLintptr offset) {
  return RegalGMockInterface::current->glVertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset);
}

void REGAL_CALL gmock_glVertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset) {
  return RegalGMockInterface::current->glVertexArrayFogCoordOffsetEXT(vaobj, buffer, type, stride, offset);
}

void REGAL_CALL gmock_glVertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset) {
  return RegalGMockInterface::current->glVertexArrayIndexOffsetEXT(vaobj, buffer, type, stride, offset);
}

void REGAL_CALL gmock_glVertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLintptr offset) {
  return RegalGMockInterface::current->glVertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, type, stride, offset);
}

void REGAL_CALL gmock_glVertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset) {
  return RegalGMockInterface::current->glVertexArrayNormalOffsetEXT(vaobj, buffer, type, stride, offset);
}

void REGAL_CALL gmock_glVertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset) {
  return RegalGMockInterface::current->glVertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, type, stride, offset);
}

void REGAL_CALL gmock_glVertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset) {
  return RegalGMockInterface::current->glVertexArrayTexCoordOffsetEXT(vaobj, buffer, size, type, stride, offset);
}

void REGAL_CALL gmock_glVertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, const GLintptr offset) {
  return RegalGMockInterface::current->glVertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, type, stride, offset);
}

void REGAL_CALL gmock_glVertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLintptr offset) {
  return RegalGMockInterface::current->glVertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type, normalized, stride, offset);
}

void REGAL_CALL gmock_glVertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset) {
  return RegalGMockInterface::current->glVertexArrayVertexOffsetEXT(vaobj, buffer, size, type, stride, offset);
}

void REGAL_CALL gmock_glDiscardFramebufferEXT(GLenum target, GLsizei numAttachments, const GLenum *attachments) {
  return RegalGMockInterface::current->glDiscardFramebufferEXT(target, numAttachments, attachments);
}

void REGAL_CALL gmock_glColorMaskIndexedEXT(GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a) {
  return RegalGMockInterface::current->glColorMaskIndexedEXT(buf, r, g, b, a);
}

void REGAL_CALL gmock_glDisableIndexedEXT(GLenum target, GLuint index) {
  return RegalGMockInterface::current->glDisableIndexedEXT(target, index);
}

void REGAL_CALL gmock_glEnableIndexedEXT(GLenum target, GLuint index) {
  return RegalGMockInterface::current->glEnableIndexedEXT(target, index);
}

void REGAL_CALL gmock_glGetBooleanIndexedvEXT(GLenum value, GLuint index, GLboolean *data) {
  return RegalGMockInterface::current->glGetBooleanIndexedvEXT(value, index, data);
}

void REGAL_CALL gmock_glGetIntegerIndexedvEXT(GLenum value, GLuint index, GLint *data) {
  return RegalGMockInterface::current->glGetIntegerIndexedvEXT(value, index, data);
}

GLboolean REGAL_CALL gmock_glIsEnabledIndexedEXT(GLenum target, GLuint index) {
  return RegalGMockInterface::current->glIsEnabledIndexedEXT(target, index);
}

void REGAL_CALL gmock_glDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount) {
  return RegalGMockInterface::current->glDrawArraysInstancedEXT(mode, start, count, primcount);
}

void REGAL_CALL gmock_glDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount) {
  return RegalGMockInterface::current->glDrawElementsInstancedEXT(mode, count, type, indices, primcount);
}

void REGAL_CALL gmock_glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices) {
  return RegalGMockInterface::current->glDrawRangeElementsEXT(mode, start, end, count, type, indices);
}

void REGAL_CALL gmock_glFogCoordPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glFogCoordPointerEXT(type, stride, pointer);
}

void REGAL_CALL gmock_glFogCoorddEXT(GLdouble coord) {
  return RegalGMockInterface::current->glFogCoorddEXT(coord);
}

void REGAL_CALL gmock_glFogCoorddvEXT(const GLdouble *coord) {
  return RegalGMockInterface::current->glFogCoorddvEXT(coord);
}

void REGAL_CALL gmock_glFogCoordfEXT(GLfloat coord) {
  return RegalGMockInterface::current->glFogCoordfEXT(coord);
}

void REGAL_CALL gmock_glFogCoordfvEXT(const GLfloat *coord) {
  return RegalGMockInterface::current->glFogCoordfvEXT(coord);
}

void REGAL_CALL gmock_glFragmentColorMaterialEXT(GLenum face, GLenum mode) {
  return RegalGMockInterface::current->glFragmentColorMaterialEXT(face, mode);
}

void REGAL_CALL gmock_glFragmentLightModelfEXT(GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glFragmentLightModelfEXT(pname, param);
}

void REGAL_CALL gmock_glFragmentLightModelfvEXT(GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glFragmentLightModelfvEXT(pname, params);
}

void REGAL_CALL gmock_glFragmentLightModeliEXT(GLenum pname, GLint param) {
  return RegalGMockInterface::current->glFragmentLightModeliEXT(pname, param);
}

void REGAL_CALL gmock_glFragmentLightModelivEXT(GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glFragmentLightModelivEXT(pname, params);
}

void REGAL_CALL gmock_glFragmentLightfEXT(GLenum light, GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glFragmentLightfEXT(light, pname, param);
}

void REGAL_CALL gmock_glFragmentLightfvEXT(GLenum light, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glFragmentLightfvEXT(light, pname, params);
}

void REGAL_CALL gmock_glFragmentLightiEXT(GLenum light, GLenum pname, GLint param) {
  return RegalGMockInterface::current->glFragmentLightiEXT(light, pname, param);
}

void REGAL_CALL gmock_glFragmentLightivEXT(GLenum light, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glFragmentLightivEXT(light, pname, params);
}

void REGAL_CALL gmock_glFragmentMaterialfEXT(GLenum face, GLenum pname, const GLfloat param) {
  return RegalGMockInterface::current->glFragmentMaterialfEXT(face, pname, param);
}

void REGAL_CALL gmock_glFragmentMaterialfvEXT(GLenum face, GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glFragmentMaterialfvEXT(face, pname, params);
}

void REGAL_CALL gmock_glFragmentMaterialiEXT(GLenum face, GLenum pname, const GLint param) {
  return RegalGMockInterface::current->glFragmentMaterialiEXT(face, pname, param);
}

void REGAL_CALL gmock_glFragmentMaterialivEXT(GLenum face, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glFragmentMaterialivEXT(face, pname, params);
}

void REGAL_CALL gmock_glGetFragmentLightfvEXT(GLenum light, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetFragmentLightfvEXT(light, pname, params);
}

void REGAL_CALL gmock_glGetFragmentLightivEXT(GLenum light, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetFragmentLightivEXT(light, pname, params);
}

void REGAL_CALL gmock_glGetFragmentMaterialfvEXT(GLenum face, GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glGetFragmentMaterialfvEXT(face, pname, params);
}

void REGAL_CALL gmock_glGetFragmentMaterialivEXT(GLenum face, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glGetFragmentMaterialivEXT(face, pname, params);
}

void REGAL_CALL gmock_glLightEnviEXT(GLenum pname, GLint param) {
  return RegalGMockInterface::current->glLightEnviEXT(pname, param);
}

void REGAL_CALL gmock_glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  return RegalGMockInterface::current->glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

void REGAL_CALL gmock_glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height);
}

void REGAL_CALL gmock_glBindFramebufferEXT(GLenum target, GLuint framebuffer) {
  return RegalGMockInterface::current->glBindFramebufferEXT(target, framebuffer);
}

void REGAL_CALL gmock_glBindRenderbufferEXT(GLenum target, GLuint renderbuffer) {
  return RegalGMockInterface::current->glBindRenderbufferEXT(target, renderbuffer);
}

GLenum REGAL_CALL gmock_glCheckFramebufferStatusEXT(GLenum target) {
  return RegalGMockInterface::current->glCheckFramebufferStatusEXT(target);
}

void REGAL_CALL gmock_glDeleteFramebuffersEXT(GLsizei n, const GLuint *framebuffers) {
  return RegalGMockInterface::current->glDeleteFramebuffersEXT(n, framebuffers);
}

void REGAL_CALL gmock_glDeleteRenderbuffersEXT(GLsizei n, const GLuint *renderbuffers) {
  return RegalGMockInterface::current->glDeleteRenderbuffersEXT(n, renderbuffers);
}

void REGAL_CALL gmock_glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
  return RegalGMockInterface::current->glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer);
}

void REGAL_CALL gmock_glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  return RegalGMockInterface::current->glFramebufferTexture1DEXT(target, attachment, textarget, texture, level);
}

void REGAL_CALL gmock_glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  return RegalGMockInterface::current->glFramebufferTexture2DEXT(target, attachment, textarget, texture, level);
}

void REGAL_CALL gmock_glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
  return RegalGMockInterface::current->glFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset);
}

void REGAL_CALL gmock_glGenFramebuffersEXT(GLsizei n, GLuint *framebuffers) {
  return RegalGMockInterface::current->glGenFramebuffersEXT(n, framebuffers);
}

void REGAL_CALL gmock_glGenRenderbuffersEXT(GLsizei n, GLuint *renderbuffers) {
  return RegalGMockInterface::current->glGenRenderbuffersEXT(n, renderbuffers);
}

void REGAL_CALL gmock_glGenerateMipmapEXT(GLenum target) {
  return RegalGMockInterface::current->glGenerateMipmapEXT(target);
}

void REGAL_CALL gmock_glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params);
}

void REGAL_CALL gmock_glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetRenderbufferParameterivEXT(target, pname, params);
}

GLboolean REGAL_CALL gmock_glIsFramebufferEXT(GLuint framebuffer) {
  return RegalGMockInterface::current->glIsFramebufferEXT(framebuffer);
}

GLboolean REGAL_CALL gmock_glIsRenderbufferEXT(GLuint renderbuffer) {
  return RegalGMockInterface::current->glIsRenderbufferEXT(renderbuffer);
}

void REGAL_CALL gmock_glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glRenderbufferStorageEXT(target, internalformat, width, height);
}

void REGAL_CALL gmock_glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level) {
  return RegalGMockInterface::current->glFramebufferTextureEXT(target, attachment, texture, level);
}

void REGAL_CALL gmock_glFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) {
  return RegalGMockInterface::current->glFramebufferTextureFaceEXT(target, attachment, texture, level, face);
}

void REGAL_CALL gmock_glProgramParameteriEXT(GLuint program, GLenum pname, GLint value) {
  return RegalGMockInterface::current->glProgramParameteriEXT(program, pname, value);
}

void REGAL_CALL gmock_glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params) {
  return RegalGMockInterface::current->glProgramEnvParameters4fvEXT(target, index, count, params);
}

void REGAL_CALL gmock_glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params) {
  return RegalGMockInterface::current->glProgramLocalParameters4fvEXT(target, index, count, params);
}

void REGAL_CALL gmock_glBindFragDataLocationEXT(GLuint program, GLuint color, const GLchar *name) {
  return RegalGMockInterface::current->glBindFragDataLocationEXT(program, color, name);
}

GLint REGAL_CALL gmock_glGetFragDataLocationEXT(GLuint program, const GLchar *name) {
  return RegalGMockInterface::current->glGetFragDataLocationEXT(program, name);
}

void REGAL_CALL gmock_glGetUniformuivEXT(GLuint program, GLint location, GLuint *params) {
  return RegalGMockInterface::current->glGetUniformuivEXT(program, location, params);
}

void REGAL_CALL gmock_glGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetVertexAttribIivEXT(index, pname, params);
}

void REGAL_CALL gmock_glGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint *params) {
  return RegalGMockInterface::current->glGetVertexAttribIuivEXT(index, pname, params);
}

void REGAL_CALL gmock_glUniform1uiEXT(GLint location, GLuint v0) {
  return RegalGMockInterface::current->glUniform1uiEXT(location, v0);
}

void REGAL_CALL gmock_glUniform1uivEXT(GLint location, GLsizei count, const GLuint *value) {
  return RegalGMockInterface::current->glUniform1uivEXT(location, count, value);
}

void REGAL_CALL gmock_glUniform2uiEXT(GLint location, GLuint v0, GLuint v1) {
  return RegalGMockInterface::current->glUniform2uiEXT(location, v0, v1);
}

void REGAL_CALL gmock_glUniform2uivEXT(GLint location, GLsizei count, const GLuint *value) {
  return RegalGMockInterface::current->glUniform2uivEXT(location, count, value);
}

void REGAL_CALL gmock_glUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2) {
  return RegalGMockInterface::current->glUniform3uiEXT(location, v0, v1, v2);
}

void REGAL_CALL gmock_glUniform3uivEXT(GLint location, GLsizei count, const GLuint *value) {
  return RegalGMockInterface::current->glUniform3uivEXT(location, count, value);
}

void REGAL_CALL gmock_glUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
  return RegalGMockInterface::current->glUniform4uiEXT(location, v0, v1, v2, v3);
}

void REGAL_CALL gmock_glUniform4uivEXT(GLint location, GLsizei count, const GLuint *value) {
  return RegalGMockInterface::current->glUniform4uivEXT(location, count, value);
}

void REGAL_CALL gmock_glVertexAttribI1iEXT(GLuint index, GLint x) {
  return RegalGMockInterface::current->glVertexAttribI1iEXT(index, x);
}

void REGAL_CALL gmock_glVertexAttribI1ivEXT(GLuint index, const GLint *v) {
  return RegalGMockInterface::current->glVertexAttribI1ivEXT(index, v);
}

void REGAL_CALL gmock_glVertexAttribI1uiEXT(GLuint index, GLuint x) {
  return RegalGMockInterface::current->glVertexAttribI1uiEXT(index, x);
}

void REGAL_CALL gmock_glVertexAttribI1uivEXT(GLuint index, const GLuint *v) {
  return RegalGMockInterface::current->glVertexAttribI1uivEXT(index, v);
}

void REGAL_CALL gmock_glVertexAttribI2iEXT(GLuint index, GLint x, GLint y) {
  return RegalGMockInterface::current->glVertexAttribI2iEXT(index, x, y);
}

void REGAL_CALL gmock_glVertexAttribI2ivEXT(GLuint index, const GLint *v) {
  return RegalGMockInterface::current->glVertexAttribI2ivEXT(index, v);
}

void REGAL_CALL gmock_glVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y) {
  return RegalGMockInterface::current->glVertexAttribI2uiEXT(index, x, y);
}

void REGAL_CALL gmock_glVertexAttribI2uivEXT(GLuint index, const GLuint *v) {
  return RegalGMockInterface::current->glVertexAttribI2uivEXT(index, v);
}

void REGAL_CALL gmock_glVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z) {
  return RegalGMockInterface::current->glVertexAttribI3iEXT(index, x, y, z);
}

void REGAL_CALL gmock_glVertexAttribI3ivEXT(GLuint index, const GLint *v) {
  return RegalGMockInterface::current->glVertexAttribI3ivEXT(index, v);
}

void REGAL_CALL gmock_glVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z) {
  return RegalGMockInterface::current->glVertexAttribI3uiEXT(index, x, y, z);
}

void REGAL_CALL gmock_glVertexAttribI3uivEXT(GLuint index, const GLuint *v) {
  return RegalGMockInterface::current->glVertexAttribI3uivEXT(index, v);
}

void REGAL_CALL gmock_glVertexAttribI4bvEXT(GLuint index, const GLbyte *v) {
  return RegalGMockInterface::current->glVertexAttribI4bvEXT(index, v);
}

void REGAL_CALL gmock_glVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w) {
  return RegalGMockInterface::current->glVertexAttribI4iEXT(index, x, y, z, w);
}

void REGAL_CALL gmock_glVertexAttribI4ivEXT(GLuint index, const GLint *v) {
  return RegalGMockInterface::current->glVertexAttribI4ivEXT(index, v);
}

void REGAL_CALL gmock_glVertexAttribI4svEXT(GLuint index, const GLshort *v) {
  return RegalGMockInterface::current->glVertexAttribI4svEXT(index, v);
}

void REGAL_CALL gmock_glVertexAttribI4ubvEXT(GLuint index, const GLubyte *v) {
  return RegalGMockInterface::current->glVertexAttribI4ubvEXT(index, v);
}

void REGAL_CALL gmock_glVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
  return RegalGMockInterface::current->glVertexAttribI4uiEXT(index, x, y, z, w);
}

void REGAL_CALL gmock_glVertexAttribI4uivEXT(GLuint index, const GLuint *v) {
  return RegalGMockInterface::current->glVertexAttribI4uivEXT(index, v);
}

void REGAL_CALL gmock_glVertexAttribI4usvEXT(GLuint index, const GLushort *v) {
  return RegalGMockInterface::current->glVertexAttribI4usvEXT(index, v);
}

void REGAL_CALL gmock_glVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glVertexAttribIPointerEXT(index, size, type, stride, pointer);
}

void REGAL_CALL gmock_glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values) {
  return RegalGMockInterface::current->glGetHistogramEXT(target, reset, format, type, values);
}

void REGAL_CALL gmock_glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetHistogramParameterfvEXT(target, pname, params);
}

void REGAL_CALL gmock_glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetHistogramParameterivEXT(target, pname, params);
}

void REGAL_CALL gmock_glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values) {
  return RegalGMockInterface::current->glGetMinmaxEXT(target, reset, format, type, values);
}

void REGAL_CALL gmock_glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetMinmaxParameterfvEXT(target, pname, params);
}

void REGAL_CALL gmock_glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetMinmaxParameterivEXT(target, pname, params);
}

void REGAL_CALL gmock_glHistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) {
  return RegalGMockInterface::current->glHistogramEXT(target, width, internalformat, sink);
}

void REGAL_CALL gmock_glMinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink) {
  return RegalGMockInterface::current->glMinmaxEXT(target, internalformat, sink);
}

void REGAL_CALL gmock_glResetHistogramEXT(GLenum target) {
  return RegalGMockInterface::current->glResetHistogramEXT(target);
}

void REGAL_CALL gmock_glResetMinmaxEXT(GLenum target) {
  return RegalGMockInterface::current->glResetMinmaxEXT(target);
}

void REGAL_CALL gmock_glIndexFuncEXT(GLenum func, GLfloat ref) {
  return RegalGMockInterface::current->glIndexFuncEXT(func, ref);
}

void REGAL_CALL gmock_glIndexMaterialEXT(GLenum face, GLenum mode) {
  return RegalGMockInterface::current->glIndexMaterialEXT(face, mode);
}

void REGAL_CALL gmock_glApplyTextureEXT(GLenum mode) {
  return RegalGMockInterface::current->glApplyTextureEXT(mode);
}

void REGAL_CALL gmock_glTextureLightEXT(GLenum pname) {
  return RegalGMockInterface::current->glTextureLightEXT(pname);
}

void REGAL_CALL gmock_glTextureMaterialEXT(GLenum face, GLenum mode) {
  return RegalGMockInterface::current->glTextureMaterialEXT(face, mode);
}

void REGAL_CALL gmock_glFlushMappedBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length) {
  return RegalGMockInterface::current->glFlushMappedBufferRangeEXT(target, offset, length);
}

GLvoid * REGAL_CALL gmock_glMapBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) {
  return RegalGMockInterface::current->glMapBufferRangeEXT(target, offset, length, access);
}

void REGAL_CALL gmock_glMultiDrawArraysEXT(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount) {
  return RegalGMockInterface::current->glMultiDrawArraysEXT(mode, first, count, primcount);
}

void REGAL_CALL gmock_glMultiDrawElementsEXT(GLenum mode, GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount) {
  return RegalGMockInterface::current->glMultiDrawElementsEXT(mode, count, type, indices, primcount);
}

void REGAL_CALL gmock_glSampleMaskEXT(GLclampf value, GLboolean invert) {
  return RegalGMockInterface::current->glSampleMaskEXT(value, invert);
}

void REGAL_CALL gmock_glSamplePatternEXT(GLenum pattern) {
  return RegalGMockInterface::current->glSamplePatternEXT(pattern);
}

void REGAL_CALL gmock_glFramebufferTexture2DMultisampleEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples) {
  return RegalGMockInterface::current->glFramebufferTexture2DMultisampleEXT(target, attachment, textarget, texture, level, samples);
}

void REGAL_CALL gmock_glDrawBuffersIndexedEXT(GLint n, const GLenum *location, const GLint *indices) {
  return RegalGMockInterface::current->glDrawBuffersIndexedEXT(n, location, indices);
}

void REGAL_CALL gmock_glGetIntegeri_vEXT(GLenum target, GLuint index, GLint *data) {
  return RegalGMockInterface::current->glGetIntegeri_vEXT(target, index, data);
}

void REGAL_CALL gmock_glReadBufferIndexedEXT(GLenum src, GLint index) {
  return RegalGMockInterface::current->glReadBufferIndexedEXT(src, index);
}

void REGAL_CALL gmock_glBeginQueryEXT(GLenum target, GLuint id) {
  return RegalGMockInterface::current->glBeginQueryEXT(target, id);
}

void REGAL_CALL gmock_glDeleteQueriesEXT(GLsizei n, const GLuint *ids) {
  return RegalGMockInterface::current->glDeleteQueriesEXT(n, ids);
}

void REGAL_CALL gmock_glEndQueryEXT(GLenum target) {
  return RegalGMockInterface::current->glEndQueryEXT(target);
}

void REGAL_CALL gmock_glGenQueriesEXT(GLsizei n, GLuint *ids) {
  return RegalGMockInterface::current->glGenQueriesEXT(n, ids);
}

void REGAL_CALL gmock_glGetQueryObjectuivEXT(GLuint id, GLenum pname, GLuint *params) {
  return RegalGMockInterface::current->glGetQueryObjectuivEXT(id, pname, params);
}

void REGAL_CALL gmock_glGetQueryivEXT(GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetQueryivEXT(target, pname, params);
}

GLboolean REGAL_CALL gmock_glIsQueryEXT(GLuint id) {
  return RegalGMockInterface::current->glIsQueryEXT(id);
}

void REGAL_CALL gmock_glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid *table) {
  return RegalGMockInterface::current->glColorTableEXT(target, internalFormat, width, format, type, table);
}

void REGAL_CALL gmock_glGetColorTableEXT(GLenum target, GLenum format, GLenum type, GLvoid *data) {
  return RegalGMockInterface::current->glGetColorTableEXT(target, format, type, data);
}

void REGAL_CALL gmock_glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetColorTableParameterfvEXT(target, pname, params);
}

void REGAL_CALL gmock_glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetColorTableParameterivEXT(target, pname, params);
}

void REGAL_CALL gmock_glGetPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glGetPixelTransformParameterfvEXT(target, pname, params);
}

void REGAL_CALL gmock_glGetPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glGetPixelTransformParameterivEXT(target, pname, params);
}

void REGAL_CALL gmock_glPixelTransformParameterfEXT(GLenum target, GLenum pname, const GLfloat param) {
  return RegalGMockInterface::current->glPixelTransformParameterfEXT(target, pname, param);
}

void REGAL_CALL gmock_glPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glPixelTransformParameterfvEXT(target, pname, params);
}

void REGAL_CALL gmock_glPixelTransformParameteriEXT(GLenum target, GLenum pname, const GLint param) {
  return RegalGMockInterface::current->glPixelTransformParameteriEXT(target, pname, param);
}

void REGAL_CALL gmock_glPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glPixelTransformParameterivEXT(target, pname, params);
}

void REGAL_CALL gmock_glPointParameterfEXT(GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glPointParameterfEXT(pname, param);
}

void REGAL_CALL gmock_glPointParameterfvEXT(GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glPointParameterfvEXT(pname, params);
}

void REGAL_CALL gmock_glPolygonOffsetEXT(GLfloat factor, GLfloat bias) {
  return RegalGMockInterface::current->glPolygonOffsetEXT(factor, bias);
}

void REGAL_CALL gmock_glProvokingVertexEXT(GLenum mode) {
  return RegalGMockInterface::current->glProvokingVertexEXT(mode);
}

void REGAL_CALL gmock_glGetnUniformfvEXT(GLuint program, GLint location, GLsizei bufSize, GLfloat *params) {
  return RegalGMockInterface::current->glGetnUniformfvEXT(program, location, bufSize, params);
}

void REGAL_CALL gmock_glGetnUniformivEXT(GLuint program, GLint location, GLsizei bufSize, GLint *params) {
  return RegalGMockInterface::current->glGetnUniformivEXT(program, location, bufSize, params);
}

void REGAL_CALL gmock_glReadnPixelsEXT(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data) {
  return RegalGMockInterface::current->glReadnPixelsEXT(x, y, width, height, format, type, bufSize, data);
}

void REGAL_CALL gmock_glBeginSceneEXT(void) {
  return RegalGMockInterface::current->glBeginSceneEXT();
}

void REGAL_CALL gmock_glEndSceneEXT(void) {
  return RegalGMockInterface::current->glEndSceneEXT();
}

void REGAL_CALL gmock_glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue) {
  return RegalGMockInterface::current->glSecondaryColor3bEXT(red, green, blue);
}

void REGAL_CALL gmock_glSecondaryColor3bvEXT(const GLbyte *v) {
  return RegalGMockInterface::current->glSecondaryColor3bvEXT(v);
}

void REGAL_CALL gmock_glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue) {
  return RegalGMockInterface::current->glSecondaryColor3dEXT(red, green, blue);
}

void REGAL_CALL gmock_glSecondaryColor3dvEXT(const GLdouble *v) {
  return RegalGMockInterface::current->glSecondaryColor3dvEXT(v);
}

void REGAL_CALL gmock_glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue) {
  return RegalGMockInterface::current->glSecondaryColor3fEXT(red, green, blue);
}

void REGAL_CALL gmock_glSecondaryColor3fvEXT(const GLfloat *v) {
  return RegalGMockInterface::current->glSecondaryColor3fvEXT(v);
}

void REGAL_CALL gmock_glSecondaryColor3iEXT(GLint red, GLint green, GLint blue) {
  return RegalGMockInterface::current->glSecondaryColor3iEXT(red, green, blue);
}

void REGAL_CALL gmock_glSecondaryColor3ivEXT(const GLint *v) {
  return RegalGMockInterface::current->glSecondaryColor3ivEXT(v);
}

void REGAL_CALL gmock_glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue) {
  return RegalGMockInterface::current->glSecondaryColor3sEXT(red, green, blue);
}

void REGAL_CALL gmock_glSecondaryColor3svEXT(const GLshort *v) {
  return RegalGMockInterface::current->glSecondaryColor3svEXT(v);
}

void REGAL_CALL gmock_glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue) {
  return RegalGMockInterface::current->glSecondaryColor3ubEXT(red, green, blue);
}

void REGAL_CALL gmock_glSecondaryColor3ubvEXT(const GLubyte *v) {
  return RegalGMockInterface::current->glSecondaryColor3ubvEXT(v);
}

void REGAL_CALL gmock_glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue) {
  return RegalGMockInterface::current->glSecondaryColor3uiEXT(red, green, blue);
}

void REGAL_CALL gmock_glSecondaryColor3uivEXT(const GLuint *v) {
  return RegalGMockInterface::current->glSecondaryColor3uivEXT(v);
}

void REGAL_CALL gmock_glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue) {
  return RegalGMockInterface::current->glSecondaryColor3usEXT(red, green, blue);
}

void REGAL_CALL gmock_glSecondaryColor3usvEXT(const GLushort *v) {
  return RegalGMockInterface::current->glSecondaryColor3usvEXT(v);
}

void REGAL_CALL gmock_glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glSecondaryColorPointerEXT(size, type, stride, pointer);
}

void REGAL_CALL gmock_glActiveProgramEXT(GLuint program) {
  return RegalGMockInterface::current->glActiveProgramEXT(program);
}

GLuint REGAL_CALL gmock_glCreateShaderProgramEXT(GLenum type, const GLchar *string) {
  return RegalGMockInterface::current->glCreateShaderProgramEXT(type, string);
}

void REGAL_CALL gmock_glUseShaderProgramEXT(GLenum type, GLuint program) {
  return RegalGMockInterface::current->glUseShaderProgramEXT(type, program);
}

void REGAL_CALL gmock_glBindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format) {
  return RegalGMockInterface::current->glBindImageTextureEXT(index, texture, level, layered, layer, access, format);
}

void REGAL_CALL gmock_glMemoryBarrierEXT(GLbitfield barriers) {
  return RegalGMockInterface::current->glMemoryBarrierEXT(barriers);
}

void REGAL_CALL gmock_glStencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag) {
  return RegalGMockInterface::current->glStencilClearTagEXT(stencilTagBits, stencilClearTag);
}

void REGAL_CALL gmock_glActiveStencilFaceEXT(GLenum face) {
  return RegalGMockInterface::current->glActiveStencilFaceEXT(face);
}

void REGAL_CALL gmock_glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels) {
  return RegalGMockInterface::current->glTexSubImage1DEXT(target, level, xoffset, width, format, type, pixels);
}

void REGAL_CALL gmock_glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels) {
  return RegalGMockInterface::current->glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels);
}

void REGAL_CALL gmock_glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels) {
  // glTexSubImage3DEXT has too many arguments for GMock.
}

void REGAL_CALL gmock_glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels) {
  return RegalGMockInterface::current->glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels);
}

void REGAL_CALL gmock_glFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {
  return RegalGMockInterface::current->glFramebufferTextureLayerEXT(target, attachment, texture, level, layer);
}

void REGAL_CALL gmock_glTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer) {
  return RegalGMockInterface::current->glTexBufferEXT(target, internalformat, buffer);
}

void REGAL_CALL gmock_glClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha) {
  return RegalGMockInterface::current->glClearColorIiEXT(red, green, blue, alpha);
}

void REGAL_CALL gmock_glClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha) {
  return RegalGMockInterface::current->glClearColorIuiEXT(red, green, blue, alpha);
}

void REGAL_CALL gmock_glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetTexParameterIivEXT(target, pname, params);
}

void REGAL_CALL gmock_glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint *params) {
  return RegalGMockInterface::current->glGetTexParameterIuivEXT(target, pname, params);
}

void REGAL_CALL gmock_glTexParameterIivEXT(GLenum target, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glTexParameterIivEXT(target, pname, params);
}

void REGAL_CALL gmock_glTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint *params) {
  return RegalGMockInterface::current->glTexParameterIuivEXT(target, pname, params);
}

GLboolean REGAL_CALL gmock_glAreTexturesResidentEXT(GLsizei n, const GLuint *textures, GLboolean *residences) {
  return RegalGMockInterface::current->glAreTexturesResidentEXT(n, textures, residences);
}

void REGAL_CALL gmock_glBindTextureEXT(GLenum target, GLuint texture) {
  return RegalGMockInterface::current->glBindTextureEXT(target, texture);
}

void REGAL_CALL gmock_glDeleteTexturesEXT(GLsizei n, const GLuint *textures) {
  return RegalGMockInterface::current->glDeleteTexturesEXT(n, textures);
}

void REGAL_CALL gmock_glGenTexturesEXT(GLsizei n, GLuint *textures) {
  return RegalGMockInterface::current->glGenTexturesEXT(n, textures);
}

GLboolean REGAL_CALL gmock_glIsTextureEXT(GLuint texture) {
  return RegalGMockInterface::current->glIsTextureEXT(texture);
}

void REGAL_CALL gmock_glPrioritizeTexturesEXT(GLsizei n, const GLuint *textures, const GLclampf *priorities) {
  return RegalGMockInterface::current->glPrioritizeTexturesEXT(n, textures, priorities);
}

void REGAL_CALL gmock_glTextureNormalEXT(GLenum mode) {
  return RegalGMockInterface::current->glTextureNormalEXT(mode);
}

void REGAL_CALL gmock_glTexStorage1DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) {
  return RegalGMockInterface::current->glTexStorage1DEXT(target, levels, internalformat, width);
}

void REGAL_CALL gmock_glTexStorage2DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glTexStorage2DEXT(target, levels, internalformat, width, height);
}

void REGAL_CALL gmock_glTexStorage3DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) {
  return RegalGMockInterface::current->glTexStorage3DEXT(target, levels, internalformat, width, height, depth);
}

void REGAL_CALL gmock_glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64EXT *params) {
  return RegalGMockInterface::current->glGetQueryObjecti64vEXT(id, pname, params);
}

void REGAL_CALL gmock_glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64EXT *params) {
  return RegalGMockInterface::current->glGetQueryObjectui64vEXT(id, pname, params);
}

void REGAL_CALL gmock_glBeginTransformFeedbackEXT(GLenum primitiveMode) {
  return RegalGMockInterface::current->glBeginTransformFeedbackEXT(primitiveMode);
}

void REGAL_CALL gmock_glBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer) {
  return RegalGMockInterface::current->glBindBufferBaseEXT(target, index, buffer);
}

void REGAL_CALL gmock_glBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset) {
  return RegalGMockInterface::current->glBindBufferOffsetEXT(target, index, buffer, offset);
}

void REGAL_CALL gmock_glBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  return RegalGMockInterface::current->glBindBufferRangeEXT(target, index, buffer, offset, size);
}

void REGAL_CALL gmock_glEndTransformFeedbackEXT(void) {
  return RegalGMockInterface::current->glEndTransformFeedbackEXT();
}

void REGAL_CALL gmock_glGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) {
  return RegalGMockInterface::current->glGetTransformFeedbackVaryingEXT(program, index, bufSize, length, size, type, name);
}

void REGAL_CALL gmock_glTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar **varyings, GLenum bufferMode) {
  return RegalGMockInterface::current->glTransformFeedbackVaryingsEXT(program, count, varyings, bufferMode);
}

void REGAL_CALL gmock_glArrayElementEXT(GLint i) {
  return RegalGMockInterface::current->glArrayElementEXT(i);
}

void REGAL_CALL gmock_glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer) {
  return RegalGMockInterface::current->glColorPointerEXT(size, type, stride, count, pointer);
}

void REGAL_CALL gmock_glDrawArraysEXT(GLenum mode, GLint first, GLsizei count) {
  return RegalGMockInterface::current->glDrawArraysEXT(mode, first, count);
}

void REGAL_CALL gmock_glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean *pointer) {
  return RegalGMockInterface::current->glEdgeFlagPointerEXT(stride, count, pointer);
}

void REGAL_CALL gmock_glGetPointervEXT(GLenum pname, GLvoid **params) {
  return RegalGMockInterface::current->glGetPointervEXT(pname, params);
}

void REGAL_CALL gmock_glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer) {
  return RegalGMockInterface::current->glIndexPointerEXT(type, stride, count, pointer);
}

void REGAL_CALL gmock_glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer) {
  return RegalGMockInterface::current->glNormalPointerEXT(type, stride, count, pointer);
}

void REGAL_CALL gmock_glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer) {
  return RegalGMockInterface::current->glTexCoordPointerEXT(size, type, stride, count, pointer);
}

void REGAL_CALL gmock_glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer) {
  return RegalGMockInterface::current->glVertexPointerEXT(size, type, stride, count, pointer);
}

void REGAL_CALL gmock_glGetVertexAttribLdvEXT(GLuint index, GLenum pname, GLdouble *params) {
  return RegalGMockInterface::current->glGetVertexAttribLdvEXT(index, pname, params);
}

void REGAL_CALL gmock_glVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) {
  return RegalGMockInterface::current->glVertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset);
}

void REGAL_CALL gmock_glVertexAttribL1dEXT(GLuint index, GLdouble x) {
  return RegalGMockInterface::current->glVertexAttribL1dEXT(index, x);
}

void REGAL_CALL gmock_glVertexAttribL1dvEXT(GLuint index, const GLdouble *v) {
  return RegalGMockInterface::current->glVertexAttribL1dvEXT(index, v);
}

void REGAL_CALL gmock_glVertexAttribL2dEXT(GLuint index, GLdouble x, GLdouble y) {
  return RegalGMockInterface::current->glVertexAttribL2dEXT(index, x, y);
}

void REGAL_CALL gmock_glVertexAttribL2dvEXT(GLuint index, const GLdouble *v) {
  return RegalGMockInterface::current->glVertexAttribL2dvEXT(index, v);
}

void REGAL_CALL gmock_glVertexAttribL3dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
  return RegalGMockInterface::current->glVertexAttribL3dEXT(index, x, y, z);
}

void REGAL_CALL gmock_glVertexAttribL3dvEXT(GLuint index, const GLdouble *v) {
  return RegalGMockInterface::current->glVertexAttribL3dvEXT(index, v);
}

void REGAL_CALL gmock_glVertexAttribL4dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  return RegalGMockInterface::current->glVertexAttribL4dEXT(index, x, y, z, w);
}

void REGAL_CALL gmock_glVertexAttribL4dvEXT(GLuint index, const GLdouble *v) {
  return RegalGMockInterface::current->glVertexAttribL4dvEXT(index, v);
}

void REGAL_CALL gmock_glVertexAttribLPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glVertexAttribLPointerEXT(index, size, type, stride, pointer);
}

void REGAL_CALL gmock_glBeginVertexShaderEXT(void) {
  return RegalGMockInterface::current->glBeginVertexShaderEXT();
}

GLuint REGAL_CALL gmock_glBindLightParameterEXT(GLenum light, GLenum value) {
  return RegalGMockInterface::current->glBindLightParameterEXT(light, value);
}

GLuint REGAL_CALL gmock_glBindMaterialParameterEXT(GLenum face, GLenum value) {
  return RegalGMockInterface::current->glBindMaterialParameterEXT(face, value);
}

GLuint REGAL_CALL gmock_glBindParameterEXT(GLenum value) {
  return RegalGMockInterface::current->glBindParameterEXT(value);
}

GLuint REGAL_CALL gmock_glBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value) {
  return RegalGMockInterface::current->glBindTexGenParameterEXT(unit, coord, value);
}

GLuint REGAL_CALL gmock_glBindTextureUnitParameterEXT(GLenum unit, GLenum value) {
  return RegalGMockInterface::current->glBindTextureUnitParameterEXT(unit, value);
}

void REGAL_CALL gmock_glBindVertexShaderEXT(GLuint id) {
  return RegalGMockInterface::current->glBindVertexShaderEXT(id);
}

void REGAL_CALL gmock_glDeleteVertexShaderEXT(GLuint id) {
  return RegalGMockInterface::current->glDeleteVertexShaderEXT(id);
}

void REGAL_CALL gmock_glDisableVariantClientStateEXT(GLuint id) {
  return RegalGMockInterface::current->glDisableVariantClientStateEXT(id);
}

void REGAL_CALL gmock_glEnableVariantClientStateEXT(GLuint id) {
  return RegalGMockInterface::current->glEnableVariantClientStateEXT(id);
}

void REGAL_CALL gmock_glEndVertexShaderEXT(void) {
  return RegalGMockInterface::current->glEndVertexShaderEXT();
}

void REGAL_CALL gmock_glExtractComponentEXT(GLuint res, GLuint src, GLuint num) {
  return RegalGMockInterface::current->glExtractComponentEXT(res, src, num);
}

GLuint REGAL_CALL gmock_glGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components) {
  return RegalGMockInterface::current->glGenSymbolsEXT(datatype, storagetype, range, components);
}

GLuint REGAL_CALL gmock_glGenVertexShadersEXT(GLuint range) {
  return RegalGMockInterface::current->glGenVertexShadersEXT(range);
}

void REGAL_CALL gmock_glGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data) {
  return RegalGMockInterface::current->glGetInvariantBooleanvEXT(id, value, data);
}

void REGAL_CALL gmock_glGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat *data) {
  return RegalGMockInterface::current->glGetInvariantFloatvEXT(id, value, data);
}

void REGAL_CALL gmock_glGetInvariantIntegervEXT(GLuint id, GLenum value, GLint *data) {
  return RegalGMockInterface::current->glGetInvariantIntegervEXT(id, value, data);
}

void REGAL_CALL gmock_glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean *data) {
  return RegalGMockInterface::current->glGetLocalConstantBooleanvEXT(id, value, data);
}

void REGAL_CALL gmock_glGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat *data) {
  return RegalGMockInterface::current->glGetLocalConstantFloatvEXT(id, value, data);
}

void REGAL_CALL gmock_glGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint *data) {
  return RegalGMockInterface::current->glGetLocalConstantIntegervEXT(id, value, data);
}

void REGAL_CALL gmock_glGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data) {
  return RegalGMockInterface::current->glGetVariantBooleanvEXT(id, value, data);
}

void REGAL_CALL gmock_glGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat *data) {
  return RegalGMockInterface::current->glGetVariantFloatvEXT(id, value, data);
}

void REGAL_CALL gmock_glGetVariantIntegervEXT(GLuint id, GLenum value, GLint *data) {
  return RegalGMockInterface::current->glGetVariantIntegervEXT(id, value, data);
}

void REGAL_CALL gmock_glGetVariantPointervEXT(GLuint id, GLenum value, GLvoid **data) {
  return RegalGMockInterface::current->glGetVariantPointervEXT(id, value, data);
}

void REGAL_CALL gmock_glInsertComponentEXT(GLuint res, GLuint src, GLuint num) {
  return RegalGMockInterface::current->glInsertComponentEXT(res, src, num);
}

GLboolean REGAL_CALL gmock_glIsVariantEnabledEXT(GLuint id, GLenum cap) {
  return RegalGMockInterface::current->glIsVariantEnabledEXT(id, cap);
}

void REGAL_CALL gmock_glSetInvariantEXT(GLuint id, GLenum type, const GLvoid *addr) {
  return RegalGMockInterface::current->glSetInvariantEXT(id, type, addr);
}

void REGAL_CALL gmock_glSetLocalConstantEXT(GLuint id, GLenum type, const GLvoid *addr) {
  return RegalGMockInterface::current->glSetLocalConstantEXT(id, type, addr);
}

void REGAL_CALL gmock_glShaderOp1EXT(GLenum op, GLuint res, GLuint arg1) {
  return RegalGMockInterface::current->glShaderOp1EXT(op, res, arg1);
}

void REGAL_CALL gmock_glShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2) {
  return RegalGMockInterface::current->glShaderOp2EXT(op, res, arg1, arg2);
}

void REGAL_CALL gmock_glShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3) {
  return RegalGMockInterface::current->glShaderOp3EXT(op, res, arg1, arg2, arg3);
}

void REGAL_CALL gmock_glSwizzleEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) {
  return RegalGMockInterface::current->glSwizzleEXT(res, in, outX, outY, outZ, outW);
}

void REGAL_CALL gmock_glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, const GLvoid *addr) {
  return RegalGMockInterface::current->glVariantPointerEXT(id, type, stride, addr);
}

void REGAL_CALL gmock_glVariantbvEXT(GLuint id, const GLbyte *addr) {
  return RegalGMockInterface::current->glVariantbvEXT(id, addr);
}

void REGAL_CALL gmock_glVariantdvEXT(GLuint id, const GLdouble *addr) {
  return RegalGMockInterface::current->glVariantdvEXT(id, addr);
}

void REGAL_CALL gmock_glVariantfvEXT(GLuint id, const GLfloat *addr) {
  return RegalGMockInterface::current->glVariantfvEXT(id, addr);
}

void REGAL_CALL gmock_glVariantivEXT(GLuint id, const GLint *addr) {
  return RegalGMockInterface::current->glVariantivEXT(id, addr);
}

void REGAL_CALL gmock_glVariantsvEXT(GLuint id, const GLshort *addr) {
  return RegalGMockInterface::current->glVariantsvEXT(id, addr);
}

void REGAL_CALL gmock_glVariantubvEXT(GLuint id, const GLubyte *addr) {
  return RegalGMockInterface::current->glVariantubvEXT(id, addr);
}

void REGAL_CALL gmock_glVariantuivEXT(GLuint id, const GLuint *addr) {
  return RegalGMockInterface::current->glVariantuivEXT(id, addr);
}

void REGAL_CALL gmock_glVariantusvEXT(GLuint id, const GLushort *addr) {
  return RegalGMockInterface::current->glVariantusvEXT(id, addr);
}

void REGAL_CALL gmock_glWriteMaskEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) {
  return RegalGMockInterface::current->glWriteMaskEXT(res, in, outX, outY, outZ, outW);
}

void REGAL_CALL gmock_glVertexWeightPointerEXT(GLsizei size, GLenum type, GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glVertexWeightPointerEXT(size, type, stride, pointer);
}

void REGAL_CALL gmock_glVertexWeightfEXT(GLfloat weight) {
  return RegalGMockInterface::current->glVertexWeightfEXT(weight);
}

void REGAL_CALL gmock_glVertexWeightfvEXT(const GLfloat *weight) {
  return RegalGMockInterface::current->glVertexWeightfvEXT(weight);
}

GLsync REGAL_CALL gmock_glImportSyncEXT(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags) {
  return RegalGMockInterface::current->glImportSyncEXT(external_sync_type, external_sync, flags);
}

void REGAL_CALL gmock_glFrameTerminatorGREMEDY(void) {
  return RegalGMockInterface::current->glFrameTerminatorGREMEDY();
}

void REGAL_CALL gmock_glStringMarkerGREMEDY(GLsizei len, const GLvoid *string) {
  return RegalGMockInterface::current->glStringMarkerGREMEDY(len, string);
}

void REGAL_CALL gmock_glGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetImageTransformParameterfvHP(target, pname, params);
}

void REGAL_CALL gmock_glGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetImageTransformParameterivHP(target, pname, params);
}

void REGAL_CALL gmock_glImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glImageTransformParameterfHP(target, pname, param);
}

void REGAL_CALL gmock_glImageTransformParameterfvHP(GLenum target, GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glImageTransformParameterfvHP(target, pname, params);
}

void REGAL_CALL gmock_glImageTransformParameteriHP(GLenum target, GLenum pname, GLint param) {
  return RegalGMockInterface::current->glImageTransformParameteriHP(target, pname, param);
}

void REGAL_CALL gmock_glImageTransformParameterivHP(GLenum target, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glImageTransformParameterivHP(target, pname, params);
}

void REGAL_CALL gmock_glMultiModeDrawArraysIBM(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride) {
  return RegalGMockInterface::current->glMultiModeDrawArraysIBM(mode, first, count, primcount, modestride);
}

void REGAL_CALL gmock_glMultiModeDrawElementsIBM(const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, GLint modestride) {
  return RegalGMockInterface::current->glMultiModeDrawElementsIBM(mode, count, type, indices, primcount, modestride);
}

void REGAL_CALL gmock_glColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride) {
  return RegalGMockInterface::current->glColorPointerListIBM(size, type, stride, pointer, ptrstride);
}

void REGAL_CALL gmock_glEdgeFlagPointerListIBM(GLint stride, const GLboolean **pointer, GLint ptrstride) {
  return RegalGMockInterface::current->glEdgeFlagPointerListIBM(stride, pointer, ptrstride);
}

void REGAL_CALL gmock_glFogCoordPointerListIBM(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride) {
  return RegalGMockInterface::current->glFogCoordPointerListIBM(type, stride, pointer, ptrstride);
}

void REGAL_CALL gmock_glIndexPointerListIBM(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride) {
  return RegalGMockInterface::current->glIndexPointerListIBM(type, stride, pointer, ptrstride);
}

void REGAL_CALL gmock_glNormalPointerListIBM(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride) {
  return RegalGMockInterface::current->glNormalPointerListIBM(type, stride, pointer, ptrstride);
}

void REGAL_CALL gmock_glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride) {
  return RegalGMockInterface::current->glSecondaryColorPointerListIBM(size, type, stride, pointer, ptrstride);
}

void REGAL_CALL gmock_glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride) {
  return RegalGMockInterface::current->glTexCoordPointerListIBM(size, type, stride, pointer, ptrstride);
}

void REGAL_CALL gmock_glVertexPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride) {
  return RegalGMockInterface::current->glVertexPointerListIBM(size, type, stride, pointer, ptrstride);
}

void REGAL_CALL gmock_glFramebufferTexture2DMultisampleIMG(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples) {
  return RegalGMockInterface::current->glFramebufferTexture2DMultisampleIMG(target, attachment, textarget, texture, level, samples);
}

void REGAL_CALL gmock_glRenderbufferStorageMultisampleIMG(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glRenderbufferStorageMultisampleIMG(target, samples, internalformat, width, height);
}

void REGAL_CALL gmock_glBlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) {
  return RegalGMockInterface::current->glBlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

void REGAL_CALL gmock_glColorPointervINTEL(GLint size, GLenum type, const GLvoid **pointer) {
  return RegalGMockInterface::current->glColorPointervINTEL(size, type, pointer);
}

void REGAL_CALL gmock_glNormalPointervINTEL(GLenum type, const GLvoid **pointer) {
  return RegalGMockInterface::current->glNormalPointervINTEL(type, pointer);
}

void REGAL_CALL gmock_glTexCoordPointervINTEL(GLint size, GLenum type, const GLvoid **pointer) {
  return RegalGMockInterface::current->glTexCoordPointervINTEL(size, type, pointer);
}

void REGAL_CALL gmock_glVertexPointervINTEL(GLint size, GLenum type, const GLvoid **pointer) {
  return RegalGMockInterface::current->glVertexPointervINTEL(size, type, pointer);
}

void REGAL_CALL gmock_glTexScissorFuncINTEL(GLenum target, GLenum lfunc, GLenum hfunc) {
  return RegalGMockInterface::current->glTexScissorFuncINTEL(target, lfunc, hfunc);
}

void REGAL_CALL gmock_glTexScissorINTEL(GLenum target, GLclampf tlow, GLclampf thigh) {
  return RegalGMockInterface::current->glTexScissorINTEL(target, tlow, thigh);
}

void REGAL_CALL gmock_glDebugMessageCallback(GLDEBUGPROC callback, GLvoid *userParam) {
  return RegalGMockInterface::current->glDebugMessageCallback(callback, userParam);
}

void REGAL_CALL gmock_glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled) {
  return RegalGMockInterface::current->glDebugMessageControl(source, type, severity, count, ids, enabled);
}

void REGAL_CALL gmock_glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf) {
  return RegalGMockInterface::current->glDebugMessageInsert(source, type, id, severity, length, buf);
}

GLuint REGAL_CALL gmock_glGetDebugMessageLog(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog) {
  return RegalGMockInterface::current->glGetDebugMessageLog(count, bufsize, sources, types, ids, severities, lengths, messageLog);
}

void REGAL_CALL gmock_glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label) {
  return RegalGMockInterface::current->glGetObjectLabel(identifier, name, bufSize, length, label);
}

void REGAL_CALL gmock_glGetObjectPtrLabel(GLvoid *ptr, GLsizei bufSize, GLsizei *length, GLchar *label) {
  return RegalGMockInterface::current->glGetObjectPtrLabel(ptr, bufSize, length, label);
}

void REGAL_CALL gmock_glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label) {
  return RegalGMockInterface::current->glObjectLabel(identifier, name, length, label);
}

void REGAL_CALL gmock_glObjectPtrLabel(GLvoid *ptr, GLsizei length, const GLchar *label) {
  return RegalGMockInterface::current->glObjectPtrLabel(ptr, length, label);
}

void REGAL_CALL gmock_glPopDebugGroup(void) {
  return RegalGMockInterface::current->glPopDebugGroup();
}

void REGAL_CALL gmock_glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message) {
  return RegalGMockInterface::current->glPushDebugGroup(source, id, length, message);
}

GLuint REGAL_CALL gmock_glBufferRegionEnabled(void) {
  return RegalGMockInterface::current->glBufferRegionEnabled();
}

void REGAL_CALL gmock_glDeleteBufferRegion(GLenum region) {
  return RegalGMockInterface::current->glDeleteBufferRegion(region);
}

void REGAL_CALL gmock_glDrawBufferRegion(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest) {
  return RegalGMockInterface::current->glDrawBufferRegion(region, x, y, width, height, xDest, yDest);
}

GLuint REGAL_CALL gmock_glNewBufferRegion(GLenum region) {
  return RegalGMockInterface::current->glNewBufferRegion(region);
}

void REGAL_CALL gmock_glReadBufferRegion(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glReadBufferRegion(region, x, y, width, height);
}

void REGAL_CALL gmock_glResizeBuffersMESA(void) {
  return RegalGMockInterface::current->glResizeBuffersMESA();
}

void REGAL_CALL gmock_glWindowPos2dMESA(GLdouble x, GLdouble y) {
  return RegalGMockInterface::current->glWindowPos2dMESA(x, y);
}

void REGAL_CALL gmock_glWindowPos2dvMESA(const GLdouble *v) {
  return RegalGMockInterface::current->glWindowPos2dvMESA(v);
}

void REGAL_CALL gmock_glWindowPos2fMESA(GLfloat x, GLfloat y) {
  return RegalGMockInterface::current->glWindowPos2fMESA(x, y);
}

void REGAL_CALL gmock_glWindowPos2fvMESA(const GLfloat *v) {
  return RegalGMockInterface::current->glWindowPos2fvMESA(v);
}

void REGAL_CALL gmock_glWindowPos2iMESA(GLint x, GLint y) {
  return RegalGMockInterface::current->glWindowPos2iMESA(x, y);
}

void REGAL_CALL gmock_glWindowPos2ivMESA(const GLint *v) {
  return RegalGMockInterface::current->glWindowPos2ivMESA(v);
}

void REGAL_CALL gmock_glWindowPos2sMESA(GLshort x, GLshort y) {
  return RegalGMockInterface::current->glWindowPos2sMESA(x, y);
}

void REGAL_CALL gmock_glWindowPos2svMESA(const GLshort *v) {
  return RegalGMockInterface::current->glWindowPos2svMESA(v);
}

void REGAL_CALL gmock_glWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z) {
  return RegalGMockInterface::current->glWindowPos3dMESA(x, y, z);
}

void REGAL_CALL gmock_glWindowPos3dvMESA(const GLdouble *v) {
  return RegalGMockInterface::current->glWindowPos3dvMESA(v);
}

void REGAL_CALL gmock_glWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glWindowPos3fMESA(x, y, z);
}

void REGAL_CALL gmock_glWindowPos3fvMESA(const GLfloat *v) {
  return RegalGMockInterface::current->glWindowPos3fvMESA(v);
}

void REGAL_CALL gmock_glWindowPos3iMESA(GLint x, GLint y, GLint z) {
  return RegalGMockInterface::current->glWindowPos3iMESA(x, y, z);
}

void REGAL_CALL gmock_glWindowPos3ivMESA(const GLint *v) {
  return RegalGMockInterface::current->glWindowPos3ivMESA(v);
}

void REGAL_CALL gmock_glWindowPos3sMESA(GLshort x, GLshort y, GLshort z) {
  return RegalGMockInterface::current->glWindowPos3sMESA(x, y, z);
}

void REGAL_CALL gmock_glWindowPos3svMESA(const GLshort *v) {
  return RegalGMockInterface::current->glWindowPos3svMESA(v);
}

void REGAL_CALL gmock_glWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  return RegalGMockInterface::current->glWindowPos4dMESA(x, y, z, w);
}

void REGAL_CALL gmock_glWindowPos4dvMESA(const GLdouble *v) {
  return RegalGMockInterface::current->glWindowPos4dvMESA(v);
}

void REGAL_CALL gmock_glWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  return RegalGMockInterface::current->glWindowPos4fMESA(x, y, z, w);
}

void REGAL_CALL gmock_glWindowPos4fvMESA(const GLfloat *v) {
  return RegalGMockInterface::current->glWindowPos4fvMESA(v);
}

void REGAL_CALL gmock_glWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w) {
  return RegalGMockInterface::current->glWindowPos4iMESA(x, y, z, w);
}

void REGAL_CALL gmock_glWindowPos4ivMESA(const GLint *v) {
  return RegalGMockInterface::current->glWindowPos4ivMESA(v);
}

void REGAL_CALL gmock_glWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w) {
  return RegalGMockInterface::current->glWindowPos4sMESA(x, y, z, w);
}

void REGAL_CALL gmock_glWindowPos4svMESA(const GLshort *v) {
  return RegalGMockInterface::current->glWindowPos4svMESA(v);
}

void REGAL_CALL gmock_glBeginConditionalRenderNVX(GLuint id) {
  return RegalGMockInterface::current->glBeginConditionalRenderNVX(id);
}

void REGAL_CALL gmock_glEndConditionalRenderNVX(void) {
  return RegalGMockInterface::current->glEndConditionalRenderNVX();
}

GLuint64 REGAL_CALL gmock_glGetImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) {
  return RegalGMockInterface::current->glGetImageHandleNV(texture, level, layered, layer, format);
}

GLuint64 REGAL_CALL gmock_glGetTextureHandleNV(GLuint texture) {
  return RegalGMockInterface::current->glGetTextureHandleNV(texture);
}

GLuint64 REGAL_CALL gmock_glGetTextureSamplerHandleNV(GLuint texture, GLuint sampler) {
  return RegalGMockInterface::current->glGetTextureSamplerHandleNV(texture, sampler);
}

GLboolean REGAL_CALL gmock_glIsImageHandleResidentNV(GLuint64 handle) {
  return RegalGMockInterface::current->glIsImageHandleResidentNV(handle);
}

GLboolean REGAL_CALL gmock_glIsTextureHandleResidentNV(GLuint64 handle) {
  return RegalGMockInterface::current->glIsTextureHandleResidentNV(handle);
}

void REGAL_CALL gmock_glMakeImageHandleNonResidentNV(GLuint64 handle) {
  return RegalGMockInterface::current->glMakeImageHandleNonResidentNV(handle);
}

void REGAL_CALL gmock_glMakeImageHandleResidentNV(GLuint64 handle, GLenum access) {
  return RegalGMockInterface::current->glMakeImageHandleResidentNV(handle, access);
}

void REGAL_CALL gmock_glMakeTextureHandleNonResidentNV(GLuint64 handle) {
  return RegalGMockInterface::current->glMakeTextureHandleNonResidentNV(handle);
}

void REGAL_CALL gmock_glMakeTextureHandleResidentNV(GLuint64 handle) {
  return RegalGMockInterface::current->glMakeTextureHandleResidentNV(handle);
}

void REGAL_CALL gmock_glProgramUniformHandleui64NV(GLuint program, GLint location, GLuint64 value) {
  return RegalGMockInterface::current->glProgramUniformHandleui64NV(program, location, value);
}

void REGAL_CALL gmock_glProgramUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64 *values) {
  return RegalGMockInterface::current->glProgramUniformHandleui64vNV(program, location, count, values);
}

void REGAL_CALL gmock_glUniformHandleui64NV(GLint location, GLuint64 value) {
  return RegalGMockInterface::current->glUniformHandleui64NV(location, value);
}

void REGAL_CALL gmock_glUniformHandleui64vNV(GLint location, GLsizei count, const GLuint64 *value) {
  return RegalGMockInterface::current->glUniformHandleui64vNV(location, count, value);
}

void REGAL_CALL gmock_glBeginConditionalRenderNV(GLuint id, GLenum mode) {
  return RegalGMockInterface::current->glBeginConditionalRenderNV(id, mode);
}

void REGAL_CALL gmock_glEndConditionalRenderNV(void) {
  return RegalGMockInterface::current->glEndConditionalRenderNV();
}

void REGAL_CALL gmock_glCopyImageSubDataNV(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) {
  // glCopyImageSubDataNV has too many arguments for GMock.
}

void REGAL_CALL gmock_glCoverageMaskNV(GLboolean mask) {
  return RegalGMockInterface::current->glCoverageMaskNV(mask);
}

void REGAL_CALL gmock_glCoverageOperationNV(GLenum operation) {
  return RegalGMockInterface::current->glCoverageOperationNV(operation);
}

void REGAL_CALL gmock_glClearDepthdNV(GLdouble depth) {
  return RegalGMockInterface::current->glClearDepthdNV(depth);
}

void REGAL_CALL gmock_glDepthBoundsdNV(GLdouble zmin, GLdouble zmax) {
  return RegalGMockInterface::current->glDepthBoundsdNV(zmin, zmax);
}

void REGAL_CALL gmock_glDepthRangedNV(GLdouble zNear, GLdouble zFar) {
  return RegalGMockInterface::current->glDepthRangedNV(zNear, zFar);
}

void REGAL_CALL gmock_glDrawBuffersNV(GLsizei n, const GLenum *bufs) {
  return RegalGMockInterface::current->glDrawBuffersNV(n, bufs);
}

void REGAL_CALL gmock_glEvalMapsNV(GLenum target, GLenum mode) {
  return RegalGMockInterface::current->glEvalMapsNV(target, mode);
}

void REGAL_CALL gmock_glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetMapAttribParameterfvNV(target, index, pname, params);
}

void REGAL_CALL gmock_glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetMapAttribParameterivNV(target, index, pname, params);
}

void REGAL_CALL gmock_glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points) {
  return RegalGMockInterface::current->glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, points);
}

void REGAL_CALL gmock_glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetMapParameterfvNV(target, pname, params);
}

void REGAL_CALL gmock_glGetMapParameterivNV(GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetMapParameterivNV(target, pname, params);
}

void REGAL_CALL gmock_glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points) {
  return RegalGMockInterface::current->glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points);
}

void REGAL_CALL gmock_glMapParameterfvNV(GLenum target, GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glMapParameterfvNV(target, pname, params);
}

void REGAL_CALL gmock_glMapParameterivNV(GLenum target, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glMapParameterivNV(target, pname, params);
}

void REGAL_CALL gmock_glGetMultisamplefvNV(GLenum pname, GLuint index, GLfloat *val) {
  return RegalGMockInterface::current->glGetMultisamplefvNV(pname, index, val);
}

void REGAL_CALL gmock_glSampleMaskIndexedNV(GLuint index, GLbitfield mask) {
  return RegalGMockInterface::current->glSampleMaskIndexedNV(index, mask);
}

void REGAL_CALL gmock_glTexRenderbufferNV(GLenum target, GLuint renderbuffer) {
  return RegalGMockInterface::current->glTexRenderbufferNV(target, renderbuffer);
}

void REGAL_CALL gmock_glDeleteFencesNV(GLsizei n, const GLuint *fences) {
  return RegalGMockInterface::current->glDeleteFencesNV(n, fences);
}

void REGAL_CALL gmock_glFinishFenceNV(GLuint fence) {
  return RegalGMockInterface::current->glFinishFenceNV(fence);
}

void REGAL_CALL gmock_glGenFencesNV(GLsizei n, GLuint *fences) {
  return RegalGMockInterface::current->glGenFencesNV(n, fences);
}

void REGAL_CALL gmock_glGetFenceivNV(GLuint fence, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetFenceivNV(fence, pname, params);
}

GLboolean REGAL_CALL gmock_glIsFenceNV(GLuint fence) {
  return RegalGMockInterface::current->glIsFenceNV(fence);
}

void REGAL_CALL gmock_glSetFenceNV(GLuint fence, GLenum condition) {
  return RegalGMockInterface::current->glSetFenceNV(fence, condition);
}

GLboolean REGAL_CALL gmock_glTestFenceNV(GLuint fence) {
  return RegalGMockInterface::current->glTestFenceNV(fence);
}

void REGAL_CALL gmock_glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params) {
  return RegalGMockInterface::current->glGetProgramNamedParameterdvNV(id, len, name, params);
}

void REGAL_CALL gmock_glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params) {
  return RegalGMockInterface::current->glGetProgramNamedParameterfvNV(id, len, name, params);
}

void REGAL_CALL gmock_glProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  return RegalGMockInterface::current->glProgramNamedParameter4dNV(id, len, name, x, y, z, w);
}

void REGAL_CALL gmock_glProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v) {
  return RegalGMockInterface::current->glProgramNamedParameter4dvNV(id, len, name, v);
}

void REGAL_CALL gmock_glProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  return RegalGMockInterface::current->glProgramNamedParameter4fNV(id, len, name, x, y, z, w);
}

void REGAL_CALL gmock_glProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v) {
  return RegalGMockInterface::current->glProgramNamedParameter4fvNV(id, len, name, v);
}

void REGAL_CALL gmock_glRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glRenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height);
}

void REGAL_CALL gmock_glProgramVertexLimitNV(GLenum target, GLint limit) {
  return RegalGMockInterface::current->glProgramVertexLimitNV(target, limit);
}

void REGAL_CALL gmock_glGetProgramEnvParameterIivNV(GLenum target, GLuint index, GLint *params) {
  return RegalGMockInterface::current->glGetProgramEnvParameterIivNV(target, index, params);
}

void REGAL_CALL gmock_glGetProgramEnvParameterIuivNV(GLenum target, GLuint index, GLuint *params) {
  return RegalGMockInterface::current->glGetProgramEnvParameterIuivNV(target, index, params);
}

void REGAL_CALL gmock_glGetProgramLocalParameterIivNV(GLenum target, GLuint index, GLint *params) {
  return RegalGMockInterface::current->glGetProgramLocalParameterIivNV(target, index, params);
}

void REGAL_CALL gmock_glGetProgramLocalParameterIuivNV(GLenum target, GLuint index, GLuint *params) {
  return RegalGMockInterface::current->glGetProgramLocalParameterIuivNV(target, index, params);
}

void REGAL_CALL gmock_glProgramEnvParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) {
  return RegalGMockInterface::current->glProgramEnvParameterI4iNV(target, index, x, y, z, w);
}

void REGAL_CALL gmock_glProgramEnvParameterI4ivNV(GLenum target, GLuint index, const GLint *params) {
  return RegalGMockInterface::current->glProgramEnvParameterI4ivNV(target, index, params);
}

void REGAL_CALL gmock_glProgramEnvParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
  return RegalGMockInterface::current->glProgramEnvParameterI4uiNV(target, index, x, y, z, w);
}

void REGAL_CALL gmock_glProgramEnvParameterI4uivNV(GLenum target, GLuint index, const GLuint *params) {
  return RegalGMockInterface::current->glProgramEnvParameterI4uivNV(target, index, params);
}

void REGAL_CALL gmock_glProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params) {
  return RegalGMockInterface::current->glProgramEnvParametersI4ivNV(target, index, count, params);
}

void REGAL_CALL gmock_glProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params) {
  return RegalGMockInterface::current->glProgramEnvParametersI4uivNV(target, index, count, params);
}

void REGAL_CALL gmock_glProgramLocalParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) {
  return RegalGMockInterface::current->glProgramLocalParameterI4iNV(target, index, x, y, z, w);
}

void REGAL_CALL gmock_glProgramLocalParameterI4ivNV(GLenum target, GLuint index, const GLint *params) {
  return RegalGMockInterface::current->glProgramLocalParameterI4ivNV(target, index, params);
}

void REGAL_CALL gmock_glProgramLocalParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
  return RegalGMockInterface::current->glProgramLocalParameterI4uiNV(target, index, x, y, z, w);
}

void REGAL_CALL gmock_glProgramLocalParameterI4uivNV(GLenum target, GLuint index, const GLuint *params) {
  return RegalGMockInterface::current->glProgramLocalParameterI4uivNV(target, index, params);
}

void REGAL_CALL gmock_glProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params) {
  return RegalGMockInterface::current->glProgramLocalParametersI4ivNV(target, index, count, params);
}

void REGAL_CALL gmock_glProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params) {
  return RegalGMockInterface::current->glProgramLocalParametersI4uivNV(target, index, count, params);
}

void REGAL_CALL gmock_glGetUniformi64vNV(GLuint program, GLint location, GLint64EXT *params) {
  return RegalGMockInterface::current->glGetUniformi64vNV(program, location, params);
}

void REGAL_CALL gmock_glProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x) {
  return RegalGMockInterface::current->glProgramUniform1i64NV(program, location, x);
}

void REGAL_CALL gmock_glProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value) {
  return RegalGMockInterface::current->glProgramUniform1i64vNV(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x) {
  return RegalGMockInterface::current->glProgramUniform1ui64NV(program, location, x);
}

void REGAL_CALL gmock_glProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) {
  return RegalGMockInterface::current->glProgramUniform1ui64vNV(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y) {
  return RegalGMockInterface::current->glProgramUniform2i64NV(program, location, x, y);
}

void REGAL_CALL gmock_glProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value) {
  return RegalGMockInterface::current->glProgramUniform2i64vNV(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y) {
  return RegalGMockInterface::current->glProgramUniform2ui64NV(program, location, x, y);
}

void REGAL_CALL gmock_glProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) {
  return RegalGMockInterface::current->glProgramUniform2ui64vNV(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) {
  return RegalGMockInterface::current->glProgramUniform3i64NV(program, location, x, y, z);
}

void REGAL_CALL gmock_glProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value) {
  return RegalGMockInterface::current->glProgramUniform3i64vNV(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) {
  return RegalGMockInterface::current->glProgramUniform3ui64NV(program, location, x, y, z);
}

void REGAL_CALL gmock_glProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) {
  return RegalGMockInterface::current->glProgramUniform3ui64vNV(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) {
  return RegalGMockInterface::current->glProgramUniform4i64NV(program, location, x, y, z, w);
}

void REGAL_CALL gmock_glProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value) {
  return RegalGMockInterface::current->glProgramUniform4i64vNV(program, location, count, value);
}

void REGAL_CALL gmock_glProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) {
  return RegalGMockInterface::current->glProgramUniform4ui64NV(program, location, x, y, z, w);
}

void REGAL_CALL gmock_glProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) {
  return RegalGMockInterface::current->glProgramUniform4ui64vNV(program, location, count, value);
}

void REGAL_CALL gmock_glUniform1i64NV(GLint location, GLint64EXT x) {
  return RegalGMockInterface::current->glUniform1i64NV(location, x);
}

void REGAL_CALL gmock_glUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT *value) {
  return RegalGMockInterface::current->glUniform1i64vNV(location, count, value);
}

void REGAL_CALL gmock_glUniform1ui64NV(GLint location, GLuint64EXT x) {
  return RegalGMockInterface::current->glUniform1ui64NV(location, x);
}

void REGAL_CALL gmock_glUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value) {
  return RegalGMockInterface::current->glUniform1ui64vNV(location, count, value);
}

void REGAL_CALL gmock_glUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y) {
  return RegalGMockInterface::current->glUniform2i64NV(location, x, y);
}

void REGAL_CALL gmock_glUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT *value) {
  return RegalGMockInterface::current->glUniform2i64vNV(location, count, value);
}

void REGAL_CALL gmock_glUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y) {
  return RegalGMockInterface::current->glUniform2ui64NV(location, x, y);
}

void REGAL_CALL gmock_glUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value) {
  return RegalGMockInterface::current->glUniform2ui64vNV(location, count, value);
}

void REGAL_CALL gmock_glUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) {
  return RegalGMockInterface::current->glUniform3i64NV(location, x, y, z);
}

void REGAL_CALL gmock_glUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT *value) {
  return RegalGMockInterface::current->glUniform3i64vNV(location, count, value);
}

void REGAL_CALL gmock_glUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) {
  return RegalGMockInterface::current->glUniform3ui64NV(location, x, y, z);
}

void REGAL_CALL gmock_glUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value) {
  return RegalGMockInterface::current->glUniform3ui64vNV(location, count, value);
}

void REGAL_CALL gmock_glUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) {
  return RegalGMockInterface::current->glUniform4i64NV(location, x, y, z, w);
}

void REGAL_CALL gmock_glUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT *value) {
  return RegalGMockInterface::current->glUniform4i64vNV(location, count, value);
}

void REGAL_CALL gmock_glUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) {
  return RegalGMockInterface::current->glUniform4ui64NV(location, x, y, z, w);
}

void REGAL_CALL gmock_glUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value) {
  return RegalGMockInterface::current->glUniform4ui64vNV(location, count, value);
}

void REGAL_CALL gmock_glColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue) {
  return RegalGMockInterface::current->glColor3hNV(red, green, blue);
}

void REGAL_CALL gmock_glColor3hvNV(const GLhalfNV *v) {
  return RegalGMockInterface::current->glColor3hvNV(v);
}

void REGAL_CALL gmock_glColor4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha) {
  return RegalGMockInterface::current->glColor4hNV(red, green, blue, alpha);
}

void REGAL_CALL gmock_glColor4hvNV(const GLhalfNV *v) {
  return RegalGMockInterface::current->glColor4hvNV(v);
}

void REGAL_CALL gmock_glFogCoordhNV(GLhalfNV coord) {
  return RegalGMockInterface::current->glFogCoordhNV(coord);
}

void REGAL_CALL gmock_glFogCoordhvNV(const GLhalfNV *coord) {
  return RegalGMockInterface::current->glFogCoordhvNV(coord);
}

void REGAL_CALL gmock_glMultiTexCoord1hNV(GLenum target, GLhalfNV s) {
  return RegalGMockInterface::current->glMultiTexCoord1hNV(target, s);
}

void REGAL_CALL gmock_glMultiTexCoord1hvNV(GLenum target, const GLhalfNV *v) {
  return RegalGMockInterface::current->glMultiTexCoord1hvNV(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t) {
  return RegalGMockInterface::current->glMultiTexCoord2hNV(target, s, t);
}

void REGAL_CALL gmock_glMultiTexCoord2hvNV(GLenum target, const GLhalfNV *v) {
  return RegalGMockInterface::current->glMultiTexCoord2hvNV(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r) {
  return RegalGMockInterface::current->glMultiTexCoord3hNV(target, s, t, r);
}

void REGAL_CALL gmock_glMultiTexCoord3hvNV(GLenum target, const GLhalfNV *v) {
  return RegalGMockInterface::current->glMultiTexCoord3hvNV(target, v);
}

void REGAL_CALL gmock_glMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) {
  return RegalGMockInterface::current->glMultiTexCoord4hNV(target, s, t, r, q);
}

void REGAL_CALL gmock_glMultiTexCoord4hvNV(GLenum target, const GLhalfNV *v) {
  return RegalGMockInterface::current->glMultiTexCoord4hvNV(target, v);
}

void REGAL_CALL gmock_glNormal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz) {
  return RegalGMockInterface::current->glNormal3hNV(nx, ny, nz);
}

void REGAL_CALL gmock_glNormal3hvNV(const GLhalfNV *v) {
  return RegalGMockInterface::current->glNormal3hvNV(v);
}

void REGAL_CALL gmock_glSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue) {
  return RegalGMockInterface::current->glSecondaryColor3hNV(red, green, blue);
}

void REGAL_CALL gmock_glSecondaryColor3hvNV(const GLhalfNV *v) {
  return RegalGMockInterface::current->glSecondaryColor3hvNV(v);
}

void REGAL_CALL gmock_glTexCoord1hNV(GLhalfNV s) {
  return RegalGMockInterface::current->glTexCoord1hNV(s);
}

void REGAL_CALL gmock_glTexCoord1hvNV(const GLhalfNV *v) {
  return RegalGMockInterface::current->glTexCoord1hvNV(v);
}

void REGAL_CALL gmock_glTexCoord2hNV(GLhalfNV s, GLhalfNV t) {
  return RegalGMockInterface::current->glTexCoord2hNV(s, t);
}

void REGAL_CALL gmock_glTexCoord2hvNV(const GLhalfNV *v) {
  return RegalGMockInterface::current->glTexCoord2hvNV(v);
}

void REGAL_CALL gmock_glTexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r) {
  return RegalGMockInterface::current->glTexCoord3hNV(s, t, r);
}

void REGAL_CALL gmock_glTexCoord3hvNV(const GLhalfNV *v) {
  return RegalGMockInterface::current->glTexCoord3hvNV(v);
}

void REGAL_CALL gmock_glTexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) {
  return RegalGMockInterface::current->glTexCoord4hNV(s, t, r, q);
}

void REGAL_CALL gmock_glTexCoord4hvNV(const GLhalfNV *v) {
  return RegalGMockInterface::current->glTexCoord4hvNV(v);
}

void REGAL_CALL gmock_glVertex2hNV(GLhalfNV x, GLhalfNV y) {
  return RegalGMockInterface::current->glVertex2hNV(x, y);
}

void REGAL_CALL gmock_glVertex2hvNV(const GLhalfNV *v) {
  return RegalGMockInterface::current->glVertex2hvNV(v);
}

void REGAL_CALL gmock_glVertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z) {
  return RegalGMockInterface::current->glVertex3hNV(x, y, z);
}

void REGAL_CALL gmock_glVertex3hvNV(const GLhalfNV *v) {
  return RegalGMockInterface::current->glVertex3hvNV(v);
}

void REGAL_CALL gmock_glVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) {
  return RegalGMockInterface::current->glVertex4hNV(x, y, z, w);
}

void REGAL_CALL gmock_glVertex4hvNV(const GLhalfNV *v) {
  return RegalGMockInterface::current->glVertex4hvNV(v);
}

void REGAL_CALL gmock_glVertexAttrib1hNV(GLuint index, GLhalfNV x) {
  return RegalGMockInterface::current->glVertexAttrib1hNV(index, x);
}

void REGAL_CALL gmock_glVertexAttrib1hvNV(GLuint index, const GLhalfNV *v) {
  return RegalGMockInterface::current->glVertexAttrib1hvNV(index, v);
}

void REGAL_CALL gmock_glVertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y) {
  return RegalGMockInterface::current->glVertexAttrib2hNV(index, x, y);
}

void REGAL_CALL gmock_glVertexAttrib2hvNV(GLuint index, const GLhalfNV *v) {
  return RegalGMockInterface::current->glVertexAttrib2hvNV(index, v);
}

void REGAL_CALL gmock_glVertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z) {
  return RegalGMockInterface::current->glVertexAttrib3hNV(index, x, y, z);
}

void REGAL_CALL gmock_glVertexAttrib3hvNV(GLuint index, const GLhalfNV *v) {
  return RegalGMockInterface::current->glVertexAttrib3hvNV(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) {
  return RegalGMockInterface::current->glVertexAttrib4hNV(index, x, y, z, w);
}

void REGAL_CALL gmock_glVertexAttrib4hvNV(GLuint index, const GLhalfNV *v) {
  return RegalGMockInterface::current->glVertexAttrib4hvNV(index, v);
}

void REGAL_CALL gmock_glVertexAttribs1hvNV(GLuint index, GLsizei count, const GLhalfNV *v) {
  return RegalGMockInterface::current->glVertexAttribs1hvNV(index, count, v);
}

void REGAL_CALL gmock_glVertexAttribs2hvNV(GLuint index, GLsizei count, const GLhalfNV *v) {
  return RegalGMockInterface::current->glVertexAttribs2hvNV(index, count, v);
}

void REGAL_CALL gmock_glVertexAttribs3hvNV(GLuint index, GLsizei count, const GLhalfNV *v) {
  return RegalGMockInterface::current->glVertexAttribs3hvNV(index, count, v);
}

void REGAL_CALL gmock_glVertexAttribs4hvNV(GLuint index, GLsizei count, const GLhalfNV *v) {
  return RegalGMockInterface::current->glVertexAttribs4hvNV(index, count, v);
}

void REGAL_CALL gmock_glVertexWeighthNV(GLhalfNV weight) {
  return RegalGMockInterface::current->glVertexWeighthNV(weight);
}

void REGAL_CALL gmock_glVertexWeighthvNV(const GLhalfNV *weight) {
  return RegalGMockInterface::current->glVertexWeighthvNV(weight);
}

void REGAL_CALL gmock_glBeginOcclusionQueryNV(GLuint id) {
  return RegalGMockInterface::current->glBeginOcclusionQueryNV(id);
}

void REGAL_CALL gmock_glDeleteOcclusionQueriesNV(GLsizei n, const GLuint *ids) {
  return RegalGMockInterface::current->glDeleteOcclusionQueriesNV(n, ids);
}

void REGAL_CALL gmock_glEndOcclusionQueryNV(void) {
  return RegalGMockInterface::current->glEndOcclusionQueryNV();
}

void REGAL_CALL gmock_glGenOcclusionQueriesNV(GLsizei n, GLuint *ids) {
  return RegalGMockInterface::current->glGenOcclusionQueriesNV(n, ids);
}

void REGAL_CALL gmock_glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetOcclusionQueryivNV(id, pname, params);
}

void REGAL_CALL gmock_glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint *params) {
  return RegalGMockInterface::current->glGetOcclusionQueryuivNV(id, pname, params);
}

GLboolean REGAL_CALL gmock_glIsOcclusionQueryNV(GLuint id) {
  return RegalGMockInterface::current->glIsOcclusionQueryNV(id);
}

void REGAL_CALL gmock_glProgramBufferParametersIivNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params) {
  return RegalGMockInterface::current->glProgramBufferParametersIivNV(target, buffer, index, count, params);
}

void REGAL_CALL gmock_glProgramBufferParametersIuivNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params) {
  return RegalGMockInterface::current->glProgramBufferParametersIuivNV(target, buffer, index, count, params);
}

void REGAL_CALL gmock_glProgramBufferParametersfvNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params) {
  return RegalGMockInterface::current->glProgramBufferParametersfvNV(target, buffer, index, count, params);
}

void REGAL_CALL gmock_glCopyPathNV(GLuint resultPath, GLuint srcPath) {
  return RegalGMockInterface::current->glCopyPathNV(resultPath, srcPath);
}

void REGAL_CALL gmock_glCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) {
  return RegalGMockInterface::current->glCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
}

void REGAL_CALL gmock_glCoverFillPathNV(GLuint path, GLenum coverMode) {
  return RegalGMockInterface::current->glCoverFillPathNV(path, coverMode);
}

void REGAL_CALL gmock_glCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues) {
  return RegalGMockInterface::current->glCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
}

void REGAL_CALL gmock_glCoverStrokePathNV(GLuint name, GLenum coverMode) {
  return RegalGMockInterface::current->glCoverStrokePathNV(name, coverMode);
}

void REGAL_CALL gmock_glDeletePathsNV(GLuint path, GLsizei range) {
  return RegalGMockInterface::current->glDeletePathsNV(path, range);
}

GLuint REGAL_CALL gmock_glGenPathsNV(GLsizei range) {
  return RegalGMockInterface::current->glGenPathsNV(range);
}

void REGAL_CALL gmock_glGetPathColorGenfvNV(GLenum color, GLenum pname, GLfloat *value) {
  return RegalGMockInterface::current->glGetPathColorGenfvNV(color, pname, value);
}

void REGAL_CALL gmock_glGetPathColorGenivNV(GLenum color, GLenum pname, GLint *value) {
  return RegalGMockInterface::current->glGetPathColorGenivNV(color, pname, value);
}

void REGAL_CALL gmock_glGetPathCommandsNV(GLuint name, GLubyte *commands) {
  return RegalGMockInterface::current->glGetPathCommandsNV(name, commands);
}

void REGAL_CALL gmock_glGetPathCoordsNV(GLuint name, GLfloat *coords) {
  return RegalGMockInterface::current->glGetPathCoordsNV(name, coords);
}

void REGAL_CALL gmock_glGetPathDashArrayNV(GLuint name, GLfloat *dashArray) {
  return RegalGMockInterface::current->glGetPathDashArrayNV(name, dashArray);
}

GLfloat REGAL_CALL gmock_glGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments) {
  return RegalGMockInterface::current->glGetPathLengthNV(path, startSegment, numSegments);
}

void REGAL_CALL gmock_glGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint fistPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics) {
  return RegalGMockInterface::current->glGetPathMetricRangeNV(metricQueryMask, fistPathName, numPaths, stride, metrics);
}

void REGAL_CALL gmock_glGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics) {
  return RegalGMockInterface::current->glGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
}

void REGAL_CALL gmock_glGetPathParameterfvNV(GLuint name, GLenum param, GLfloat *value) {
  return RegalGMockInterface::current->glGetPathParameterfvNV(name, param, value);
}

void REGAL_CALL gmock_glGetPathParameterivNV(GLuint name, GLenum param, GLint *value) {
  return RegalGMockInterface::current->glGetPathParameterivNV(name, param, value);
}

void REGAL_CALL gmock_glGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing) {
  return RegalGMockInterface::current->glGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
}

void REGAL_CALL gmock_glGetPathTexGenfvNV(GLenum texCoordSet, GLenum pname, GLfloat *value) {
  return RegalGMockInterface::current->glGetPathTexGenfvNV(texCoordSet, pname, value);
}

void REGAL_CALL gmock_glGetPathTexGenivNV(GLenum texCoordSet, GLenum pname, GLint *value) {
  return RegalGMockInterface::current->glGetPathTexGenivNV(texCoordSet, pname, value);
}

void REGAL_CALL gmock_glInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight) {
  return RegalGMockInterface::current->glInterpolatePathsNV(resultPath, pathA, pathB, weight);
}

GLboolean REGAL_CALL gmock_glIsPathNV(GLuint path) {
  return RegalGMockInterface::current->glIsPathNV(path);
}

GLboolean REGAL_CALL gmock_glIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y) {
  return RegalGMockInterface::current->glIsPointInFillPathNV(path, mask, x, y);
}

GLboolean REGAL_CALL gmock_glIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y) {
  return RegalGMockInterface::current->glIsPointInStrokePathNV(path, x, y);
}

void REGAL_CALL gmock_glPathColorGenNV(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs) {
  return RegalGMockInterface::current->glPathColorGenNV(color, genMode, colorFormat, coeffs);
}

void REGAL_CALL gmock_glPathCommandsNV(GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords) {
  return RegalGMockInterface::current->glPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords);
}

void REGAL_CALL gmock_glPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords) {
  return RegalGMockInterface::current->glPathCoordsNV(path, numCoords, coordType, coords);
}

void REGAL_CALL gmock_glPathCoverDepthFuncNV(GLenum zfunc) {
  return RegalGMockInterface::current->glPathCoverDepthFuncNV(zfunc);
}

void REGAL_CALL gmock_glPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat *dashArray) {
  return RegalGMockInterface::current->glPathDashArrayNV(path, dashCount, dashArray);
}

void REGAL_CALL gmock_glPathFogGenNV(GLenum genMode) {
  return RegalGMockInterface::current->glPathFogGenNV(genMode);
}

void REGAL_CALL gmock_glPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {
  return RegalGMockInterface::current->glPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
}

void REGAL_CALL gmock_glPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) {
  return RegalGMockInterface::current->glPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
}

void REGAL_CALL gmock_glPathParameterfNV(GLuint path, GLenum pname, GLfloat value) {
  return RegalGMockInterface::current->glPathParameterfNV(path, pname, value);
}

void REGAL_CALL gmock_glPathParameterfvNV(GLuint path, GLenum pname, const GLfloat *value) {
  return RegalGMockInterface::current->glPathParameterfvNV(path, pname, value);
}

void REGAL_CALL gmock_glPathParameteriNV(GLuint path, GLenum pname, GLint value) {
  return RegalGMockInterface::current->glPathParameteriNV(path, pname, value);
}

void REGAL_CALL gmock_glPathParameterivNV(GLuint path, GLenum pname, const GLint *value) {
  return RegalGMockInterface::current->glPathParameterivNV(path, pname, value);
}

void REGAL_CALL gmock_glPathStencilDepthOffsetNV(GLfloat factor, GLfloat units) {
  return RegalGMockInterface::current->glPathStencilDepthOffsetNV(factor, units);
}

void REGAL_CALL gmock_glPathStencilFuncNV(GLenum func, GLint ref, GLuint mask) {
  return RegalGMockInterface::current->glPathStencilFuncNV(func, ref, mask);
}

void REGAL_CALL gmock_glPathStringNV(GLuint path, GLenum format, GLsizei length, const GLvoid *pathString) {
  return RegalGMockInterface::current->glPathStringNV(path, format, length, pathString);
}

void REGAL_CALL gmock_glPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords) {
  return RegalGMockInterface::current->glPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
}

void REGAL_CALL gmock_glPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords) {
  return RegalGMockInterface::current->glPathSubCoordsNV(path, coordStart, numCoords, coordType, coords);
}

void REGAL_CALL gmock_glPathTexGenNV(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs) {
  return RegalGMockInterface::current->glPathTexGenNV(texCoordSet, genMode, components, coeffs);
}

GLboolean REGAL_CALL gmock_glPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY) {
  return RegalGMockInterface::current->glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
}

void REGAL_CALL gmock_glStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues) {
  return RegalGMockInterface::current->glStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
}

void REGAL_CALL gmock_glStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask) {
  return RegalGMockInterface::current->glStencilFillPathNV(path, fillMode, mask);
}

void REGAL_CALL gmock_glStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues) {
  return RegalGMockInterface::current->glStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
}

void REGAL_CALL gmock_glStencilStrokePathNV(GLuint path, GLint reference, GLuint mask) {
  return RegalGMockInterface::current->glStencilStrokePathNV(path, reference, mask);
}

void REGAL_CALL gmock_glTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues) {
  return RegalGMockInterface::current->glTransformPathNV(resultPath, srcPath, transformType, transformValues);
}

void REGAL_CALL gmock_glWeightPathsNV(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights) {
  return RegalGMockInterface::current->glWeightPathsNV(resultPath, numPaths, paths, weights);
}

void REGAL_CALL gmock_glFlushPixelDataRangeNV(GLenum target) {
  return RegalGMockInterface::current->glFlushPixelDataRangeNV(target);
}

void REGAL_CALL gmock_glPixelDataRangeNV(GLenum target, GLsizei size, const GLvoid *pointer) {
  return RegalGMockInterface::current->glPixelDataRangeNV(target, size, pointer);
}

void REGAL_CALL gmock_glPointParameteriNV(GLenum pname, GLint param) {
  return RegalGMockInterface::current->glPointParameteriNV(pname, param);
}

void REGAL_CALL gmock_glPointParameterivNV(GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glPointParameterivNV(pname, params);
}

void REGAL_CALL gmock_glGetVideoi64vNV(GLuint video_slot, GLenum pname, GLint64EXT *params) {
  return RegalGMockInterface::current->glGetVideoi64vNV(video_slot, pname, params);
}

void REGAL_CALL gmock_glGetVideoivNV(GLuint video_slot, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetVideoivNV(video_slot, pname, params);
}

void REGAL_CALL gmock_glGetVideoui64vNV(GLuint video_slot, GLenum pname, GLuint64EXT *params) {
  return RegalGMockInterface::current->glGetVideoui64vNV(video_slot, pname, params);
}

void REGAL_CALL gmock_glGetVideouivNV(GLuint video_slot, GLenum pname, GLuint *params) {
  return RegalGMockInterface::current->glGetVideouivNV(video_slot, pname, params);
}

void REGAL_CALL gmock_glPresentFrameDualFillNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3) {
  // glPresentFrameDualFillNV has too many arguments for GMock.
}

void REGAL_CALL gmock_glPresentFrameKeyedNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1) {
  // glPresentFrameKeyedNV has too many arguments for GMock.
}

void REGAL_CALL gmock_glPrimitiveRestartIndexNV(GLuint index) {
  return RegalGMockInterface::current->glPrimitiveRestartIndexNV(index);
}

void REGAL_CALL gmock_glPrimitiveRestartNV(void) {
  return RegalGMockInterface::current->glPrimitiveRestartNV();
}

void REGAL_CALL gmock_glReadBufferNV(GLenum mode) {
  return RegalGMockInterface::current->glReadBufferNV(mode);
}

void REGAL_CALL gmock_glCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) {
  return RegalGMockInterface::current->glCombinerInputNV(stage, portion, variable, input, mapping, componentUsage);
}

void REGAL_CALL gmock_glCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum) {
  return RegalGMockInterface::current->glCombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
}

void REGAL_CALL gmock_glCombinerParameterfNV(GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glCombinerParameterfNV(pname, param);
}

void REGAL_CALL gmock_glCombinerParameterfvNV(GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glCombinerParameterfvNV(pname, params);
}

void REGAL_CALL gmock_glCombinerParameteriNV(GLenum pname, GLint param) {
  return RegalGMockInterface::current->glCombinerParameteriNV(pname, param);
}

void REGAL_CALL gmock_glCombinerParameterivNV(GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glCombinerParameterivNV(pname, params);
}

void REGAL_CALL gmock_glFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) {
  return RegalGMockInterface::current->glFinalCombinerInputNV(variable, input, mapping, componentUsage);
}

void REGAL_CALL gmock_glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetCombinerInputParameterfvNV(stage, portion, variable, pname, params);
}

void REGAL_CALL gmock_glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetCombinerInputParameterivNV(stage, portion, variable, pname, params);
}

void REGAL_CALL gmock_glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetCombinerOutputParameterfvNV(stage, portion, pname, params);
}

void REGAL_CALL gmock_glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetCombinerOutputParameterivNV(stage, portion, pname, params);
}

void REGAL_CALL gmock_glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetFinalCombinerInputParameterfvNV(variable, pname, params);
}

void REGAL_CALL gmock_glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetFinalCombinerInputParameterivNV(variable, pname, params);
}

void REGAL_CALL gmock_glCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glCombinerStageParameterfvNV(stage, pname, params);
}

void REGAL_CALL gmock_glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetCombinerStageParameterfvNV(stage, pname, params);
}

void REGAL_CALL gmock_glGetBufferParameterui64vNV(GLenum target, GLenum pname, GLuint64EXT *params) {
  return RegalGMockInterface::current->glGetBufferParameterui64vNV(target, pname, params);
}

void REGAL_CALL gmock_glGetIntegerui64vNV(GLenum target, GLuint64EXT *data) {
  return RegalGMockInterface::current->glGetIntegerui64vNV(target, data);
}

void REGAL_CALL gmock_glGetNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, GLuint64EXT *params) {
  return RegalGMockInterface::current->glGetNamedBufferParameterui64vNV(buffer, pname, params);
}

void REGAL_CALL gmock_glGetUniformui64vNV(GLuint program, GLint location, GLuint64EXT *params) {
  return RegalGMockInterface::current->glGetUniformui64vNV(program, location, params);
}

GLboolean REGAL_CALL gmock_glIsBufferResidentNV(GLenum target) {
  return RegalGMockInterface::current->glIsBufferResidentNV(target);
}

GLboolean REGAL_CALL gmock_glIsNamedBufferResidentNV(GLuint buffer) {
  return RegalGMockInterface::current->glIsNamedBufferResidentNV(buffer);
}

void REGAL_CALL gmock_glMakeBufferNonResidentNV(GLenum target) {
  return RegalGMockInterface::current->glMakeBufferNonResidentNV(target);
}

void REGAL_CALL gmock_glMakeBufferResidentNV(GLenum target, GLenum access) {
  return RegalGMockInterface::current->glMakeBufferResidentNV(target, access);
}

void REGAL_CALL gmock_glMakeNamedBufferNonResidentNV(GLuint buffer) {
  return RegalGMockInterface::current->glMakeNamedBufferNonResidentNV(buffer);
}

void REGAL_CALL gmock_glMakeNamedBufferResidentNV(GLuint buffer, GLenum access) {
  return RegalGMockInterface::current->glMakeNamedBufferResidentNV(buffer, access);
}

void REGAL_CALL gmock_glProgramUniformui64NV(GLuint program, GLint location, GLuint64EXT v0) {
  return RegalGMockInterface::current->glProgramUniformui64NV(program, location, v0);
}

void REGAL_CALL gmock_glProgramUniformui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value) {
  return RegalGMockInterface::current->glProgramUniformui64vNV(program, location, count, value);
}

void REGAL_CALL gmock_glUniformui64NV(GLint location, GLuint64EXT v0) {
  return RegalGMockInterface::current->glUniformui64NV(location, v0);
}

void REGAL_CALL gmock_glUniformui64vNV(GLint location, GLsizei count, const GLuint64EXT *value) {
  return RegalGMockInterface::current->glUniformui64vNV(location, count, value);
}

void REGAL_CALL gmock_glTextureBarrierNV(void) {
  return RegalGMockInterface::current->glTextureBarrierNV();
}

void REGAL_CALL gmock_glTexImage2DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) {
  return RegalGMockInterface::current->glTexImage2DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
}

void REGAL_CALL gmock_glTexImage3DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) {
  return RegalGMockInterface::current->glTexImage3DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
}

void REGAL_CALL gmock_glTextureImage2DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) {
  return RegalGMockInterface::current->glTextureImage2DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
}

void REGAL_CALL gmock_glTextureImage2DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) {
  return RegalGMockInterface::current->glTextureImage2DMultisampleNV(texture, target, samples, internalFormat, width, height, fixedSampleLocations);
}

void REGAL_CALL gmock_glTextureImage3DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) {
  return RegalGMockInterface::current->glTextureImage3DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
}

void REGAL_CALL gmock_glTextureImage3DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) {
  return RegalGMockInterface::current->glTextureImage3DMultisampleNV(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
}

void REGAL_CALL gmock_glActiveVaryingNV(GLuint program, const GLchar *name) {
  return RegalGMockInterface::current->glActiveVaryingNV(program, name);
}

void REGAL_CALL gmock_glBeginTransformFeedbackNV(GLenum primitiveMode) {
  return RegalGMockInterface::current->glBeginTransformFeedbackNV(primitiveMode);
}

void REGAL_CALL gmock_glBindBufferBaseNV(GLenum target, GLuint index, GLuint buffer) {
  return RegalGMockInterface::current->glBindBufferBaseNV(target, index, buffer);
}

void REGAL_CALL gmock_glBindBufferOffsetNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset) {
  return RegalGMockInterface::current->glBindBufferOffsetNV(target, index, buffer, offset);
}

void REGAL_CALL gmock_glBindBufferRangeNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) {
  return RegalGMockInterface::current->glBindBufferRangeNV(target, index, buffer, offset, size);
}

void REGAL_CALL gmock_glEndTransformFeedbackNV(void) {
  return RegalGMockInterface::current->glEndTransformFeedbackNV();
}

void REGAL_CALL gmock_glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name) {
  return RegalGMockInterface::current->glGetActiveVaryingNV(program, index, bufSize, length, size, type, name);
}

void REGAL_CALL gmock_glGetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint *location) {
  return RegalGMockInterface::current->glGetTransformFeedbackVaryingNV(program, index, location);
}

GLint REGAL_CALL gmock_glGetVaryingLocationNV(GLuint program, const GLchar *name) {
  return RegalGMockInterface::current->glGetVaryingLocationNV(program, name);
}

void REGAL_CALL gmock_glTransformFeedbackAttribsNV(GLuint count, const GLint *attribs, GLenum bufferMode) {
  return RegalGMockInterface::current->glTransformFeedbackAttribsNV(count, attribs, bufferMode);
}

void REGAL_CALL gmock_glTransformFeedbackVaryingsNV(GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode) {
  return RegalGMockInterface::current->glTransformFeedbackVaryingsNV(program, count, locations, bufferMode);
}

void REGAL_CALL gmock_glBindTransformFeedbackNV(GLenum target, GLuint id) {
  return RegalGMockInterface::current->glBindTransformFeedbackNV(target, id);
}

void REGAL_CALL gmock_glDeleteTransformFeedbacksNV(GLsizei n, const GLuint *ids) {
  return RegalGMockInterface::current->glDeleteTransformFeedbacksNV(n, ids);
}

void REGAL_CALL gmock_glDrawTransformFeedbackNV(GLenum mode, GLuint name) {
  return RegalGMockInterface::current->glDrawTransformFeedbackNV(mode, name);
}

void REGAL_CALL gmock_glGenTransformFeedbacksNV(GLsizei n, GLuint *ids) {
  return RegalGMockInterface::current->glGenTransformFeedbacksNV(n, ids);
}

GLboolean REGAL_CALL gmock_glIsTransformFeedbackNV(GLuint id) {
  return RegalGMockInterface::current->glIsTransformFeedbackNV(id);
}

void REGAL_CALL gmock_glPauseTransformFeedbackNV(void) {
  return RegalGMockInterface::current->glPauseTransformFeedbackNV();
}

void REGAL_CALL gmock_glResumeTransformFeedbackNV(void) {
  return RegalGMockInterface::current->glResumeTransformFeedbackNV();
}

void REGAL_CALL gmock_glVDPAUFiniNV(void) {
  return RegalGMockInterface::current->glVDPAUFiniNV();
}

void REGAL_CALL gmock_glVDPAUGetSurfaceivNV(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values) {
  return RegalGMockInterface::current->glVDPAUGetSurfaceivNV(surface, pname, bufSize, length, values);
}

void REGAL_CALL gmock_glVDPAUInitNV(const GLvoid *vdpDevice, const GLvoid *getProcAddress) {
  return RegalGMockInterface::current->glVDPAUInitNV(vdpDevice, getProcAddress);
}

GLboolean REGAL_CALL gmock_glVDPAUIsSurfaceNV(GLvdpauSurfaceNV surface) {
  return RegalGMockInterface::current->glVDPAUIsSurfaceNV(surface);
}

void REGAL_CALL gmock_glVDPAUMapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces) {
  return RegalGMockInterface::current->glVDPAUMapSurfacesNV(numSurfaces, surfaces);
}

GLvdpauSurfaceNV REGAL_CALL gmock_glVDPAURegisterOutputSurfaceNV(const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames) {
  return RegalGMockInterface::current->glVDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, textureNames);
}

GLvdpauSurfaceNV REGAL_CALL gmock_glVDPAURegisterVideoSurfaceNV(const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames) {
  return RegalGMockInterface::current->glVDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, textureNames);
}

void REGAL_CALL gmock_glVDPAUSurfaceAccessNV(GLvdpauSurfaceNV surface, GLenum access) {
  return RegalGMockInterface::current->glVDPAUSurfaceAccessNV(surface, access);
}

void REGAL_CALL gmock_glVDPAUUnmapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces) {
  return RegalGMockInterface::current->glVDPAUUnmapSurfacesNV(numSurfaces, surfaces);
}

void REGAL_CALL gmock_glVDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV surface) {
  return RegalGMockInterface::current->glVDPAUUnregisterSurfaceNV(surface);
}

void REGAL_CALL gmock_glFlushVertexArrayRangeNV(void) {
  return RegalGMockInterface::current->glFlushVertexArrayRangeNV();
}

void REGAL_CALL gmock_glVertexArrayRangeNV(GLsizei size, const GLvoid *pointer) {
  return RegalGMockInterface::current->glVertexArrayRangeNV(size, pointer);
}

void REGAL_CALL gmock_glGetVertexAttribLi64vNV(GLuint index, GLenum pname, GLint64EXT *params) {
  return RegalGMockInterface::current->glGetVertexAttribLi64vNV(index, pname, params);
}

void REGAL_CALL gmock_glGetVertexAttribLui64vNV(GLuint index, GLenum pname, GLuint64EXT *params) {
  return RegalGMockInterface::current->glGetVertexAttribLui64vNV(index, pname, params);
}

void REGAL_CALL gmock_glVertexAttribL1i64NV(GLuint index, GLint64EXT x) {
  return RegalGMockInterface::current->glVertexAttribL1i64NV(index, x);
}

void REGAL_CALL gmock_glVertexAttribL1i64vNV(GLuint index, const GLint64EXT *v) {
  return RegalGMockInterface::current->glVertexAttribL1i64vNV(index, v);
}

void REGAL_CALL gmock_glVertexAttribL1ui64NV(GLuint index, GLuint64EXT x) {
  return RegalGMockInterface::current->glVertexAttribL1ui64NV(index, x);
}

void REGAL_CALL gmock_glVertexAttribL1ui64vNV(GLuint index, const GLuint64EXT *v) {
  return RegalGMockInterface::current->glVertexAttribL1ui64vNV(index, v);
}

void REGAL_CALL gmock_glVertexAttribL2i64NV(GLuint index, GLint64EXT x, GLint64EXT y) {
  return RegalGMockInterface::current->glVertexAttribL2i64NV(index, x, y);
}

void REGAL_CALL gmock_glVertexAttribL2i64vNV(GLuint index, const GLint64EXT *v) {
  return RegalGMockInterface::current->glVertexAttribL2i64vNV(index, v);
}

void REGAL_CALL gmock_glVertexAttribL2ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y) {
  return RegalGMockInterface::current->glVertexAttribL2ui64NV(index, x, y);
}

void REGAL_CALL gmock_glVertexAttribL2ui64vNV(GLuint index, const GLuint64EXT *v) {
  return RegalGMockInterface::current->glVertexAttribL2ui64vNV(index, v);
}

void REGAL_CALL gmock_glVertexAttribL3i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z) {
  return RegalGMockInterface::current->glVertexAttribL3i64NV(index, x, y, z);
}

void REGAL_CALL gmock_glVertexAttribL3i64vNV(GLuint index, const GLint64EXT *v) {
  return RegalGMockInterface::current->glVertexAttribL3i64vNV(index, v);
}

void REGAL_CALL gmock_glVertexAttribL3ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) {
  return RegalGMockInterface::current->glVertexAttribL3ui64NV(index, x, y, z);
}

void REGAL_CALL gmock_glVertexAttribL3ui64vNV(GLuint index, const GLuint64EXT *v) {
  return RegalGMockInterface::current->glVertexAttribL3ui64vNV(index, v);
}

void REGAL_CALL gmock_glVertexAttribL4i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) {
  return RegalGMockInterface::current->glVertexAttribL4i64NV(index, x, y, z, w);
}

void REGAL_CALL gmock_glVertexAttribL4i64vNV(GLuint index, const GLint64EXT *v) {
  return RegalGMockInterface::current->glVertexAttribL4i64vNV(index, v);
}

void REGAL_CALL gmock_glVertexAttribL4ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) {
  return RegalGMockInterface::current->glVertexAttribL4ui64NV(index, x, y, z, w);
}

void REGAL_CALL gmock_glVertexAttribL4ui64vNV(GLuint index, const GLuint64EXT *v) {
  return RegalGMockInterface::current->glVertexAttribL4ui64vNV(index, v);
}

void REGAL_CALL gmock_glVertexAttribLFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride) {
  return RegalGMockInterface::current->glVertexAttribLFormatNV(index, size, type, stride);
}

void REGAL_CALL gmock_glBufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length) {
  return RegalGMockInterface::current->glBufferAddressRangeNV(pname, index, address, length);
}

void REGAL_CALL gmock_glColorFormatNV(GLint size, GLenum type, GLsizei stride) {
  return RegalGMockInterface::current->glColorFormatNV(size, type, stride);
}

void REGAL_CALL gmock_glEdgeFlagFormatNV(GLsizei stride) {
  return RegalGMockInterface::current->glEdgeFlagFormatNV(stride);
}

void REGAL_CALL gmock_glFogCoordFormatNV(GLenum type, GLsizei stride) {
  return RegalGMockInterface::current->glFogCoordFormatNV(type, stride);
}

void REGAL_CALL gmock_glGetIntegerui64i_vNV(GLenum target, GLuint index, GLuint64EXT *data) {
  return RegalGMockInterface::current->glGetIntegerui64i_vNV(target, index, data);
}

void REGAL_CALL gmock_glIndexFormatNV(GLenum type, GLsizei stride) {
  return RegalGMockInterface::current->glIndexFormatNV(type, stride);
}

void REGAL_CALL gmock_glNormalFormatNV(GLenum type, GLsizei stride) {
  return RegalGMockInterface::current->glNormalFormatNV(type, stride);
}

void REGAL_CALL gmock_glSecondaryColorFormatNV(GLint size, GLenum type, GLsizei stride) {
  return RegalGMockInterface::current->glSecondaryColorFormatNV(size, type, stride);
}

void REGAL_CALL gmock_glTexCoordFormatNV(GLint size, GLenum type, GLsizei stride) {
  return RegalGMockInterface::current->glTexCoordFormatNV(size, type, stride);
}

void REGAL_CALL gmock_glVertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride) {
  return RegalGMockInterface::current->glVertexAttribFormatNV(index, size, type, normalized, stride);
}

void REGAL_CALL gmock_glVertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride) {
  return RegalGMockInterface::current->glVertexAttribIFormatNV(index, size, type, stride);
}

void REGAL_CALL gmock_glVertexFormatNV(GLint size, GLenum type, GLsizei stride) {
  return RegalGMockInterface::current->glVertexFormatNV(size, type, stride);
}

GLboolean REGAL_CALL gmock_glAreProgramsResidentNV(GLsizei n, const GLuint *programs, GLboolean *residences) {
  return RegalGMockInterface::current->glAreProgramsResidentNV(n, programs, residences);
}

void REGAL_CALL gmock_glBindProgramNV(GLenum target, GLuint id) {
  return RegalGMockInterface::current->glBindProgramNV(target, id);
}

void REGAL_CALL gmock_glDeleteProgramsNV(GLsizei n, const GLuint *programs) {
  return RegalGMockInterface::current->glDeleteProgramsNV(n, programs);
}

void REGAL_CALL gmock_glExecuteProgramNV(GLenum target, GLuint id, const GLfloat *params) {
  return RegalGMockInterface::current->glExecuteProgramNV(target, id, params);
}

void REGAL_CALL gmock_glGenProgramsNV(GLsizei n, GLuint *programs) {
  return RegalGMockInterface::current->glGenProgramsNV(n, programs);
}

void REGAL_CALL gmock_glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble *params) {
  return RegalGMockInterface::current->glGetProgramParameterdvNV(target, index, pname, params);
}

void REGAL_CALL gmock_glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetProgramParameterfvNV(target, index, pname, params);
}

void REGAL_CALL gmock_glGetProgramStringNV(GLuint id, GLenum pname, GLubyte *program) {
  return RegalGMockInterface::current->glGetProgramStringNV(id, pname, program);
}

void REGAL_CALL gmock_glGetProgramivNV(GLuint id, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetProgramivNV(id, pname, params);
}

void REGAL_CALL gmock_glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetTrackMatrixivNV(target, address, pname, params);
}

void REGAL_CALL gmock_glGetVertexAttribPointervNV(GLuint index, GLenum pname, GLvoid **pointer) {
  return RegalGMockInterface::current->glGetVertexAttribPointervNV(index, pname, pointer);
}

void REGAL_CALL gmock_glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble *params) {
  return RegalGMockInterface::current->glGetVertexAttribdvNV(index, pname, params);
}

void REGAL_CALL gmock_glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetVertexAttribfvNV(index, pname, params);
}

void REGAL_CALL gmock_glGetVertexAttribivNV(GLuint index, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetVertexAttribivNV(index, pname, params);
}

GLboolean REGAL_CALL gmock_glIsProgramNV(GLuint id) {
  return RegalGMockInterface::current->glIsProgramNV(id);
}

void REGAL_CALL gmock_glLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte *program) {
  return RegalGMockInterface::current->glLoadProgramNV(target, id, len, program);
}

void REGAL_CALL gmock_glProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  return RegalGMockInterface::current->glProgramParameter4dNV(target, index, x, y, z, w);
}

void REGAL_CALL gmock_glProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble *v) {
  return RegalGMockInterface::current->glProgramParameter4dvNV(target, index, v);
}

void REGAL_CALL gmock_glProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  return RegalGMockInterface::current->glProgramParameter4fNV(target, index, x, y, z, w);
}

void REGAL_CALL gmock_glProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat *v) {
  return RegalGMockInterface::current->glProgramParameter4fvNV(target, index, v);
}

void REGAL_CALL gmock_glProgramParameters4dvNV(GLenum target, GLuint index, GLuint count, const GLdouble *v) {
  return RegalGMockInterface::current->glProgramParameters4dvNV(target, index, count, v);
}

void REGAL_CALL gmock_glProgramParameters4fvNV(GLenum target, GLuint index, GLuint count, const GLfloat *v) {
  return RegalGMockInterface::current->glProgramParameters4fvNV(target, index, count, v);
}

void REGAL_CALL gmock_glRequestResidentProgramsNV(GLsizei n, const GLuint *programs) {
  return RegalGMockInterface::current->glRequestResidentProgramsNV(n, programs);
}

void REGAL_CALL gmock_glTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform) {
  return RegalGMockInterface::current->glTrackMatrixNV(target, address, matrix, transform);
}

void REGAL_CALL gmock_glVertexAttrib1dNV(GLuint index, GLdouble x) {
  return RegalGMockInterface::current->glVertexAttrib1dNV(index, x);
}

void REGAL_CALL gmock_glVertexAttrib1dvNV(GLuint index, const GLdouble *v) {
  return RegalGMockInterface::current->glVertexAttrib1dvNV(index, v);
}

void REGAL_CALL gmock_glVertexAttrib1fNV(GLuint index, GLfloat x) {
  return RegalGMockInterface::current->glVertexAttrib1fNV(index, x);
}

void REGAL_CALL gmock_glVertexAttrib1fvNV(GLuint index, const GLfloat *v) {
  return RegalGMockInterface::current->glVertexAttrib1fvNV(index, v);
}

void REGAL_CALL gmock_glVertexAttrib1sNV(GLuint index, GLshort x) {
  return RegalGMockInterface::current->glVertexAttrib1sNV(index, x);
}

void REGAL_CALL gmock_glVertexAttrib1svNV(GLuint index, const GLshort *v) {
  return RegalGMockInterface::current->glVertexAttrib1svNV(index, v);
}

void REGAL_CALL gmock_glVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y) {
  return RegalGMockInterface::current->glVertexAttrib2dNV(index, x, y);
}

void REGAL_CALL gmock_glVertexAttrib2dvNV(GLuint index, const GLdouble *v) {
  return RegalGMockInterface::current->glVertexAttrib2dvNV(index, v);
}

void REGAL_CALL gmock_glVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y) {
  return RegalGMockInterface::current->glVertexAttrib2fNV(index, x, y);
}

void REGAL_CALL gmock_glVertexAttrib2fvNV(GLuint index, const GLfloat *v) {
  return RegalGMockInterface::current->glVertexAttrib2fvNV(index, v);
}

void REGAL_CALL gmock_glVertexAttrib2sNV(GLuint index, GLshort x, GLshort y) {
  return RegalGMockInterface::current->glVertexAttrib2sNV(index, x, y);
}

void REGAL_CALL gmock_glVertexAttrib2svNV(GLuint index, const GLshort *v) {
  return RegalGMockInterface::current->glVertexAttrib2svNV(index, v);
}

void REGAL_CALL gmock_glVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
  return RegalGMockInterface::current->glVertexAttrib3dNV(index, x, y, z);
}

void REGAL_CALL gmock_glVertexAttrib3dvNV(GLuint index, const GLdouble *v) {
  return RegalGMockInterface::current->glVertexAttrib3dvNV(index, v);
}

void REGAL_CALL gmock_glVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glVertexAttrib3fNV(index, x, y, z);
}

void REGAL_CALL gmock_glVertexAttrib3fvNV(GLuint index, const GLfloat *v) {
  return RegalGMockInterface::current->glVertexAttrib3fvNV(index, v);
}

void REGAL_CALL gmock_glVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z) {
  return RegalGMockInterface::current->glVertexAttrib3sNV(index, x, y, z);
}

void REGAL_CALL gmock_glVertexAttrib3svNV(GLuint index, const GLshort *v) {
  return RegalGMockInterface::current->glVertexAttrib3svNV(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  return RegalGMockInterface::current->glVertexAttrib4dNV(index, x, y, z, w);
}

void REGAL_CALL gmock_glVertexAttrib4dvNV(GLuint index, const GLdouble *v) {
  return RegalGMockInterface::current->glVertexAttrib4dvNV(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  return RegalGMockInterface::current->glVertexAttrib4fNV(index, x, y, z, w);
}

void REGAL_CALL gmock_glVertexAttrib4fvNV(GLuint index, const GLfloat *v) {
  return RegalGMockInterface::current->glVertexAttrib4fvNV(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {
  return RegalGMockInterface::current->glVertexAttrib4sNV(index, x, y, z, w);
}

void REGAL_CALL gmock_glVertexAttrib4svNV(GLuint index, const GLshort *v) {
  return RegalGMockInterface::current->glVertexAttrib4svNV(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {
  return RegalGMockInterface::current->glVertexAttrib4ubNV(index, x, y, z, w);
}

void REGAL_CALL gmock_glVertexAttrib4ubvNV(GLuint index, const GLubyte *v) {
  return RegalGMockInterface::current->glVertexAttrib4ubvNV(index, v);
}

void REGAL_CALL gmock_glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glVertexAttribPointerNV(index, fsize, type, stride, pointer);
}

void REGAL_CALL gmock_glVertexAttribs1dvNV(GLuint index, GLsizei n, const GLdouble *v) {
  return RegalGMockInterface::current->glVertexAttribs1dvNV(index, n, v);
}

void REGAL_CALL gmock_glVertexAttribs1fvNV(GLuint index, GLsizei n, const GLfloat *v) {
  return RegalGMockInterface::current->glVertexAttribs1fvNV(index, n, v);
}

void REGAL_CALL gmock_glVertexAttribs1svNV(GLuint index, GLsizei n, const GLshort *v) {
  return RegalGMockInterface::current->glVertexAttribs1svNV(index, n, v);
}

void REGAL_CALL gmock_glVertexAttribs2dvNV(GLuint index, GLsizei n, const GLdouble *v) {
  return RegalGMockInterface::current->glVertexAttribs2dvNV(index, n, v);
}

void REGAL_CALL gmock_glVertexAttribs2fvNV(GLuint index, GLsizei n, const GLfloat *v) {
  return RegalGMockInterface::current->glVertexAttribs2fvNV(index, n, v);
}

void REGAL_CALL gmock_glVertexAttribs2svNV(GLuint index, GLsizei n, const GLshort *v) {
  return RegalGMockInterface::current->glVertexAttribs2svNV(index, n, v);
}

void REGAL_CALL gmock_glVertexAttribs3dvNV(GLuint index, GLsizei n, const GLdouble *v) {
  return RegalGMockInterface::current->glVertexAttribs3dvNV(index, n, v);
}

void REGAL_CALL gmock_glVertexAttribs3fvNV(GLuint index, GLsizei n, const GLfloat *v) {
  return RegalGMockInterface::current->glVertexAttribs3fvNV(index, n, v);
}

void REGAL_CALL gmock_glVertexAttribs3svNV(GLuint index, GLsizei n, const GLshort *v) {
  return RegalGMockInterface::current->glVertexAttribs3svNV(index, n, v);
}

void REGAL_CALL gmock_glVertexAttribs4dvNV(GLuint index, GLsizei n, const GLdouble *v) {
  return RegalGMockInterface::current->glVertexAttribs4dvNV(index, n, v);
}

void REGAL_CALL gmock_glVertexAttribs4fvNV(GLuint index, GLsizei n, const GLfloat *v) {
  return RegalGMockInterface::current->glVertexAttribs4fvNV(index, n, v);
}

void REGAL_CALL gmock_glVertexAttribs4svNV(GLuint index, GLsizei n, const GLshort *v) {
  return RegalGMockInterface::current->glVertexAttribs4svNV(index, n, v);
}

void REGAL_CALL gmock_glVertexAttribs4ubvNV(GLuint index, GLsizei n, const GLubyte *v) {
  return RegalGMockInterface::current->glVertexAttribs4ubvNV(index, n, v);
}

void REGAL_CALL gmock_glBeginVideoCaptureNV(GLuint video_capture_slot) {
  return RegalGMockInterface::current->glBeginVideoCaptureNV(video_capture_slot);
}

void REGAL_CALL gmock_glBindVideoCaptureStreamBufferNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptr offset) {
  return RegalGMockInterface::current->glBindVideoCaptureStreamBufferNV(video_capture_slot, stream, frame_region, offset);
}

void REGAL_CALL gmock_glBindVideoCaptureStreamTextureNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture) {
  return RegalGMockInterface::current->glBindVideoCaptureStreamTextureNV(video_capture_slot, stream, frame_region, target, texture);
}

void REGAL_CALL gmock_glEndVideoCaptureNV(GLuint video_capture_slot) {
  return RegalGMockInterface::current->glEndVideoCaptureNV(video_capture_slot);
}

void REGAL_CALL gmock_glGetVideoCaptureStreamdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params) {
  return RegalGMockInterface::current->glGetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, params);
}

void REGAL_CALL gmock_glGetVideoCaptureStreamfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, params);
}

void REGAL_CALL gmock_glGetVideoCaptureStreamivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetVideoCaptureStreamivNV(video_capture_slot, stream, pname, params);
}

void REGAL_CALL gmock_glGetVideoCaptureivNV(GLuint video_capture_slot, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetVideoCaptureivNV(video_capture_slot, pname, params);
}

GLenum REGAL_CALL gmock_glVideoCaptureNV(GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time) {
  return RegalGMockInterface::current->glVideoCaptureNV(video_capture_slot, sequence_num, capture_time);
}

void REGAL_CALL gmock_glVideoCaptureStreamParameterdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params) {
  return RegalGMockInterface::current->glVideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, params);
}

void REGAL_CALL gmock_glVideoCaptureStreamParameterfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glVideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, params);
}

void REGAL_CALL gmock_glVideoCaptureStreamParameterivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glVideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, params);
}

void REGAL_CALL gmock_glBlendEquationSeparateOES(GLenum modeRGB, GLenum modeAlpha) {
  return RegalGMockInterface::current->glBlendEquationSeparateOES(modeRGB, modeAlpha);
}

void REGAL_CALL gmock_glBlendFuncSeparateOES(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) {
  return RegalGMockInterface::current->glBlendFuncSeparateOES(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

void REGAL_CALL gmock_glBlendEquationOES(GLenum mode) {
  return RegalGMockInterface::current->glBlendEquationOES(mode);
}

void REGAL_CALL gmock_glBindFramebufferOES(GLenum target, GLuint framebuffer) {
  return RegalGMockInterface::current->glBindFramebufferOES(target, framebuffer);
}

void REGAL_CALL gmock_glBindRenderbufferOES(GLenum target, GLuint renderbuffer) {
  return RegalGMockInterface::current->glBindRenderbufferOES(target, renderbuffer);
}

GLenum REGAL_CALL gmock_glCheckFramebufferStatusOES(GLenum target) {
  return RegalGMockInterface::current->glCheckFramebufferStatusOES(target);
}

void REGAL_CALL gmock_glDeleteFramebuffersOES(GLsizei n, const GLuint *framebuffers) {
  return RegalGMockInterface::current->glDeleteFramebuffersOES(n, framebuffers);
}

void REGAL_CALL gmock_glDeleteRenderbuffersOES(GLsizei n, const GLuint *renderbuffers) {
  return RegalGMockInterface::current->glDeleteRenderbuffersOES(n, renderbuffers);
}

void REGAL_CALL gmock_glFramebufferRenderbufferOES(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
  return RegalGMockInterface::current->glFramebufferRenderbufferOES(target, attachment, renderbuffertarget, renderbuffer);
}

void REGAL_CALL gmock_glFramebufferTexture2DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  return RegalGMockInterface::current->glFramebufferTexture2DOES(target, attachment, textarget, texture, level);
}

void REGAL_CALL gmock_glGenFramebuffersOES(GLsizei n, GLuint *framebuffers) {
  return RegalGMockInterface::current->glGenFramebuffersOES(n, framebuffers);
}

void REGAL_CALL gmock_glGenRenderbuffersOES(GLsizei n, GLuint *renderbuffers) {
  return RegalGMockInterface::current->glGenRenderbuffersOES(n, renderbuffers);
}

void REGAL_CALL gmock_glGenerateMipmapOES(GLenum target) {
  return RegalGMockInterface::current->glGenerateMipmapOES(target);
}

void REGAL_CALL gmock_glGetFramebufferAttachmentParameterivOES(GLenum target, GLenum attachment, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetFramebufferAttachmentParameterivOES(target, attachment, pname, params);
}

void REGAL_CALL gmock_glGetRenderbufferParameterivOES(GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetRenderbufferParameterivOES(target, pname, params);
}

GLboolean REGAL_CALL gmock_glIsFramebufferOES(GLuint framebuffer) {
  return RegalGMockInterface::current->glIsFramebufferOES(framebuffer);
}

GLboolean REGAL_CALL gmock_glIsRenderbufferOES(GLuint renderbuffer) {
  return RegalGMockInterface::current->glIsRenderbufferOES(renderbuffer);
}

void REGAL_CALL gmock_glRenderbufferStorageOES(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glRenderbufferStorageOES(target, internalformat, width, height);
}

void REGAL_CALL gmock_glGetProgramBinaryOES(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary) {
  return RegalGMockInterface::current->glGetProgramBinaryOES(program, bufSize, length, binaryFormat, binary);
}

void REGAL_CALL gmock_glProgramBinaryOES(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLint length) {
  return RegalGMockInterface::current->glProgramBinaryOES(program, binaryFormat, binary, length);
}

void REGAL_CALL gmock_glGetBufferPointervOES(GLenum target, GLenum pname, GLvoid **params) {
  return RegalGMockInterface::current->glGetBufferPointervOES(target, pname, params);
}

GLvoid * REGAL_CALL gmock_glMapBufferOES(GLenum target, GLenum access) {
  return RegalGMockInterface::current->glMapBufferOES(target, access);
}

GLboolean REGAL_CALL gmock_glUnmapBufferOES(GLenum target) {
  return RegalGMockInterface::current->glUnmapBufferOES(target);
}

void REGAL_CALL gmock_glCurrentPaletteMatrixOES(GLuint index) {
  return RegalGMockInterface::current->glCurrentPaletteMatrixOES(index);
}

void REGAL_CALL gmock_glMatrixIndexPointerOES(GLint size, GLenum type, GLsizei stride, GLvoid *pointer) {
  return RegalGMockInterface::current->glMatrixIndexPointerOES(size, type, stride, pointer);
}

void REGAL_CALL gmock_glWeightPointerOES(GLint size, GLenum type, GLsizei stride, GLvoid *pointer) {
  return RegalGMockInterface::current->glWeightPointerOES(size, type, stride, pointer);
}

void REGAL_CALL gmock_glClearDepthfOES(GLclampd depth) {
  return RegalGMockInterface::current->glClearDepthfOES(depth);
}

void REGAL_CALL gmock_glClipPlanefOES(GLenum plane, const GLfloat *equation) {
  return RegalGMockInterface::current->glClipPlanefOES(plane, equation);
}

void REGAL_CALL gmock_glDepthRangefOES(GLclampf n, GLclampf f) {
  return RegalGMockInterface::current->glDepthRangefOES(n, f);
}

void REGAL_CALL gmock_glFrustumfOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) {
  return RegalGMockInterface::current->glFrustumfOES(l, r, b, t, n, f);
}

void REGAL_CALL gmock_glGetClipPlanefOES(GLenum plane, GLfloat *equation) {
  return RegalGMockInterface::current->glGetClipPlanefOES(plane, equation);
}

void REGAL_CALL gmock_glOrthofOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) {
  return RegalGMockInterface::current->glOrthofOES(l, r, b, t, n, f);
}

void REGAL_CALL gmock_glCompressedTexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data) {
  return RegalGMockInterface::current->glCompressedTexImage3DOES(target, level, internalformat, width, height, depth, border, imageSize, data);
}

void REGAL_CALL gmock_glCompressedTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data) {
  // glCompressedTexSubImage3DOES has too many arguments for GMock.
}

void REGAL_CALL gmock_glCopyTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glCopyTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

void REGAL_CALL gmock_glFramebufferTexture3DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
  return RegalGMockInterface::current->glFramebufferTexture3DOES(target, attachment, textarget, texture, level, zoffset);
}

void REGAL_CALL gmock_glTexImage3DOES(GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels) {
  return RegalGMockInterface::current->glTexImage3DOES(target, level, internalFormat, width, height, depth, border, format, type, pixels);
}

void REGAL_CALL gmock_glTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels) {
  // glTexSubImage3DOES has too many arguments for GMock.
}

void REGAL_CALL gmock_glGetTexGenfvOES(GLenum coord, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetTexGenfvOES(coord, pname, params);
}

void REGAL_CALL gmock_glGetTexGenivOES(GLenum coord, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetTexGenivOES(coord, pname, params);
}

void REGAL_CALL gmock_glGetTexGenxvOES(GLenum coord, GLenum pname, GLfixed *params) {
  return RegalGMockInterface::current->glGetTexGenxvOES(coord, pname, params);
}

void REGAL_CALL gmock_glTexGenfOES(GLenum coord, GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glTexGenfOES(coord, pname, param);
}

void REGAL_CALL gmock_glTexGenfvOES(GLenum coord, GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glTexGenfvOES(coord, pname, params);
}

void REGAL_CALL gmock_glTexGeniOES(GLenum coord, GLenum pname, GLint param) {
  return RegalGMockInterface::current->glTexGeniOES(coord, pname, param);
}

void REGAL_CALL gmock_glTexGenivOES(GLenum coord, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glTexGenivOES(coord, pname, params);
}

void REGAL_CALL gmock_glTexGenxOES(GLenum coord, GLenum pname, GLfixed param) {
  return RegalGMockInterface::current->glTexGenxOES(coord, pname, param);
}

void REGAL_CALL gmock_glTexGenxvOES(GLenum coord, GLenum pname, const GLfixed *params) {
  return RegalGMockInterface::current->glTexGenxvOES(coord, pname, params);
}

void REGAL_CALL gmock_glBindVertexArrayOES(GLuint array) {
  return RegalGMockInterface::current->glBindVertexArrayOES(array);
}

void REGAL_CALL gmock_glDeleteVertexArraysOES(GLsizei n, const GLuint *arrays) {
  return RegalGMockInterface::current->glDeleteVertexArraysOES(n, arrays);
}

void REGAL_CALL gmock_glGenVertexArraysOES(GLsizei n, GLuint *arrays) {
  return RegalGMockInterface::current->glGenVertexArraysOES(n, arrays);
}

GLboolean REGAL_CALL gmock_glIsVertexArrayOES(GLuint array) {
  return RegalGMockInterface::current->glIsVertexArrayOES(array);
}

void REGAL_CALL gmock_glHintPGI(GLenum target, GLint mode) {
  return RegalGMockInterface::current->glHintPGI(target, mode);
}

void REGAL_CALL gmock_glAlphaFuncQCOM(GLenum func, GLclampf ref) {
  return RegalGMockInterface::current->glAlphaFuncQCOM(func, ref);
}

void REGAL_CALL gmock_glDisableDriverControlQCOM(GLuint driverControl) {
  return RegalGMockInterface::current->glDisableDriverControlQCOM(driverControl);
}

void REGAL_CALL gmock_glEnableDriverControlQCOM(GLuint driverControl) {
  return RegalGMockInterface::current->glEnableDriverControlQCOM(driverControl);
}

void REGAL_CALL gmock_glGetDriverControlStringQCOM(GLuint driverControl, GLsizei bufSize, GLsizei *length, GLchar *driverControlString) {
  return RegalGMockInterface::current->glGetDriverControlStringQCOM(driverControl, bufSize, length, driverControlString);
}

void REGAL_CALL gmock_glGetDriverControlsQCOM(GLint *num, GLsizei size, GLuint *driverControls) {
  return RegalGMockInterface::current->glGetDriverControlsQCOM(num, size, driverControls);
}

void REGAL_CALL gmock_glExtGetBufferPointervQCOM(GLenum target, GLvoid **params) {
  return RegalGMockInterface::current->glExtGetBufferPointervQCOM(target, params);
}

void REGAL_CALL gmock_glExtGetBuffersQCOM(GLuint *buffers, GLint maxBuffers, GLint *numBuffers) {
  return RegalGMockInterface::current->glExtGetBuffersQCOM(buffers, maxBuffers, numBuffers);
}

void REGAL_CALL gmock_glExtGetFramebuffersQCOM(GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers) {
  return RegalGMockInterface::current->glExtGetFramebuffersQCOM(framebuffers, maxFramebuffers, numFramebuffers);
}

void REGAL_CALL gmock_glExtGetRenderbuffersQCOM(GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers) {
  return RegalGMockInterface::current->glExtGetRenderbuffersQCOM(renderbuffers, maxRenderbuffers, numRenderbuffers);
}

void REGAL_CALL gmock_glExtGetTexLevelParameterivQCOM(GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glExtGetTexLevelParameterivQCOM(texture, face, level, pname, params);
}

void REGAL_CALL gmock_glExtGetTexSubImageQCOM(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLvoid *texels) {
  // glExtGetTexSubImageQCOM has too many arguments for GMock.
}

void REGAL_CALL gmock_glExtGetTexturesQCOM(GLuint *textures, GLint maxTextures, GLint *numTextures) {
  return RegalGMockInterface::current->glExtGetTexturesQCOM(textures, maxTextures, numTextures);
}

void REGAL_CALL gmock_glExtTexObjectStateOverrideiQCOM(GLenum target, GLenum pname, GLint param) {
  return RegalGMockInterface::current->glExtTexObjectStateOverrideiQCOM(target, pname, param);
}

void REGAL_CALL gmock_glExtGetProgramBinarySourceQCOM(GLuint program, GLenum shadertype, GLchar *source, GLint *length) {
  return RegalGMockInterface::current->glExtGetProgramBinarySourceQCOM(program, shadertype, source, length);
}

void REGAL_CALL gmock_glExtGetProgramsQCOM(GLuint *programs, GLint maxPrograms, GLint *numPrograms) {
  return RegalGMockInterface::current->glExtGetProgramsQCOM(programs, maxPrograms, numPrograms);
}

void REGAL_CALL gmock_glExtGetShadersQCOM(GLuint *shaders, GLint maxShaders, GLint *numShaders) {
  return RegalGMockInterface::current->glExtGetShadersQCOM(shaders, maxShaders, numShaders);
}

GLboolean REGAL_CALL gmock_glExtIsProgramBinaryQCOM(GLuint program) {
  return RegalGMockInterface::current->glExtIsProgramBinaryQCOM(program);
}

void REGAL_CALL gmock_glEndTilingQCOM(GLbitfield preserveMask) {
  return RegalGMockInterface::current->glEndTilingQCOM(preserveMask);
}

void REGAL_CALL gmock_glStartTilingQCOM(GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask) {
  return RegalGMockInterface::current->glStartTilingQCOM(x, y, width, height, preserveMask);
}

void REGAL_CALL gmock_glPointSizePointerOES(GLenum type, GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glPointSizePointerOES(type, stride, pointer);
}

void REGAL_CALL gmock_glLogMessageCallbackREGAL(GLLOGPROCREGAL callback) {
  return RegalGMockInterface::current->glLogMessageCallbackREGAL(callback);
}

void REGAL_CALL gmock_glDetailTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points) {
  return RegalGMockInterface::current->glDetailTexFuncSGIS(target, n, points);
}

void REGAL_CALL gmock_glGetDetailTexFuncSGIS(GLenum target, GLfloat *points) {
  return RegalGMockInterface::current->glGetDetailTexFuncSGIS(target, points);
}

void REGAL_CALL gmock_glFogFuncSGIS(GLsizei n, const GLfloat *points) {
  return RegalGMockInterface::current->glFogFuncSGIS(n, points);
}

void REGAL_CALL gmock_glGetFogFuncSGIS(GLfloat *points) {
  return RegalGMockInterface::current->glGetFogFuncSGIS(points);
}

void REGAL_CALL gmock_glSampleMaskSGIS(GLclampf value, GLboolean invert) {
  return RegalGMockInterface::current->glSampleMaskSGIS(value, invert);
}

void REGAL_CALL gmock_glSamplePatternSGIS(GLenum pattern) {
  return RegalGMockInterface::current->glSamplePatternSGIS(pattern);
}

void REGAL_CALL gmock_glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetPixelTexGenParameterfvSGIS(pname, params);
}

void REGAL_CALL gmock_glGetPixelTexGenParameterivSGIS(GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetPixelTexGenParameterivSGIS(pname, params);
}

void REGAL_CALL gmock_glPixelTexGenParameterfSGIS(GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glPixelTexGenParameterfSGIS(pname, param);
}

void REGAL_CALL gmock_glPixelTexGenParameterfvSGIS(GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glPixelTexGenParameterfvSGIS(pname, params);
}

void REGAL_CALL gmock_glPixelTexGenParameteriSGIS(GLenum pname, GLint param) {
  return RegalGMockInterface::current->glPixelTexGenParameteriSGIS(pname, param);
}

void REGAL_CALL gmock_glPixelTexGenParameterivSGIS(GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glPixelTexGenParameterivSGIS(pname, params);
}

void REGAL_CALL gmock_glPointParameterfSGIS(GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glPointParameterfSGIS(pname, param);
}

void REGAL_CALL gmock_glPointParameterfvSGIS(GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glPointParameterfvSGIS(pname, params);
}

void REGAL_CALL gmock_glGetSharpenTexFuncSGIS(GLenum target, GLfloat *points) {
  return RegalGMockInterface::current->glGetSharpenTexFuncSGIS(target, points);
}

void REGAL_CALL gmock_glSharpenTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points) {
  return RegalGMockInterface::current->glSharpenTexFuncSGIS(target, n, points);
}

void REGAL_CALL gmock_glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels) {
  // glTexImage4DSGIS has too many arguments for GMock.
}

void REGAL_CALL gmock_glTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid *pixels) {
  // glTexSubImage4DSGIS has too many arguments for GMock.
}

void REGAL_CALL gmock_glTextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) {
  return RegalGMockInterface::current->glTextureColorMaskSGIS(red, green, blue, alpha);
}

void REGAL_CALL gmock_glGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat *weights) {
  return RegalGMockInterface::current->glGetTexFilterFuncSGIS(target, filter, weights);
}

void REGAL_CALL gmock_glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, const GLfloat *weights) {
  return RegalGMockInterface::current->glTexFilterFuncSGIS(target, filter, n, weights);
}

void REGAL_CALL gmock_glAsyncMarkerSGIX(GLuint marker) {
  return RegalGMockInterface::current->glAsyncMarkerSGIX(marker);
}

void REGAL_CALL gmock_glDeleteAsyncMarkersSGIX(GLuint marker, GLsizei range) {
  return RegalGMockInterface::current->glDeleteAsyncMarkersSGIX(marker, range);
}

GLint REGAL_CALL gmock_glFinishAsyncSGIX(GLuint *markerp) {
  return RegalGMockInterface::current->glFinishAsyncSGIX(markerp);
}

GLuint REGAL_CALL gmock_glGenAsyncMarkersSGIX(GLsizei range) {
  return RegalGMockInterface::current->glGenAsyncMarkersSGIX(range);
}

GLboolean REGAL_CALL gmock_glIsAsyncMarkerSGIX(GLuint marker) {
  return RegalGMockInterface::current->glIsAsyncMarkerSGIX(marker);
}

GLint REGAL_CALL gmock_glPollAsyncSGIX(GLuint *markerp) {
  return RegalGMockInterface::current->glPollAsyncSGIX(markerp);
}

void REGAL_CALL gmock_glFlushRasterSGIX(void) {
  return RegalGMockInterface::current->glFlushRasterSGIX();
}

void REGAL_CALL gmock_glTextureFogSGIX(GLenum pname) {
  return RegalGMockInterface::current->glTextureFogSGIX(pname);
}

void REGAL_CALL gmock_glFragmentColorMaterialSGIX(GLenum face, GLenum mode) {
  return RegalGMockInterface::current->glFragmentColorMaterialSGIX(face, mode);
}

void REGAL_CALL gmock_glFragmentLightModelfSGIX(GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glFragmentLightModelfSGIX(pname, param);
}

void REGAL_CALL gmock_glFragmentLightModelfvSGIX(GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glFragmentLightModelfvSGIX(pname, params);
}

void REGAL_CALL gmock_glFragmentLightModeliSGIX(GLenum pname, GLint param) {
  return RegalGMockInterface::current->glFragmentLightModeliSGIX(pname, param);
}

void REGAL_CALL gmock_glFragmentLightModelivSGIX(GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glFragmentLightModelivSGIX(pname, params);
}

void REGAL_CALL gmock_glFragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glFragmentLightfSGIX(light, pname, param);
}

void REGAL_CALL gmock_glFragmentLightfvSGIX(GLenum light, GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glFragmentLightfvSGIX(light, pname, params);
}

void REGAL_CALL gmock_glFragmentLightiSGIX(GLenum light, GLenum pname, GLint param) {
  return RegalGMockInterface::current->glFragmentLightiSGIX(light, pname, param);
}

void REGAL_CALL gmock_glFragmentLightivSGIX(GLenum light, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glFragmentLightivSGIX(light, pname, params);
}

void REGAL_CALL gmock_glFragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glFragmentMaterialfSGIX(face, pname, param);
}

void REGAL_CALL gmock_glFragmentMaterialfvSGIX(GLenum face, GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glFragmentMaterialfvSGIX(face, pname, params);
}

void REGAL_CALL gmock_glFragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param) {
  return RegalGMockInterface::current->glFragmentMaterialiSGIX(face, pname, param);
}

void REGAL_CALL gmock_glFragmentMaterialivSGIX(GLenum face, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glFragmentMaterialivSGIX(face, pname, params);
}

void REGAL_CALL gmock_glGetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetFragmentLightfvSGIX(light, pname, params);
}

void REGAL_CALL gmock_glGetFragmentLightivSGIX(GLenum light, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetFragmentLightivSGIX(light, pname, params);
}

void REGAL_CALL gmock_glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetFragmentMaterialfvSGIX(face, pname, params);
}

void REGAL_CALL gmock_glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetFragmentMaterialivSGIX(face, pname, params);
}

void REGAL_CALL gmock_glLightEnviSGIX(GLenum pname, GLint param) {
  return RegalGMockInterface::current->glLightEnviSGIX(pname, param);
}

void REGAL_CALL gmock_glFrameZoomSGIX(GLint factor) {
  return RegalGMockInterface::current->glFrameZoomSGIX(factor);
}

void REGAL_CALL gmock_glIglooInterfaceSGIX(GLenum pname, const GLvoid *params) {
  return RegalGMockInterface::current->glIglooInterfaceSGIX(pname, params);
}

GLint REGAL_CALL gmock_glGetInstrumentsSGIX(void) {
  return RegalGMockInterface::current->glGetInstrumentsSGIX();
}

void REGAL_CALL gmock_glInstrumentsBufferSGIX(GLsizei size, GLint *buffer) {
  return RegalGMockInterface::current->glInstrumentsBufferSGIX(size, buffer);
}

GLint REGAL_CALL gmock_glPollInstrumentsSGIX(GLint *marker_p) {
  return RegalGMockInterface::current->glPollInstrumentsSGIX(marker_p);
}

void REGAL_CALL gmock_glReadInstrumentsSGIX(GLint marker) {
  return RegalGMockInterface::current->glReadInstrumentsSGIX(marker);
}

void REGAL_CALL gmock_glStartInstrumentsSGIX(void) {
  return RegalGMockInterface::current->glStartInstrumentsSGIX();
}

void REGAL_CALL gmock_glStopInstrumentsSGIX(GLint marker) {
  return RegalGMockInterface::current->glStopInstrumentsSGIX(marker);
}

void REGAL_CALL gmock_glGetListParameterfvSGIX(GLuint list, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetListParameterfvSGIX(list, pname, params);
}

void REGAL_CALL gmock_glGetListParameterivSGIX(GLuint list, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetListParameterivSGIX(list, pname, params);
}

void REGAL_CALL gmock_glListParameterfSGIX(GLuint list, GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glListParameterfSGIX(list, pname, param);
}

void REGAL_CALL gmock_glListParameterfvSGIX(GLuint list, GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glListParameterfvSGIX(list, pname, params);
}

void REGAL_CALL gmock_glListParameteriSGIX(GLuint list, GLenum pname, GLint param) {
  return RegalGMockInterface::current->glListParameteriSGIX(list, pname, param);
}

void REGAL_CALL gmock_glListParameterivSGIX(GLuint list, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glListParameterivSGIX(list, pname, params);
}

void REGAL_CALL gmock_glPixelTexGenSGIX(GLenum mode) {
  return RegalGMockInterface::current->glPixelTexGenSGIX(mode);
}

void REGAL_CALL gmock_glDeformSGIX(GLbitfield mask) {
  return RegalGMockInterface::current->glDeformSGIX(mask);
}

void REGAL_CALL gmock_glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points) {
  // glDeformationMap3dSGIX has too many arguments for GMock.
}

void REGAL_CALL gmock_glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points) {
  // glDeformationMap3fSGIX has too many arguments for GMock.
}

void REGAL_CALL gmock_glLoadIdentityDeformationMapSGIX(GLbitfield mask) {
  return RegalGMockInterface::current->glLoadIdentityDeformationMapSGIX(mask);
}

void REGAL_CALL gmock_glReferencePlaneSGIX(const GLdouble *equation) {
  return RegalGMockInterface::current->glReferencePlaneSGIX(equation);
}

void REGAL_CALL gmock_glSpriteParameterfSGIX(GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glSpriteParameterfSGIX(pname, param);
}

void REGAL_CALL gmock_glSpriteParameterfvSGIX(GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glSpriteParameterfvSGIX(pname, params);
}

void REGAL_CALL gmock_glSpriteParameteriSGIX(GLenum pname, GLint param) {
  return RegalGMockInterface::current->glSpriteParameteriSGIX(pname, param);
}

void REGAL_CALL gmock_glSpriteParameterivSGIX(GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glSpriteParameterivSGIX(pname, params);
}

void REGAL_CALL gmock_glTagSampleBufferSGIX(void) {
  return RegalGMockInterface::current->glTagSampleBufferSGIX();
}

void REGAL_CALL gmock_glColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glColorTableParameterfvSGI(target, pname, params);
}

void REGAL_CALL gmock_glColorTableParameterivSGI(GLenum target, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glColorTableParameterivSGI(target, pname, params);
}

void REGAL_CALL gmock_glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table) {
  return RegalGMockInterface::current->glColorTableSGI(target, internalformat, width, format, type, table);
}

void REGAL_CALL gmock_glCopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) {
  return RegalGMockInterface::current->glCopyColorTableSGI(target, internalformat, x, y, width);
}

void REGAL_CALL gmock_glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetColorTableParameterfvSGI(target, pname, params);
}

void REGAL_CALL gmock_glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetColorTableParameterivSGI(target, pname, params);
}

void REGAL_CALL gmock_glGetColorTableSGI(GLenum target, GLenum format, GLenum type, GLvoid *table) {
  return RegalGMockInterface::current->glGetColorTableSGI(target, format, type, table);
}

void REGAL_CALL gmock_glFinishTextureSUNX(void) {
  return RegalGMockInterface::current->glFinishTextureSUNX();
}

void REGAL_CALL gmock_glGlobalAlphaFactorbSUN(GLbyte factor) {
  return RegalGMockInterface::current->glGlobalAlphaFactorbSUN(factor);
}

void REGAL_CALL gmock_glGlobalAlphaFactordSUN(GLdouble factor) {
  return RegalGMockInterface::current->glGlobalAlphaFactordSUN(factor);
}

void REGAL_CALL gmock_glGlobalAlphaFactorfSUN(GLfloat factor) {
  return RegalGMockInterface::current->glGlobalAlphaFactorfSUN(factor);
}

void REGAL_CALL gmock_glGlobalAlphaFactoriSUN(GLint factor) {
  return RegalGMockInterface::current->glGlobalAlphaFactoriSUN(factor);
}

void REGAL_CALL gmock_glGlobalAlphaFactorsSUN(GLshort factor) {
  return RegalGMockInterface::current->glGlobalAlphaFactorsSUN(factor);
}

void REGAL_CALL gmock_glGlobalAlphaFactorubSUN(GLubyte factor) {
  return RegalGMockInterface::current->glGlobalAlphaFactorubSUN(factor);
}

void REGAL_CALL gmock_glGlobalAlphaFactoruiSUN(GLuint factor) {
  return RegalGMockInterface::current->glGlobalAlphaFactoruiSUN(factor);
}

void REGAL_CALL gmock_glGlobalAlphaFactorusSUN(GLushort factor) {
  return RegalGMockInterface::current->glGlobalAlphaFactorusSUN(factor);
}

void REGAL_CALL gmock_glDrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width) {
  return RegalGMockInterface::current->glDrawMeshArraysSUN(mode, first, count, width);
}

void REGAL_CALL gmock_glReadVideoPixelsSUN(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels) {
  return RegalGMockInterface::current->glReadVideoPixelsSUN(x, y, width, height, format, type, pixels);
}

void REGAL_CALL gmock_glReplacementCodePointerSUN(GLenum type, GLsizei stride, const GLvoid **pointer) {
  return RegalGMockInterface::current->glReplacementCodePointerSUN(type, stride, pointer);
}

void REGAL_CALL gmock_glReplacementCodeubSUN(GLubyte code) {
  return RegalGMockInterface::current->glReplacementCodeubSUN(code);
}

void REGAL_CALL gmock_glReplacementCodeubvSUN(const GLubyte *code) {
  return RegalGMockInterface::current->glReplacementCodeubvSUN(code);
}

void REGAL_CALL gmock_glReplacementCodeuiSUN(GLuint code) {
  return RegalGMockInterface::current->glReplacementCodeuiSUN(code);
}

void REGAL_CALL gmock_glReplacementCodeuivSUN(const GLuint *code) {
  return RegalGMockInterface::current->glReplacementCodeuivSUN(code);
}

void REGAL_CALL gmock_glReplacementCodeusSUN(GLushort code) {
  return RegalGMockInterface::current->glReplacementCodeusSUN(code);
}

void REGAL_CALL gmock_glReplacementCodeusvSUN(const GLushort *code) {
  return RegalGMockInterface::current->glReplacementCodeusvSUN(code);
}

void REGAL_CALL gmock_glColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glColor3fVertex3fSUN(r, g, b, x, y, z);
}

void REGAL_CALL gmock_glColor3fVertex3fvSUN(const GLfloat *c, const GLfloat *v) {
  return RegalGMockInterface::current->glColor3fVertex3fvSUN(c, v);
}

void REGAL_CALL gmock_glColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z);
}

void REGAL_CALL gmock_glColor4fNormal3fVertex3fvSUN(const GLfloat *c, const GLfloat *n, const GLfloat *v) {
  return RegalGMockInterface::current->glColor4fNormal3fVertex3fvSUN(c, n, v);
}

void REGAL_CALL gmock_glColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y) {
  return RegalGMockInterface::current->glColor4ubVertex2fSUN(r, g, b, a, x, y);
}

void REGAL_CALL gmock_glColor4ubVertex2fvSUN(const GLubyte *c, const GLfloat *v) {
  return RegalGMockInterface::current->glColor4ubVertex2fvSUN(c, v);
}

void REGAL_CALL gmock_glColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glColor4ubVertex3fSUN(r, g, b, a, x, y, z);
}

void REGAL_CALL gmock_glColor4ubVertex3fvSUN(const GLubyte *c, const GLfloat *v) {
  return RegalGMockInterface::current->glColor4ubVertex3fvSUN(c, v);
}

void REGAL_CALL gmock_glNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glNormal3fVertex3fSUN(nx, ny, nz, x, y, z);
}

void REGAL_CALL gmock_glNormal3fVertex3fvSUN(const GLfloat *n, const GLfloat *v) {
  return RegalGMockInterface::current->glNormal3fVertex3fvSUN(n, v);
}

void REGAL_CALL gmock_glReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z);
}

void REGAL_CALL gmock_glReplacementCodeuiColor3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *v) {
  return RegalGMockInterface::current->glReplacementCodeuiColor3fVertex3fvSUN(rc, c, v);
}

void REGAL_CALL gmock_glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
  // glReplacementCodeuiColor4fNormal3fVertex3fSUN has too many arguments for GMock.
}

void REGAL_CALL gmock_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v) {
  return RegalGMockInterface::current->glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v);
}

void REGAL_CALL gmock_glReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z);
}

void REGAL_CALL gmock_glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint *rc, const GLubyte *c, const GLfloat *v) {
  return RegalGMockInterface::current->glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v);
}

void REGAL_CALL gmock_glReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z);
}

void REGAL_CALL gmock_glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *n, const GLfloat *v) {
  return RegalGMockInterface::current->glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v);
}

void REGAL_CALL gmock_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
  // glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN has too many arguments for GMock.
}

void REGAL_CALL gmock_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v) {
  return RegalGMockInterface::current->glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v);
}

void REGAL_CALL gmock_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z);
}

void REGAL_CALL gmock_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v) {
  return RegalGMockInterface::current->glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v);
}

void REGAL_CALL gmock_glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z);
}

void REGAL_CALL gmock_glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *v) {
  return RegalGMockInterface::current->glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v);
}

void REGAL_CALL gmock_glReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glReplacementCodeuiVertex3fSUN(rc, x, y, z);
}

void REGAL_CALL gmock_glReplacementCodeuiVertex3fvSUN(const GLuint *rc, const GLfloat *v) {
  return RegalGMockInterface::current->glReplacementCodeuiVertex3fvSUN(rc, v);
}

void REGAL_CALL gmock_glTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glTexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z);
}

void REGAL_CALL gmock_glTexCoord2fColor3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *v) {
  return RegalGMockInterface::current->glTexCoord2fColor3fVertex3fvSUN(tc, c, v);
}

void REGAL_CALL gmock_glTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
  // glTexCoord2fColor4fNormal3fVertex3fSUN has too many arguments for GMock.
}

void REGAL_CALL gmock_glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v) {
  return RegalGMockInterface::current->glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v);
}

void REGAL_CALL gmock_glTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z);
}

void REGAL_CALL gmock_glTexCoord2fColor4ubVertex3fvSUN(const GLfloat *tc, const GLubyte *c, const GLfloat *v) {
  return RegalGMockInterface::current->glTexCoord2fColor4ubVertex3fvSUN(tc, c, v);
}

void REGAL_CALL gmock_glTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z);
}

void REGAL_CALL gmock_glTexCoord2fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *n, const GLfloat *v) {
  return RegalGMockInterface::current->glTexCoord2fNormal3fVertex3fvSUN(tc, n, v);
}

void REGAL_CALL gmock_glTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glTexCoord2fVertex3fSUN(s, t, x, y, z);
}

void REGAL_CALL gmock_glTexCoord2fVertex3fvSUN(const GLfloat *tc, const GLfloat *v) {
  return RegalGMockInterface::current->glTexCoord2fVertex3fvSUN(tc, v);
}

void REGAL_CALL gmock_glTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  // glTexCoord4fColor4fNormal3fVertex4fSUN has too many arguments for GMock.
}

void REGAL_CALL gmock_glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v) {
  return RegalGMockInterface::current->glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v);
}

void REGAL_CALL gmock_glTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  return RegalGMockInterface::current->glTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w);
}

void REGAL_CALL gmock_glTexCoord4fVertex4fvSUN(const GLfloat *tc, const GLfloat *v) {
  return RegalGMockInterface::current->glTexCoord4fVertex4fvSUN(tc, v);
}

void REGAL_CALL gmock_glAddSwapHintRectWIN(GLint x, GLint y, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glAddSwapHintRectWIN(x, y, width, height);
}

} // namespace

RegalGMockInterface::RegalGMockInterface() {
  current = this;
}

RegalGMockInterface::~RegalGMockInterface() {
  current = NULL;
}

RegalGMockInterface* RegalGMockInterface::current;

void InitDispatchTableGMock(DispatchTable &tbl)
{
    tbl.glAccum = gmock_glAccum;
  tbl.glAlphaFunc = gmock_glAlphaFunc;
  tbl.glBegin = gmock_glBegin;
  tbl.glBitmap = gmock_glBitmap;
  tbl.glBlendFunc = gmock_glBlendFunc;
  tbl.glCallList = gmock_glCallList;
  tbl.glCallLists = gmock_glCallLists;
  tbl.glClear = gmock_glClear;
  tbl.glClearAccum = gmock_glClearAccum;
  tbl.glClearColor = gmock_glClearColor;
  tbl.glClearDepth = gmock_glClearDepth;
  tbl.glClearIndex = gmock_glClearIndex;
  tbl.glClearStencil = gmock_glClearStencil;
  tbl.glClipPlane = gmock_glClipPlane;
  tbl.glColor3b = gmock_glColor3b;
  tbl.glColor3bv = gmock_glColor3bv;
  tbl.glColor3d = gmock_glColor3d;
  tbl.glColor3dv = gmock_glColor3dv;
  tbl.glColor3f = gmock_glColor3f;
  tbl.glColor3fv = gmock_glColor3fv;
  tbl.glColor3i = gmock_glColor3i;
  tbl.glColor3iv = gmock_glColor3iv;
  tbl.glColor3s = gmock_glColor3s;
  tbl.glColor3sv = gmock_glColor3sv;
  tbl.glColor3ub = gmock_glColor3ub;
  tbl.glColor3ubv = gmock_glColor3ubv;
  tbl.glColor3ui = gmock_glColor3ui;
  tbl.glColor3uiv = gmock_glColor3uiv;
  tbl.glColor3us = gmock_glColor3us;
  tbl.glColor3usv = gmock_glColor3usv;
  tbl.glColor4b = gmock_glColor4b;
  tbl.glColor4bv = gmock_glColor4bv;
  tbl.glColor4d = gmock_glColor4d;
  tbl.glColor4dv = gmock_glColor4dv;
  tbl.glColor4f = gmock_glColor4f;
  tbl.glColor4fv = gmock_glColor4fv;
  tbl.glColor4i = gmock_glColor4i;
  tbl.glColor4iv = gmock_glColor4iv;
  tbl.glColor4s = gmock_glColor4s;
  tbl.glColor4sv = gmock_glColor4sv;
  tbl.glColor4ub = gmock_glColor4ub;
  tbl.glColor4ubv = gmock_glColor4ubv;
  tbl.glColor4ui = gmock_glColor4ui;
  tbl.glColor4uiv = gmock_glColor4uiv;
  tbl.glColor4us = gmock_glColor4us;
  tbl.glColor4usv = gmock_glColor4usv;
  tbl.glColorMask = gmock_glColorMask;
  tbl.glColorMaterial = gmock_glColorMaterial;
  tbl.glCopyPixels = gmock_glCopyPixels;
  tbl.glCullFace = gmock_glCullFace;
  tbl.glDeleteLists = gmock_glDeleteLists;
  tbl.glDepthFunc = gmock_glDepthFunc;
  tbl.glDepthMask = gmock_glDepthMask;
  tbl.glDepthRange = gmock_glDepthRange;
  tbl.glDisable = gmock_glDisable;
  tbl.glDrawBuffer = gmock_glDrawBuffer;
  tbl.glDrawPixels = gmock_glDrawPixels;
  tbl.glEdgeFlag = gmock_glEdgeFlag;
  tbl.glEdgeFlagv = gmock_glEdgeFlagv;
  tbl.glEnable = gmock_glEnable;
  tbl.glEnd = gmock_glEnd;
  tbl.glEndList = gmock_glEndList;
  tbl.glEvalCoord1d = gmock_glEvalCoord1d;
  tbl.glEvalCoord1dv = gmock_glEvalCoord1dv;
  tbl.glEvalCoord1f = gmock_glEvalCoord1f;
  tbl.glEvalCoord1fv = gmock_glEvalCoord1fv;
  tbl.glEvalCoord2d = gmock_glEvalCoord2d;
  tbl.glEvalCoord2dv = gmock_glEvalCoord2dv;
  tbl.glEvalCoord2f = gmock_glEvalCoord2f;
  tbl.glEvalCoord2fv = gmock_glEvalCoord2fv;
  tbl.glEvalMesh1 = gmock_glEvalMesh1;
  tbl.glEvalMesh2 = gmock_glEvalMesh2;
  tbl.glEvalPoint1 = gmock_glEvalPoint1;
  tbl.glEvalPoint2 = gmock_glEvalPoint2;
  tbl.glFeedbackBuffer = gmock_glFeedbackBuffer;
  tbl.glFinish = gmock_glFinish;
  tbl.glFlush = gmock_glFlush;
  tbl.glFogf = gmock_glFogf;
  tbl.glFogfv = gmock_glFogfv;
  tbl.glFogi = gmock_glFogi;
  tbl.glFogiv = gmock_glFogiv;
  tbl.glFrontFace = gmock_glFrontFace;
  tbl.glFrustum = gmock_glFrustum;
  tbl.glGenLists = gmock_glGenLists;
  tbl.glGetBooleanv = gmock_glGetBooleanv;
  tbl.glGetClipPlane = gmock_glGetClipPlane;
  tbl.glGetDoublev = gmock_glGetDoublev;
  tbl.glGetError = gmock_glGetError;
  tbl.glGetFloatv = gmock_glGetFloatv;
  tbl.glGetIntegerv = gmock_glGetIntegerv;
  tbl.glGetLightfv = gmock_glGetLightfv;
  tbl.glGetLightiv = gmock_glGetLightiv;
  tbl.glGetMapdv = gmock_glGetMapdv;
  tbl.glGetMapfv = gmock_glGetMapfv;
  tbl.glGetMapiv = gmock_glGetMapiv;
  tbl.glGetMaterialfv = gmock_glGetMaterialfv;
  tbl.glGetMaterialiv = gmock_glGetMaterialiv;
  tbl.glGetPixelMapfv = gmock_glGetPixelMapfv;
  tbl.glGetPixelMapuiv = gmock_glGetPixelMapuiv;
  tbl.glGetPixelMapusv = gmock_glGetPixelMapusv;
  tbl.glGetPolygonStipple = gmock_glGetPolygonStipple;
  tbl.glGetString = gmock_glGetString;
  tbl.glGetTexEnvfv = gmock_glGetTexEnvfv;
  tbl.glGetTexEnviv = gmock_glGetTexEnviv;
  tbl.glGetTexGendv = gmock_glGetTexGendv;
  tbl.glGetTexGenfv = gmock_glGetTexGenfv;
  tbl.glGetTexGeniv = gmock_glGetTexGeniv;
  tbl.glGetTexImage = gmock_glGetTexImage;
  tbl.glGetTexLevelParameterfv = gmock_glGetTexLevelParameterfv;
  tbl.glGetTexLevelParameteriv = gmock_glGetTexLevelParameteriv;
  tbl.glGetTexParameterfv = gmock_glGetTexParameterfv;
  tbl.glGetTexParameteriv = gmock_glGetTexParameteriv;
  tbl.glHint = gmock_glHint;
  tbl.glIndexMask = gmock_glIndexMask;
  tbl.glIndexd = gmock_glIndexd;
  tbl.glIndexdv = gmock_glIndexdv;
  tbl.glIndexf = gmock_glIndexf;
  tbl.glIndexfv = gmock_glIndexfv;
  tbl.glIndexi = gmock_glIndexi;
  tbl.glIndexiv = gmock_glIndexiv;
  tbl.glIndexs = gmock_glIndexs;
  tbl.glIndexsv = gmock_glIndexsv;
  tbl.glInitNames = gmock_glInitNames;
  tbl.glIsEnabled = gmock_glIsEnabled;
  tbl.glIsList = gmock_glIsList;
  tbl.glLightModelf = gmock_glLightModelf;
  tbl.glLightModelfv = gmock_glLightModelfv;
  tbl.glLightModeli = gmock_glLightModeli;
  tbl.glLightModeliv = gmock_glLightModeliv;
  tbl.glLightf = gmock_glLightf;
  tbl.glLightfv = gmock_glLightfv;
  tbl.glLighti = gmock_glLighti;
  tbl.glLightiv = gmock_glLightiv;
  tbl.glLineStipple = gmock_glLineStipple;
  tbl.glLineWidth = gmock_glLineWidth;
  tbl.glListBase = gmock_glListBase;
  tbl.glLoadIdentity = gmock_glLoadIdentity;
  tbl.glLoadMatrixd = gmock_glLoadMatrixd;
  tbl.glLoadMatrixf = gmock_glLoadMatrixf;
  tbl.glLoadName = gmock_glLoadName;
  tbl.glLogicOp = gmock_glLogicOp;
  tbl.glMap1d = gmock_glMap1d;
  tbl.glMap1f = gmock_glMap1f;
  tbl.glMap2d = gmock_glMap2d;
  tbl.glMap2f = gmock_glMap2f;
  tbl.glMapGrid1d = gmock_glMapGrid1d;
  tbl.glMapGrid1f = gmock_glMapGrid1f;
  tbl.glMapGrid2d = gmock_glMapGrid2d;
  tbl.glMapGrid2f = gmock_glMapGrid2f;
  tbl.glMaterialf = gmock_glMaterialf;
  tbl.glMaterialfv = gmock_glMaterialfv;
  tbl.glMateriali = gmock_glMateriali;
  tbl.glMaterialiv = gmock_glMaterialiv;
  tbl.glMatrixMode = gmock_glMatrixMode;
  tbl.glMultMatrixd = gmock_glMultMatrixd;
  tbl.glMultMatrixf = gmock_glMultMatrixf;
  tbl.glNewList = gmock_glNewList;
  tbl.glNormal3b = gmock_glNormal3b;
  tbl.glNormal3bv = gmock_glNormal3bv;
  tbl.glNormal3d = gmock_glNormal3d;
  tbl.glNormal3dv = gmock_glNormal3dv;
  tbl.glNormal3f = gmock_glNormal3f;
  tbl.glNormal3fv = gmock_glNormal3fv;
  tbl.glNormal3i = gmock_glNormal3i;
  tbl.glNormal3iv = gmock_glNormal3iv;
  tbl.glNormal3s = gmock_glNormal3s;
  tbl.glNormal3sv = gmock_glNormal3sv;
  tbl.glOrtho = gmock_glOrtho;
  tbl.glPassThrough = gmock_glPassThrough;
  tbl.glPixelMapfv = gmock_glPixelMapfv;
  tbl.glPixelMapuiv = gmock_glPixelMapuiv;
  tbl.glPixelMapusv = gmock_glPixelMapusv;
  tbl.glPixelStoref = gmock_glPixelStoref;
  tbl.glPixelStorei = gmock_glPixelStorei;
  tbl.glPixelTransferf = gmock_glPixelTransferf;
  tbl.glPixelTransferi = gmock_glPixelTransferi;
  tbl.glPixelZoom = gmock_glPixelZoom;
  tbl.glPointSize = gmock_glPointSize;
  tbl.glPolygonMode = gmock_glPolygonMode;
  tbl.glPolygonStipple = gmock_glPolygonStipple;
  tbl.glPopAttrib = gmock_glPopAttrib;
  tbl.glPopMatrix = gmock_glPopMatrix;
  tbl.glPopName = gmock_glPopName;
  tbl.glPushAttrib = gmock_glPushAttrib;
  tbl.glPushMatrix = gmock_glPushMatrix;
  tbl.glPushName = gmock_glPushName;
  tbl.glRasterPos2d = gmock_glRasterPos2d;
  tbl.glRasterPos2dv = gmock_glRasterPos2dv;
  tbl.glRasterPos2f = gmock_glRasterPos2f;
  tbl.glRasterPos2fv = gmock_glRasterPos2fv;
  tbl.glRasterPos2i = gmock_glRasterPos2i;
  tbl.glRasterPos2iv = gmock_glRasterPos2iv;
  tbl.glRasterPos2s = gmock_glRasterPos2s;
  tbl.glRasterPos2sv = gmock_glRasterPos2sv;
  tbl.glRasterPos3d = gmock_glRasterPos3d;
  tbl.glRasterPos3dv = gmock_glRasterPos3dv;
  tbl.glRasterPos3f = gmock_glRasterPos3f;
  tbl.glRasterPos3fv = gmock_glRasterPos3fv;
  tbl.glRasterPos3i = gmock_glRasterPos3i;
  tbl.glRasterPos3iv = gmock_glRasterPos3iv;
  tbl.glRasterPos3s = gmock_glRasterPos3s;
  tbl.glRasterPos3sv = gmock_glRasterPos3sv;
  tbl.glRasterPos4d = gmock_glRasterPos4d;
  tbl.glRasterPos4dv = gmock_glRasterPos4dv;
  tbl.glRasterPos4f = gmock_glRasterPos4f;
  tbl.glRasterPos4fv = gmock_glRasterPos4fv;
  tbl.glRasterPos4i = gmock_glRasterPos4i;
  tbl.glRasterPos4iv = gmock_glRasterPos4iv;
  tbl.glRasterPos4s = gmock_glRasterPos4s;
  tbl.glRasterPos4sv = gmock_glRasterPos4sv;
  tbl.glReadBuffer = gmock_glReadBuffer;
  tbl.glReadPixels = gmock_glReadPixels;
  tbl.glRectd = gmock_glRectd;
  tbl.glRectdv = gmock_glRectdv;
  tbl.glRectf = gmock_glRectf;
  tbl.glRectfv = gmock_glRectfv;
  tbl.glRecti = gmock_glRecti;
  tbl.glRectiv = gmock_glRectiv;
  tbl.glRects = gmock_glRects;
  tbl.glRectsv = gmock_glRectsv;
  tbl.glRenderMode = gmock_glRenderMode;
  tbl.glRotated = gmock_glRotated;
  tbl.glRotatef = gmock_glRotatef;
  tbl.glScaled = gmock_glScaled;
  tbl.glScalef = gmock_glScalef;
  tbl.glScissor = gmock_glScissor;
  tbl.glSelectBuffer = gmock_glSelectBuffer;
  tbl.glShadeModel = gmock_glShadeModel;
  tbl.glStencilFunc = gmock_glStencilFunc;
  tbl.glStencilMask = gmock_glStencilMask;
  tbl.glStencilOp = gmock_glStencilOp;
  tbl.glTexCoord1d = gmock_glTexCoord1d;
  tbl.glTexCoord1dv = gmock_glTexCoord1dv;
  tbl.glTexCoord1f = gmock_glTexCoord1f;
  tbl.glTexCoord1fv = gmock_glTexCoord1fv;
  tbl.glTexCoord1i = gmock_glTexCoord1i;
  tbl.glTexCoord1iv = gmock_glTexCoord1iv;
  tbl.glTexCoord1s = gmock_glTexCoord1s;
  tbl.glTexCoord1sv = gmock_glTexCoord1sv;
  tbl.glTexCoord2d = gmock_glTexCoord2d;
  tbl.glTexCoord2dv = gmock_glTexCoord2dv;
  tbl.glTexCoord2f = gmock_glTexCoord2f;
  tbl.glTexCoord2fv = gmock_glTexCoord2fv;
  tbl.glTexCoord2i = gmock_glTexCoord2i;
  tbl.glTexCoord2iv = gmock_glTexCoord2iv;
  tbl.glTexCoord2s = gmock_glTexCoord2s;
  tbl.glTexCoord2sv = gmock_glTexCoord2sv;
  tbl.glTexCoord3d = gmock_glTexCoord3d;
  tbl.glTexCoord3dv = gmock_glTexCoord3dv;
  tbl.glTexCoord3f = gmock_glTexCoord3f;
  tbl.glTexCoord3fv = gmock_glTexCoord3fv;
  tbl.glTexCoord3i = gmock_glTexCoord3i;
  tbl.glTexCoord3iv = gmock_glTexCoord3iv;
  tbl.glTexCoord3s = gmock_glTexCoord3s;
  tbl.glTexCoord3sv = gmock_glTexCoord3sv;
  tbl.glTexCoord4d = gmock_glTexCoord4d;
  tbl.glTexCoord4dv = gmock_glTexCoord4dv;
  tbl.glTexCoord4f = gmock_glTexCoord4f;
  tbl.glTexCoord4fv = gmock_glTexCoord4fv;
  tbl.glTexCoord4i = gmock_glTexCoord4i;
  tbl.glTexCoord4iv = gmock_glTexCoord4iv;
  tbl.glTexCoord4s = gmock_glTexCoord4s;
  tbl.glTexCoord4sv = gmock_glTexCoord4sv;
  tbl.glTexEnvf = gmock_glTexEnvf;
  tbl.glTexEnvfv = gmock_glTexEnvfv;
  tbl.glTexEnvi = gmock_glTexEnvi;
  tbl.glTexEnviv = gmock_glTexEnviv;
  tbl.glTexGend = gmock_glTexGend;
  tbl.glTexGendv = gmock_glTexGendv;
  tbl.glTexGenf = gmock_glTexGenf;
  tbl.glTexGenfv = gmock_glTexGenfv;
  tbl.glTexGeni = gmock_glTexGeni;
  tbl.glTexGeniv = gmock_glTexGeniv;
  tbl.glTexImage1D = gmock_glTexImage1D;
  tbl.glTexImage2D = gmock_glTexImage2D;
  tbl.glTexParameterf = gmock_glTexParameterf;
  tbl.glTexParameterfv = gmock_glTexParameterfv;
  tbl.glTexParameteri = gmock_glTexParameteri;
  tbl.glTexParameteriv = gmock_glTexParameteriv;
  tbl.glTranslated = gmock_glTranslated;
  tbl.glTranslatef = gmock_glTranslatef;
  tbl.glVertex2d = gmock_glVertex2d;
  tbl.glVertex2dv = gmock_glVertex2dv;
  tbl.glVertex2f = gmock_glVertex2f;
  tbl.glVertex2fv = gmock_glVertex2fv;
  tbl.glVertex2i = gmock_glVertex2i;
  tbl.glVertex2iv = gmock_glVertex2iv;
  tbl.glVertex2s = gmock_glVertex2s;
  tbl.glVertex2sv = gmock_glVertex2sv;
  tbl.glVertex3d = gmock_glVertex3d;
  tbl.glVertex3dv = gmock_glVertex3dv;
  tbl.glVertex3f = gmock_glVertex3f;
  tbl.glVertex3fv = gmock_glVertex3fv;
  tbl.glVertex3i = gmock_glVertex3i;
  tbl.glVertex3iv = gmock_glVertex3iv;
  tbl.glVertex3s = gmock_glVertex3s;
  tbl.glVertex3sv = gmock_glVertex3sv;
  tbl.glVertex4d = gmock_glVertex4d;
  tbl.glVertex4dv = gmock_glVertex4dv;
  tbl.glVertex4f = gmock_glVertex4f;
  tbl.glVertex4fv = gmock_glVertex4fv;
  tbl.glVertex4i = gmock_glVertex4i;
  tbl.glVertex4iv = gmock_glVertex4iv;
  tbl.glVertex4s = gmock_glVertex4s;
  tbl.glVertex4sv = gmock_glVertex4sv;
  tbl.glViewport = gmock_glViewport;
  tbl.glAreTexturesResident = gmock_glAreTexturesResident;
  tbl.glArrayElement = gmock_glArrayElement;
  tbl.glBindTexture = gmock_glBindTexture;
  tbl.glColorPointer = gmock_glColorPointer;
  tbl.glCopyTexImage1D = gmock_glCopyTexImage1D;
  tbl.glCopyTexImage2D = gmock_glCopyTexImage2D;
  tbl.glCopyTexSubImage1D = gmock_glCopyTexSubImage1D;
  tbl.glCopyTexSubImage2D = gmock_glCopyTexSubImage2D;
  tbl.glDeleteTextures = gmock_glDeleteTextures;
  tbl.glDisableClientState = gmock_glDisableClientState;
  tbl.glDrawArrays = gmock_glDrawArrays;
  tbl.glDrawElements = gmock_glDrawElements;
  tbl.glEdgeFlagPointer = gmock_glEdgeFlagPointer;
  tbl.glEnableClientState = gmock_glEnableClientState;
  tbl.glGenTextures = gmock_glGenTextures;
  tbl.glGetPointerv = gmock_glGetPointerv;
  tbl.glIndexPointer = gmock_glIndexPointer;
  tbl.glIndexub = gmock_glIndexub;
  tbl.glIndexubv = gmock_glIndexubv;
  tbl.glInterleavedArrays = gmock_glInterleavedArrays;
  tbl.glIsTexture = gmock_glIsTexture;
  tbl.glNormalPointer = gmock_glNormalPointer;
  tbl.glPolygonOffset = gmock_glPolygonOffset;
  tbl.glPopClientAttrib = gmock_glPopClientAttrib;
  tbl.glPrioritizeTextures = gmock_glPrioritizeTextures;
  tbl.glPushClientAttrib = gmock_glPushClientAttrib;
  tbl.glTexCoordPointer = gmock_glTexCoordPointer;
  tbl.glTexSubImage1D = gmock_glTexSubImage1D;
  tbl.glTexSubImage2D = gmock_glTexSubImage2D;
  tbl.glVertexPointer = gmock_glVertexPointer;
  tbl.glBlendColor = gmock_glBlendColor;
  tbl.glBlendEquation = gmock_glBlendEquation;
  tbl.glCopyTexSubImage3D = gmock_glCopyTexSubImage3D;
  tbl.glDrawRangeElements = gmock_glDrawRangeElements;
  tbl.glTexImage3D = gmock_glTexImage3D;
  tbl.glTexSubImage3D = gmock_glTexSubImage3D;
  tbl.glActiveTexture = gmock_glActiveTexture;
  tbl.glClientActiveTexture = gmock_glClientActiveTexture;
  tbl.glCompressedTexImage1D = gmock_glCompressedTexImage1D;
  tbl.glCompressedTexImage2D = gmock_glCompressedTexImage2D;
  tbl.glCompressedTexImage3D = gmock_glCompressedTexImage3D;
  tbl.glCompressedTexSubImage1D = gmock_glCompressedTexSubImage1D;
  tbl.glCompressedTexSubImage2D = gmock_glCompressedTexSubImage2D;
  tbl.glCompressedTexSubImage3D = gmock_glCompressedTexSubImage3D;
  tbl.glGetCompressedTexImage = gmock_glGetCompressedTexImage;
  tbl.glLoadTransposeMatrixd = gmock_glLoadTransposeMatrixd;
  tbl.glLoadTransposeMatrixf = gmock_glLoadTransposeMatrixf;
  tbl.glMultTransposeMatrixd = gmock_glMultTransposeMatrixd;
  tbl.glMultTransposeMatrixf = gmock_glMultTransposeMatrixf;
  tbl.glMultiTexCoord1d = gmock_glMultiTexCoord1d;
  tbl.glMultiTexCoord1dv = gmock_glMultiTexCoord1dv;
  tbl.glMultiTexCoord1f = gmock_glMultiTexCoord1f;
  tbl.glMultiTexCoord1fv = gmock_glMultiTexCoord1fv;
  tbl.glMultiTexCoord1i = gmock_glMultiTexCoord1i;
  tbl.glMultiTexCoord1iv = gmock_glMultiTexCoord1iv;
  tbl.glMultiTexCoord1s = gmock_glMultiTexCoord1s;
  tbl.glMultiTexCoord1sv = gmock_glMultiTexCoord1sv;
  tbl.glMultiTexCoord2d = gmock_glMultiTexCoord2d;
  tbl.glMultiTexCoord2dv = gmock_glMultiTexCoord2dv;
  tbl.glMultiTexCoord2f = gmock_glMultiTexCoord2f;
  tbl.glMultiTexCoord2fv = gmock_glMultiTexCoord2fv;
  tbl.glMultiTexCoord2i = gmock_glMultiTexCoord2i;
  tbl.glMultiTexCoord2iv = gmock_glMultiTexCoord2iv;
  tbl.glMultiTexCoord2s = gmock_glMultiTexCoord2s;
  tbl.glMultiTexCoord2sv = gmock_glMultiTexCoord2sv;
  tbl.glMultiTexCoord3d = gmock_glMultiTexCoord3d;
  tbl.glMultiTexCoord3dv = gmock_glMultiTexCoord3dv;
  tbl.glMultiTexCoord3f = gmock_glMultiTexCoord3f;
  tbl.glMultiTexCoord3fv = gmock_glMultiTexCoord3fv;
  tbl.glMultiTexCoord3i = gmock_glMultiTexCoord3i;
  tbl.glMultiTexCoord3iv = gmock_glMultiTexCoord3iv;
  tbl.glMultiTexCoord3s = gmock_glMultiTexCoord3s;
  tbl.glMultiTexCoord3sv = gmock_glMultiTexCoord3sv;
  tbl.glMultiTexCoord4d = gmock_glMultiTexCoord4d;
  tbl.glMultiTexCoord4dv = gmock_glMultiTexCoord4dv;
  tbl.glMultiTexCoord4f = gmock_glMultiTexCoord4f;
  tbl.glMultiTexCoord4fv = gmock_glMultiTexCoord4fv;
  tbl.glMultiTexCoord4i = gmock_glMultiTexCoord4i;
  tbl.glMultiTexCoord4iv = gmock_glMultiTexCoord4iv;
  tbl.glMultiTexCoord4s = gmock_glMultiTexCoord4s;
  tbl.glMultiTexCoord4sv = gmock_glMultiTexCoord4sv;
  tbl.glSampleCoverage = gmock_glSampleCoverage;
  tbl.glBlendFuncSeparate = gmock_glBlendFuncSeparate;
  tbl.glFogCoordPointer = gmock_glFogCoordPointer;
  tbl.glFogCoordd = gmock_glFogCoordd;
  tbl.glFogCoorddv = gmock_glFogCoorddv;
  tbl.glFogCoordf = gmock_glFogCoordf;
  tbl.glFogCoordfv = gmock_glFogCoordfv;
  tbl.glMultiDrawArrays = gmock_glMultiDrawArrays;
  tbl.glMultiDrawElements = gmock_glMultiDrawElements;
  tbl.glPointParameterf = gmock_glPointParameterf;
  tbl.glPointParameterfv = gmock_glPointParameterfv;
  tbl.glPointParameteri = gmock_glPointParameteri;
  tbl.glPointParameteriv = gmock_glPointParameteriv;
  tbl.glSecondaryColor3b = gmock_glSecondaryColor3b;
  tbl.glSecondaryColor3bv = gmock_glSecondaryColor3bv;
  tbl.glSecondaryColor3d = gmock_glSecondaryColor3d;
  tbl.glSecondaryColor3dv = gmock_glSecondaryColor3dv;
  tbl.glSecondaryColor3f = gmock_glSecondaryColor3f;
  tbl.glSecondaryColor3fv = gmock_glSecondaryColor3fv;
  tbl.glSecondaryColor3i = gmock_glSecondaryColor3i;
  tbl.glSecondaryColor3iv = gmock_glSecondaryColor3iv;
  tbl.glSecondaryColor3s = gmock_glSecondaryColor3s;
  tbl.glSecondaryColor3sv = gmock_glSecondaryColor3sv;
  tbl.glSecondaryColor3ub = gmock_glSecondaryColor3ub;
  tbl.glSecondaryColor3ubv = gmock_glSecondaryColor3ubv;
  tbl.glSecondaryColor3ui = gmock_glSecondaryColor3ui;
  tbl.glSecondaryColor3uiv = gmock_glSecondaryColor3uiv;
  tbl.glSecondaryColor3us = gmock_glSecondaryColor3us;
  tbl.glSecondaryColor3usv = gmock_glSecondaryColor3usv;
  tbl.glSecondaryColorPointer = gmock_glSecondaryColorPointer;
  tbl.glWindowPos2d = gmock_glWindowPos2d;
  tbl.glWindowPos2dv = gmock_glWindowPos2dv;
  tbl.glWindowPos2f = gmock_glWindowPos2f;
  tbl.glWindowPos2fv = gmock_glWindowPos2fv;
  tbl.glWindowPos2i = gmock_glWindowPos2i;
  tbl.glWindowPos2iv = gmock_glWindowPos2iv;
  tbl.glWindowPos2s = gmock_glWindowPos2s;
  tbl.glWindowPos2sv = gmock_glWindowPos2sv;
  tbl.glWindowPos3d = gmock_glWindowPos3d;
  tbl.glWindowPos3dv = gmock_glWindowPos3dv;
  tbl.glWindowPos3f = gmock_glWindowPos3f;
  tbl.glWindowPos3fv = gmock_glWindowPos3fv;
  tbl.glWindowPos3i = gmock_glWindowPos3i;
  tbl.glWindowPos3iv = gmock_glWindowPos3iv;
  tbl.glWindowPos3s = gmock_glWindowPos3s;
  tbl.glWindowPos3sv = gmock_glWindowPos3sv;
  tbl.glBeginQuery = gmock_glBeginQuery;
  tbl.glBindBuffer = gmock_glBindBuffer;
  tbl.glBufferData = gmock_glBufferData;
  tbl.glBufferSubData = gmock_glBufferSubData;
  tbl.glDeleteBuffers = gmock_glDeleteBuffers;
  tbl.glDeleteQueries = gmock_glDeleteQueries;
  tbl.glEndQuery = gmock_glEndQuery;
  tbl.glGenBuffers = gmock_glGenBuffers;
  tbl.glGenQueries = gmock_glGenQueries;
  tbl.glGetBufferParameteriv = gmock_glGetBufferParameteriv;
  tbl.glGetBufferPointerv = gmock_glGetBufferPointerv;
  tbl.glGetBufferSubData = gmock_glGetBufferSubData;
  tbl.glGetQueryObjectiv = gmock_glGetQueryObjectiv;
  tbl.glGetQueryObjectuiv = gmock_glGetQueryObjectuiv;
  tbl.glGetQueryiv = gmock_glGetQueryiv;
  tbl.glIsBuffer = gmock_glIsBuffer;
  tbl.glIsQuery = gmock_glIsQuery;
  tbl.glMapBuffer = gmock_glMapBuffer;
  tbl.glUnmapBuffer = gmock_glUnmapBuffer;
  tbl.glAttachShader = gmock_glAttachShader;
  tbl.glBindAttribLocation = gmock_glBindAttribLocation;
  tbl.glBlendEquationSeparate = gmock_glBlendEquationSeparate;
  tbl.glCompileShader = gmock_glCompileShader;
  tbl.glCreateProgram = gmock_glCreateProgram;
  tbl.glCreateShader = gmock_glCreateShader;
  tbl.glDeleteProgram = gmock_glDeleteProgram;
  tbl.glDeleteShader = gmock_glDeleteShader;
  tbl.glDetachShader = gmock_glDetachShader;
  tbl.glDisableVertexAttribArray = gmock_glDisableVertexAttribArray;
  tbl.glDrawBuffers = gmock_glDrawBuffers;
  tbl.glEnableVertexAttribArray = gmock_glEnableVertexAttribArray;
  tbl.glGetActiveAttrib = gmock_glGetActiveAttrib;
  tbl.glGetActiveUniform = gmock_glGetActiveUniform;
  tbl.glGetAttachedShaders = gmock_glGetAttachedShaders;
  tbl.glGetAttribLocation = gmock_glGetAttribLocation;
  tbl.glGetProgramInfoLog = gmock_glGetProgramInfoLog;
  tbl.glGetProgramiv = gmock_glGetProgramiv;
  tbl.glGetShaderInfoLog = gmock_glGetShaderInfoLog;
  tbl.glGetShaderSource = gmock_glGetShaderSource;
  tbl.glGetShaderiv = gmock_glGetShaderiv;
  tbl.glGetUniformLocation = gmock_glGetUniformLocation;
  tbl.glGetUniformfv = gmock_glGetUniformfv;
  tbl.glGetUniformiv = gmock_glGetUniformiv;
  tbl.glGetVertexAttribPointerv = gmock_glGetVertexAttribPointerv;
  tbl.glGetVertexAttribdv = gmock_glGetVertexAttribdv;
  tbl.glGetVertexAttribfv = gmock_glGetVertexAttribfv;
  tbl.glGetVertexAttribiv = gmock_glGetVertexAttribiv;
  tbl.glIsProgram = gmock_glIsProgram;
  tbl.glIsShader = gmock_glIsShader;
  tbl.glLinkProgram = gmock_glLinkProgram;
  tbl.glShaderSource = gmock_glShaderSource;
  tbl.glStencilFuncSeparate = gmock_glStencilFuncSeparate;
  tbl.glStencilMaskSeparate = gmock_glStencilMaskSeparate;
  tbl.glStencilOpSeparate = gmock_glStencilOpSeparate;
  tbl.glUniform1f = gmock_glUniform1f;
  tbl.glUniform1fv = gmock_glUniform1fv;
  tbl.glUniform1i = gmock_glUniform1i;
  tbl.glUniform1iv = gmock_glUniform1iv;
  tbl.glUniform2f = gmock_glUniform2f;
  tbl.glUniform2fv = gmock_glUniform2fv;
  tbl.glUniform2i = gmock_glUniform2i;
  tbl.glUniform2iv = gmock_glUniform2iv;
  tbl.glUniform3f = gmock_glUniform3f;
  tbl.glUniform3fv = gmock_glUniform3fv;
  tbl.glUniform3i = gmock_glUniform3i;
  tbl.glUniform3iv = gmock_glUniform3iv;
  tbl.glUniform4f = gmock_glUniform4f;
  tbl.glUniform4fv = gmock_glUniform4fv;
  tbl.glUniform4i = gmock_glUniform4i;
  tbl.glUniform4iv = gmock_glUniform4iv;
  tbl.glUniformMatrix2fv = gmock_glUniformMatrix2fv;
  tbl.glUniformMatrix3fv = gmock_glUniformMatrix3fv;
  tbl.glUniformMatrix4fv = gmock_glUniformMatrix4fv;
  tbl.glUseProgram = gmock_glUseProgram;
  tbl.glValidateProgram = gmock_glValidateProgram;
  tbl.glVertexAttrib1d = gmock_glVertexAttrib1d;
  tbl.glVertexAttrib1dv = gmock_glVertexAttrib1dv;
  tbl.glVertexAttrib1f = gmock_glVertexAttrib1f;
  tbl.glVertexAttrib1fv = gmock_glVertexAttrib1fv;
  tbl.glVertexAttrib1s = gmock_glVertexAttrib1s;
  tbl.glVertexAttrib1sv = gmock_glVertexAttrib1sv;
  tbl.glVertexAttrib2d = gmock_glVertexAttrib2d;
  tbl.glVertexAttrib2dv = gmock_glVertexAttrib2dv;
  tbl.glVertexAttrib2f = gmock_glVertexAttrib2f;
  tbl.glVertexAttrib2fv = gmock_glVertexAttrib2fv;
  tbl.glVertexAttrib2s = gmock_glVertexAttrib2s;
  tbl.glVertexAttrib2sv = gmock_glVertexAttrib2sv;
  tbl.glVertexAttrib3d = gmock_glVertexAttrib3d;
  tbl.glVertexAttrib3dv = gmock_glVertexAttrib3dv;
  tbl.glVertexAttrib3f = gmock_glVertexAttrib3f;
  tbl.glVertexAttrib3fv = gmock_glVertexAttrib3fv;
  tbl.glVertexAttrib3s = gmock_glVertexAttrib3s;
  tbl.glVertexAttrib3sv = gmock_glVertexAttrib3sv;
  tbl.glVertexAttrib4Nbv = gmock_glVertexAttrib4Nbv;
  tbl.glVertexAttrib4Niv = gmock_glVertexAttrib4Niv;
  tbl.glVertexAttrib4Nsv = gmock_glVertexAttrib4Nsv;
  tbl.glVertexAttrib4Nub = gmock_glVertexAttrib4Nub;
  tbl.glVertexAttrib4Nubv = gmock_glVertexAttrib4Nubv;
  tbl.glVertexAttrib4Nuiv = gmock_glVertexAttrib4Nuiv;
  tbl.glVertexAttrib4Nusv = gmock_glVertexAttrib4Nusv;
  tbl.glVertexAttrib4bv = gmock_glVertexAttrib4bv;
  tbl.glVertexAttrib4d = gmock_glVertexAttrib4d;
  tbl.glVertexAttrib4dv = gmock_glVertexAttrib4dv;
  tbl.glVertexAttrib4f = gmock_glVertexAttrib4f;
  tbl.glVertexAttrib4fv = gmock_glVertexAttrib4fv;
  tbl.glVertexAttrib4iv = gmock_glVertexAttrib4iv;
  tbl.glVertexAttrib4s = gmock_glVertexAttrib4s;
  tbl.glVertexAttrib4sv = gmock_glVertexAttrib4sv;
  tbl.glVertexAttrib4ubv = gmock_glVertexAttrib4ubv;
  tbl.glVertexAttrib4uiv = gmock_glVertexAttrib4uiv;
  tbl.glVertexAttrib4usv = gmock_glVertexAttrib4usv;
  tbl.glVertexAttribPointer = gmock_glVertexAttribPointer;
  tbl.glUniformMatrix2x3fv = gmock_glUniformMatrix2x3fv;
  tbl.glUniformMatrix2x4fv = gmock_glUniformMatrix2x4fv;
  tbl.glUniformMatrix3x2fv = gmock_glUniformMatrix3x2fv;
  tbl.glUniformMatrix3x4fv = gmock_glUniformMatrix3x4fv;
  tbl.glUniformMatrix4x2fv = gmock_glUniformMatrix4x2fv;
  tbl.glUniformMatrix4x3fv = gmock_glUniformMatrix4x3fv;
  tbl.glBeginConditionalRender = gmock_glBeginConditionalRender;
  tbl.glBeginTransformFeedback = gmock_glBeginTransformFeedback;
  tbl.glBindFragDataLocation = gmock_glBindFragDataLocation;
  tbl.glClampColor = gmock_glClampColor;
  tbl.glClearBufferfi = gmock_glClearBufferfi;
  tbl.glClearBufferfv = gmock_glClearBufferfv;
  tbl.glClearBufferiv = gmock_glClearBufferiv;
  tbl.glClearBufferuiv = gmock_glClearBufferuiv;
  tbl.glColorMaski = gmock_glColorMaski;
  tbl.glDisablei = gmock_glDisablei;
  tbl.glEnablei = gmock_glEnablei;
  tbl.glEndConditionalRender = gmock_glEndConditionalRender;
  tbl.glEndTransformFeedback = gmock_glEndTransformFeedback;
  tbl.glGetBooleani_v = gmock_glGetBooleani_v;
  tbl.glGetFragDataLocation = gmock_glGetFragDataLocation;
  tbl.glGetStringi = gmock_glGetStringi;
  tbl.glGetTexParameterIiv = gmock_glGetTexParameterIiv;
  tbl.glGetTexParameterIuiv = gmock_glGetTexParameterIuiv;
  tbl.glGetTransformFeedbackVarying = gmock_glGetTransformFeedbackVarying;
  tbl.glGetUniformuiv = gmock_glGetUniformuiv;
  tbl.glGetVertexAttribIiv = gmock_glGetVertexAttribIiv;
  tbl.glGetVertexAttribIuiv = gmock_glGetVertexAttribIuiv;
  tbl.glIsEnabledi = gmock_glIsEnabledi;
  tbl.glTexParameterIiv = gmock_glTexParameterIiv;
  tbl.glTexParameterIuiv = gmock_glTexParameterIuiv;
  tbl.glTransformFeedbackVaryings = gmock_glTransformFeedbackVaryings;
  tbl.glUniform1ui = gmock_glUniform1ui;
  tbl.glUniform1uiv = gmock_glUniform1uiv;
  tbl.glUniform2ui = gmock_glUniform2ui;
  tbl.glUniform2uiv = gmock_glUniform2uiv;
  tbl.glUniform3ui = gmock_glUniform3ui;
  tbl.glUniform3uiv = gmock_glUniform3uiv;
  tbl.glUniform4ui = gmock_glUniform4ui;
  tbl.glUniform4uiv = gmock_glUniform4uiv;
  tbl.glVertexAttribI1i = gmock_glVertexAttribI1i;
  tbl.glVertexAttribI1iv = gmock_glVertexAttribI1iv;
  tbl.glVertexAttribI1ui = gmock_glVertexAttribI1ui;
  tbl.glVertexAttribI1uiv = gmock_glVertexAttribI1uiv;
  tbl.glVertexAttribI2i = gmock_glVertexAttribI2i;
  tbl.glVertexAttribI2iv = gmock_glVertexAttribI2iv;
  tbl.glVertexAttribI2ui = gmock_glVertexAttribI2ui;
  tbl.glVertexAttribI2uiv = gmock_glVertexAttribI2uiv;
  tbl.glVertexAttribI3i = gmock_glVertexAttribI3i;
  tbl.glVertexAttribI3iv = gmock_glVertexAttribI3iv;
  tbl.glVertexAttribI3ui = gmock_glVertexAttribI3ui;
  tbl.glVertexAttribI3uiv = gmock_glVertexAttribI3uiv;
  tbl.glVertexAttribI4bv = gmock_glVertexAttribI4bv;
  tbl.glVertexAttribI4i = gmock_glVertexAttribI4i;
  tbl.glVertexAttribI4iv = gmock_glVertexAttribI4iv;
  tbl.glVertexAttribI4sv = gmock_glVertexAttribI4sv;
  tbl.glVertexAttribI4ubv = gmock_glVertexAttribI4ubv;
  tbl.glVertexAttribI4ui = gmock_glVertexAttribI4ui;
  tbl.glVertexAttribI4uiv = gmock_glVertexAttribI4uiv;
  tbl.glVertexAttribI4usv = gmock_glVertexAttribI4usv;
  tbl.glVertexAttribIPointer = gmock_glVertexAttribIPointer;
  tbl.glDrawArraysInstanced = gmock_glDrawArraysInstanced;
  tbl.glDrawElementsInstanced = gmock_glDrawElementsInstanced;
  tbl.glPrimitiveRestartIndex = gmock_glPrimitiveRestartIndex;
  tbl.glTexBuffer = gmock_glTexBuffer;
  tbl.glFramebufferTexture = gmock_glFramebufferTexture;
  tbl.glFramebufferTextureFace = gmock_glFramebufferTextureFace;
  tbl.glGetBufferParameteri64v = gmock_glGetBufferParameteri64v;
  tbl.glGetInteger64i_v = gmock_glGetInteger64i_v;
  tbl.glVertexAttribDivisor = gmock_glVertexAttribDivisor;
  tbl.glBlendEquationSeparatei = gmock_glBlendEquationSeparatei;
  tbl.glBlendEquationi = gmock_glBlendEquationi;
  tbl.glBlendFuncSeparatei = gmock_glBlendFuncSeparatei;
  tbl.glBlendFunci = gmock_glBlendFunci;
  tbl.glTbufferMask3DFX = gmock_glTbufferMask3DFX;
  tbl.glDebugMessageCallbackAMD = gmock_glDebugMessageCallbackAMD;
  tbl.glDebugMessageEnableAMD = gmock_glDebugMessageEnableAMD;
  tbl.glDebugMessageInsertAMD = gmock_glDebugMessageInsertAMD;
  tbl.glGetDebugMessageLogAMD = gmock_glGetDebugMessageLogAMD;
  tbl.glBlendEquationIndexedAMD = gmock_glBlendEquationIndexedAMD;
  tbl.glBlendEquationSeparateIndexedAMD = gmock_glBlendEquationSeparateIndexedAMD;
  tbl.glBlendFuncIndexedAMD = gmock_glBlendFuncIndexedAMD;
  tbl.glBlendFuncSeparateIndexedAMD = gmock_glBlendFuncSeparateIndexedAMD;
  tbl.glMultiDrawArraysIndirectAMD = gmock_glMultiDrawArraysIndirectAMD;
  tbl.glMultiDrawElementsIndirectAMD = gmock_glMultiDrawElementsIndirectAMD;
  tbl.glDeleteNamesAMD = gmock_glDeleteNamesAMD;
  tbl.glGenNamesAMD = gmock_glGenNamesAMD;
  tbl.glIsNameAMD = gmock_glIsNameAMD;
  tbl.glBeginPerfMonitorAMD = gmock_glBeginPerfMonitorAMD;
  tbl.glDeletePerfMonitorsAMD = gmock_glDeletePerfMonitorsAMD;
  tbl.glEndPerfMonitorAMD = gmock_glEndPerfMonitorAMD;
  tbl.glGenPerfMonitorsAMD = gmock_glGenPerfMonitorsAMD;
  tbl.glGetPerfMonitorCounterDataAMD = gmock_glGetPerfMonitorCounterDataAMD;
  tbl.glGetPerfMonitorCounterInfoAMD = gmock_glGetPerfMonitorCounterInfoAMD;
  tbl.glGetPerfMonitorCounterStringAMD = gmock_glGetPerfMonitorCounterStringAMD;
  tbl.glGetPerfMonitorCountersAMD = gmock_glGetPerfMonitorCountersAMD;
  tbl.glGetPerfMonitorGroupStringAMD = gmock_glGetPerfMonitorGroupStringAMD;
  tbl.glGetPerfMonitorGroupsAMD = gmock_glGetPerfMonitorGroupsAMD;
  tbl.glSelectPerfMonitorCountersAMD = gmock_glSelectPerfMonitorCountersAMD;
  tbl.glSetMultisamplefvAMD = gmock_glSetMultisamplefvAMD;
  tbl.glStencilOpValueAMD = gmock_glStencilOpValueAMD;
  tbl.glTessellationFactorAMD = gmock_glTessellationFactorAMD;
  tbl.glTessellationModeAMD = gmock_glTessellationModeAMD;
  tbl.glBlitFramebufferANGLE = gmock_glBlitFramebufferANGLE;
  tbl.glRenderbufferStorageMultisampleANGLE = gmock_glRenderbufferStorageMultisampleANGLE;
  tbl.glDrawArraysInstancedANGLE = gmock_glDrawArraysInstancedANGLE;
  tbl.glDrawElementsInstancedANGLE = gmock_glDrawElementsInstancedANGLE;
  tbl.glVertexAttribDivisorANGLE = gmock_glVertexAttribDivisorANGLE;
  tbl.glGetTranslatedShaderSourceANGLE = gmock_glGetTranslatedShaderSourceANGLE;
  tbl.glCopyTextureLevelsAPPLE = gmock_glCopyTextureLevelsAPPLE;
  tbl.glDrawElementArrayAPPLE = gmock_glDrawElementArrayAPPLE;
  tbl.glDrawRangeElementArrayAPPLE = gmock_glDrawRangeElementArrayAPPLE;
  tbl.glElementPointerAPPLE = gmock_glElementPointerAPPLE;
  tbl.glMultiDrawElementArrayAPPLE = gmock_glMultiDrawElementArrayAPPLE;
  tbl.glMultiDrawRangeElementArrayAPPLE = gmock_glMultiDrawRangeElementArrayAPPLE;
  tbl.glDeleteFencesAPPLE = gmock_glDeleteFencesAPPLE;
  tbl.glFinishFenceAPPLE = gmock_glFinishFenceAPPLE;
  tbl.glFinishObjectAPPLE = gmock_glFinishObjectAPPLE;
  tbl.glGenFencesAPPLE = gmock_glGenFencesAPPLE;
  tbl.glIsFenceAPPLE = gmock_glIsFenceAPPLE;
  tbl.glSetFenceAPPLE = gmock_glSetFenceAPPLE;
  tbl.glTestFenceAPPLE = gmock_glTestFenceAPPLE;
  tbl.glTestObjectAPPLE = gmock_glTestObjectAPPLE;
  tbl.glBufferParameteriAPPLE = gmock_glBufferParameteriAPPLE;
  tbl.glFlushMappedBufferRangeAPPLE = gmock_glFlushMappedBufferRangeAPPLE;
  tbl.glFinishRenderAPPLE = gmock_glFinishRenderAPPLE;
  tbl.glFlushRenderAPPLE = gmock_glFlushRenderAPPLE;
  tbl.glSwapAPPLE = gmock_glSwapAPPLE;
  tbl.glRenderbufferStorageMultisampleAPPLE = gmock_glRenderbufferStorageMultisampleAPPLE;
  tbl.glResolveMultisampleFramebufferAPPLE = gmock_glResolveMultisampleFramebufferAPPLE;
  tbl.glGetObjectParameterivAPPLE = gmock_glGetObjectParameterivAPPLE;
  tbl.glObjectPurgeableAPPLE = gmock_glObjectPurgeableAPPLE;
  tbl.glObjectUnpurgeableAPPLE = gmock_glObjectUnpurgeableAPPLE;
  tbl.glClientWaitSyncAPPLE = gmock_glClientWaitSyncAPPLE;
  tbl.glDeleteSyncAPPLE = gmock_glDeleteSyncAPPLE;
  tbl.glFenceSyncAPPLE = gmock_glFenceSyncAPPLE;
  tbl.glGetInteger64vAPPLE = gmock_glGetInteger64vAPPLE;
  tbl.glGetSyncivAPPLE = gmock_glGetSyncivAPPLE;
  tbl.glIsSyncAPPLE = gmock_glIsSyncAPPLE;
  tbl.glWaitSyncAPPLE = gmock_glWaitSyncAPPLE;
  tbl.glGetTexParameterPointervAPPLE = gmock_glGetTexParameterPointervAPPLE;
  tbl.glTextureRangeAPPLE = gmock_glTextureRangeAPPLE;
  tbl.glBindVertexArrayAPPLE = gmock_glBindVertexArrayAPPLE;
  tbl.glDeleteVertexArraysAPPLE = gmock_glDeleteVertexArraysAPPLE;
  tbl.glGenVertexArraysAPPLE = gmock_glGenVertexArraysAPPLE;
  tbl.glIsVertexArrayAPPLE = gmock_glIsVertexArrayAPPLE;
  tbl.glFlushVertexArrayRangeAPPLE = gmock_glFlushVertexArrayRangeAPPLE;
  tbl.glVertexArrayParameteriAPPLE = gmock_glVertexArrayParameteriAPPLE;
  tbl.glVertexArrayRangeAPPLE = gmock_glVertexArrayRangeAPPLE;
  tbl.glDisableVertexAttribAPPLE = gmock_glDisableVertexAttribAPPLE;
  tbl.glEnableVertexAttribAPPLE = gmock_glEnableVertexAttribAPPLE;
  tbl.glIsVertexAttribEnabledAPPLE = gmock_glIsVertexAttribEnabledAPPLE;
  tbl.glMapVertexAttrib1dAPPLE = gmock_glMapVertexAttrib1dAPPLE;
  tbl.glMapVertexAttrib1fAPPLE = gmock_glMapVertexAttrib1fAPPLE;
  tbl.glMapVertexAttrib2dAPPLE = gmock_glMapVertexAttrib2dAPPLE;
  tbl.glMapVertexAttrib2fAPPLE = gmock_glMapVertexAttrib2fAPPLE;
  tbl.glClearDepthf = gmock_glClearDepthf;
  tbl.glDepthRangef = gmock_glDepthRangef;
  tbl.glGetShaderPrecisionFormat = gmock_glGetShaderPrecisionFormat;
  tbl.glReleaseShaderCompiler = gmock_glReleaseShaderCompiler;
  tbl.glShaderBinary = gmock_glShaderBinary;
  tbl.glDrawArraysInstancedBaseInstance = gmock_glDrawArraysInstancedBaseInstance;
  tbl.glDrawElementsInstancedBaseInstance = gmock_glDrawElementsInstancedBaseInstance;
  tbl.glDrawElementsInstancedBaseVertexBaseInstance = gmock_glDrawElementsInstancedBaseVertexBaseInstance;
  tbl.glBindFragDataLocationIndexed = gmock_glBindFragDataLocationIndexed;
  tbl.glGetFragDataIndex = gmock_glGetFragDataIndex;
  tbl.glCreateSyncFromCLeventARB = gmock_glCreateSyncFromCLeventARB;
  tbl.glClearBufferData = gmock_glClearBufferData;
  tbl.glClearBufferSubData = gmock_glClearBufferSubData;
  tbl.glClearNamedBufferDataEXT = gmock_glClearNamedBufferDataEXT;
  tbl.glClearNamedBufferSubDataEXT = gmock_glClearNamedBufferSubDataEXT;
  tbl.glClampColorARB = gmock_glClampColorARB;
  tbl.glDispatchCompute = gmock_glDispatchCompute;
  tbl.glDispatchComputeIndirect = gmock_glDispatchComputeIndirect;
  tbl.glCopyBufferSubData = gmock_glCopyBufferSubData;
  tbl.glCopyImageSubData = gmock_glCopyImageSubData;
  tbl.glDebugMessageCallbackARB = gmock_glDebugMessageCallbackARB;
  tbl.glDebugMessageControlARB = gmock_glDebugMessageControlARB;
  tbl.glDebugMessageInsertARB = gmock_glDebugMessageInsertARB;
  tbl.glGetDebugMessageLogARB = gmock_glGetDebugMessageLogARB;
  tbl.glDrawBuffersARB = gmock_glDrawBuffersARB;
  tbl.glBlendEquationSeparateiARB = gmock_glBlendEquationSeparateiARB;
  tbl.glBlendEquationiARB = gmock_glBlendEquationiARB;
  tbl.glBlendFuncSeparateiARB = gmock_glBlendFuncSeparateiARB;
  tbl.glBlendFunciARB = gmock_glBlendFunciARB;
  tbl.glDrawElementsBaseVertex = gmock_glDrawElementsBaseVertex;
  tbl.glDrawElementsInstancedBaseVertex = gmock_glDrawElementsInstancedBaseVertex;
  tbl.glDrawRangeElementsBaseVertex = gmock_glDrawRangeElementsBaseVertex;
  tbl.glMultiDrawElementsBaseVertex = gmock_glMultiDrawElementsBaseVertex;
  tbl.glDrawArraysIndirect = gmock_glDrawArraysIndirect;
  tbl.glDrawElementsIndirect = gmock_glDrawElementsIndirect;
  tbl.glDrawArraysInstancedARB = gmock_glDrawArraysInstancedARB;
  tbl.glDrawElementsInstancedARB = gmock_glDrawElementsInstancedARB;
  tbl.glFramebufferParameteri = gmock_glFramebufferParameteri;
  tbl.glGetFramebufferParameteriv = gmock_glGetFramebufferParameteriv;
  tbl.glGetNamedFramebufferParameterivEXT = gmock_glGetNamedFramebufferParameterivEXT;
  tbl.glNamedFramebufferParameteriEXT = gmock_glNamedFramebufferParameteriEXT;
  tbl.glBindFramebuffer = gmock_glBindFramebuffer;
  tbl.glBindRenderbuffer = gmock_glBindRenderbuffer;
  tbl.glBlitFramebuffer = gmock_glBlitFramebuffer;
  tbl.glCheckFramebufferStatus = gmock_glCheckFramebufferStatus;
  tbl.glDeleteFramebuffers = gmock_glDeleteFramebuffers;
  tbl.glDeleteRenderbuffers = gmock_glDeleteRenderbuffers;
  tbl.glFramebufferRenderbuffer = gmock_glFramebufferRenderbuffer;
  tbl.glFramebufferTexture1D = gmock_glFramebufferTexture1D;
  tbl.glFramebufferTexture2D = gmock_glFramebufferTexture2D;
  tbl.glFramebufferTexture3D = gmock_glFramebufferTexture3D;
  tbl.glFramebufferTextureLayer = gmock_glFramebufferTextureLayer;
  tbl.glGenFramebuffers = gmock_glGenFramebuffers;
  tbl.glGenRenderbuffers = gmock_glGenRenderbuffers;
  tbl.glGenerateMipmap = gmock_glGenerateMipmap;
  tbl.glGetFramebufferAttachmentParameteriv = gmock_glGetFramebufferAttachmentParameteriv;
  tbl.glGetRenderbufferParameteriv = gmock_glGetRenderbufferParameteriv;
  tbl.glIsFramebuffer = gmock_glIsFramebuffer;
  tbl.glIsRenderbuffer = gmock_glIsRenderbuffer;
  tbl.glRenderbufferStorage = gmock_glRenderbufferStorage;
  tbl.glRenderbufferStorageMultisample = gmock_glRenderbufferStorageMultisample;
  tbl.glFramebufferTextureARB = gmock_glFramebufferTextureARB;
  tbl.glFramebufferTextureFaceARB = gmock_glFramebufferTextureFaceARB;
  tbl.glFramebufferTextureLayerARB = gmock_glFramebufferTextureLayerARB;
  tbl.glProgramParameteriARB = gmock_glProgramParameteriARB;
  tbl.glGetProgramBinary = gmock_glGetProgramBinary;
  tbl.glProgramBinary = gmock_glProgramBinary;
  tbl.glProgramParameteri = gmock_glProgramParameteri;
  tbl.glGetUniformdv = gmock_glGetUniformdv;
  tbl.glUniform1d = gmock_glUniform1d;
  tbl.glUniform1dv = gmock_glUniform1dv;
  tbl.glUniform2d = gmock_glUniform2d;
  tbl.glUniform2dv = gmock_glUniform2dv;
  tbl.glUniform3d = gmock_glUniform3d;
  tbl.glUniform3dv = gmock_glUniform3dv;
  tbl.glUniform4d = gmock_glUniform4d;
  tbl.glUniform4dv = gmock_glUniform4dv;
  tbl.glUniformMatrix2dv = gmock_glUniformMatrix2dv;
  tbl.glUniformMatrix2x3dv = gmock_glUniformMatrix2x3dv;
  tbl.glUniformMatrix2x4dv = gmock_glUniformMatrix2x4dv;
  tbl.glUniformMatrix3dv = gmock_glUniformMatrix3dv;
  tbl.glUniformMatrix3x2dv = gmock_glUniformMatrix3x2dv;
  tbl.glUniformMatrix3x4dv = gmock_glUniformMatrix3x4dv;
  tbl.glUniformMatrix4dv = gmock_glUniformMatrix4dv;
  tbl.glUniformMatrix4x2dv = gmock_glUniformMatrix4x2dv;
  tbl.glUniformMatrix4x3dv = gmock_glUniformMatrix4x3dv;
  tbl.glColorSubTable = gmock_glColorSubTable;
  tbl.glColorTable = gmock_glColorTable;
  tbl.glColorTableParameterfv = gmock_glColorTableParameterfv;
  tbl.glColorTableParameteriv = gmock_glColorTableParameteriv;
  tbl.glConvolutionFilter1D = gmock_glConvolutionFilter1D;
  tbl.glConvolutionFilter2D = gmock_glConvolutionFilter2D;
  tbl.glConvolutionParameterf = gmock_glConvolutionParameterf;
  tbl.glConvolutionParameterfv = gmock_glConvolutionParameterfv;
  tbl.glConvolutionParameteri = gmock_glConvolutionParameteri;
  tbl.glConvolutionParameteriv = gmock_glConvolutionParameteriv;
  tbl.glCopyColorSubTable = gmock_glCopyColorSubTable;
  tbl.glCopyColorTable = gmock_glCopyColorTable;
  tbl.glCopyConvolutionFilter1D = gmock_glCopyConvolutionFilter1D;
  tbl.glCopyConvolutionFilter2D = gmock_glCopyConvolutionFilter2D;
  tbl.glGetColorTable = gmock_glGetColorTable;
  tbl.glGetColorTableParameterfv = gmock_glGetColorTableParameterfv;
  tbl.glGetColorTableParameteriv = gmock_glGetColorTableParameteriv;
  tbl.glGetConvolutionFilter = gmock_glGetConvolutionFilter;
  tbl.glGetConvolutionParameterfv = gmock_glGetConvolutionParameterfv;
  tbl.glGetConvolutionParameteriv = gmock_glGetConvolutionParameteriv;
  tbl.glGetHistogram = gmock_glGetHistogram;
  tbl.glGetHistogramParameterfv = gmock_glGetHistogramParameterfv;
  tbl.glGetHistogramParameteriv = gmock_glGetHistogramParameteriv;
  tbl.glGetMinmax = gmock_glGetMinmax;
  tbl.glGetMinmaxParameterfv = gmock_glGetMinmaxParameterfv;
  tbl.glGetMinmaxParameteriv = gmock_glGetMinmaxParameteriv;
  tbl.glGetSeparableFilter = gmock_glGetSeparableFilter;
  tbl.glHistogram = gmock_glHistogram;
  tbl.glMinmax = gmock_glMinmax;
  tbl.glResetHistogram = gmock_glResetHistogram;
  tbl.glResetMinmax = gmock_glResetMinmax;
  tbl.glSeparableFilter2D = gmock_glSeparableFilter2D;
  tbl.glVertexAttribDivisorARB = gmock_glVertexAttribDivisorARB;
  tbl.glGetInternalformativ = gmock_glGetInternalformativ;
  tbl.glGetInternalformati64v = gmock_glGetInternalformati64v;
  tbl.glInvalidateBufferData = gmock_glInvalidateBufferData;
  tbl.glInvalidateBufferSubData = gmock_glInvalidateBufferSubData;
  tbl.glInvalidateFramebuffer = gmock_glInvalidateFramebuffer;
  tbl.glInvalidateSubFramebuffer = gmock_glInvalidateSubFramebuffer;
  tbl.glInvalidateTexImage = gmock_glInvalidateTexImage;
  tbl.glInvalidateTexSubImage = gmock_glInvalidateTexSubImage;
  tbl.glFlushMappedBufferRange = gmock_glFlushMappedBufferRange;
  tbl.glMapBufferRange = gmock_glMapBufferRange;
  tbl.glCurrentPaletteMatrixARB = gmock_glCurrentPaletteMatrixARB;
  tbl.glMatrixIndexPointerARB = gmock_glMatrixIndexPointerARB;
  tbl.glMatrixIndexubvARB = gmock_glMatrixIndexubvARB;
  tbl.glMatrixIndexuivARB = gmock_glMatrixIndexuivARB;
  tbl.glMatrixIndexusvARB = gmock_glMatrixIndexusvARB;
  tbl.glMultiDrawArraysIndirect = gmock_glMultiDrawArraysIndirect;
  tbl.glMultiDrawElementsIndirect = gmock_glMultiDrawElementsIndirect;
  tbl.glSampleCoverageARB = gmock_glSampleCoverageARB;
  tbl.glActiveTextureARB = gmock_glActiveTextureARB;
  tbl.glClientActiveTextureARB = gmock_glClientActiveTextureARB;
  tbl.glMultiTexCoord1dARB = gmock_glMultiTexCoord1dARB;
  tbl.glMultiTexCoord1dvARB = gmock_glMultiTexCoord1dvARB;
  tbl.glMultiTexCoord1fARB = gmock_glMultiTexCoord1fARB;
  tbl.glMultiTexCoord1fvARB = gmock_glMultiTexCoord1fvARB;
  tbl.glMultiTexCoord1iARB = gmock_glMultiTexCoord1iARB;
  tbl.glMultiTexCoord1ivARB = gmock_glMultiTexCoord1ivARB;
  tbl.glMultiTexCoord1sARB = gmock_glMultiTexCoord1sARB;
  tbl.glMultiTexCoord1svARB = gmock_glMultiTexCoord1svARB;
  tbl.glMultiTexCoord2dARB = gmock_glMultiTexCoord2dARB;
  tbl.glMultiTexCoord2dvARB = gmock_glMultiTexCoord2dvARB;
  tbl.glMultiTexCoord2fARB = gmock_glMultiTexCoord2fARB;
  tbl.glMultiTexCoord2fvARB = gmock_glMultiTexCoord2fvARB;
  tbl.glMultiTexCoord2iARB = gmock_glMultiTexCoord2iARB;
  tbl.glMultiTexCoord2ivARB = gmock_glMultiTexCoord2ivARB;
  tbl.glMultiTexCoord2sARB = gmock_glMultiTexCoord2sARB;
  tbl.glMultiTexCoord2svARB = gmock_glMultiTexCoord2svARB;
  tbl.glMultiTexCoord3dARB = gmock_glMultiTexCoord3dARB;
  tbl.glMultiTexCoord3dvARB = gmock_glMultiTexCoord3dvARB;
  tbl.glMultiTexCoord3fARB = gmock_glMultiTexCoord3fARB;
  tbl.glMultiTexCoord3fvARB = gmock_glMultiTexCoord3fvARB;
  tbl.glMultiTexCoord3iARB = gmock_glMultiTexCoord3iARB;
  tbl.glMultiTexCoord3ivARB = gmock_glMultiTexCoord3ivARB;
  tbl.glMultiTexCoord3sARB = gmock_glMultiTexCoord3sARB;
  tbl.glMultiTexCoord3svARB = gmock_glMultiTexCoord3svARB;
  tbl.glMultiTexCoord4dARB = gmock_glMultiTexCoord4dARB;
  tbl.glMultiTexCoord4dvARB = gmock_glMultiTexCoord4dvARB;
  tbl.glMultiTexCoord4fARB = gmock_glMultiTexCoord4fARB;
  tbl.glMultiTexCoord4fvARB = gmock_glMultiTexCoord4fvARB;
  tbl.glMultiTexCoord4iARB = gmock_glMultiTexCoord4iARB;
  tbl.glMultiTexCoord4ivARB = gmock_glMultiTexCoord4ivARB;
  tbl.glMultiTexCoord4sARB = gmock_glMultiTexCoord4sARB;
  tbl.glMultiTexCoord4svARB = gmock_glMultiTexCoord4svARB;
  tbl.glBeginQueryARB = gmock_glBeginQueryARB;
  tbl.glDeleteQueriesARB = gmock_glDeleteQueriesARB;
  tbl.glEndQueryARB = gmock_glEndQueryARB;
  tbl.glGenQueriesARB = gmock_glGenQueriesARB;
  tbl.glGetQueryObjectivARB = gmock_glGetQueryObjectivARB;
  tbl.glGetQueryObjectuivARB = gmock_glGetQueryObjectuivARB;
  tbl.glGetQueryivARB = gmock_glGetQueryivARB;
  tbl.glIsQueryARB = gmock_glIsQueryARB;
  tbl.glPointParameterfARB = gmock_glPointParameterfARB;
  tbl.glPointParameterfvARB = gmock_glPointParameterfvARB;
  tbl.glGetProgramInterfaceiv = gmock_glGetProgramInterfaceiv;
  tbl.glGetProgramResourceIndex = gmock_glGetProgramResourceIndex;
  tbl.glGetProgramResourceLocation = gmock_glGetProgramResourceLocation;
  tbl.glGetProgramResourceLocationIndex = gmock_glGetProgramResourceLocationIndex;
  tbl.glGetProgramResourceName = gmock_glGetProgramResourceName;
  tbl.glGetProgramResourceiv = gmock_glGetProgramResourceiv;
  tbl.glProvokingVertex = gmock_glProvokingVertex;
  tbl.glGetGraphicsResetStatusARB = gmock_glGetGraphicsResetStatusARB;
  tbl.glGetnColorTableARB = gmock_glGetnColorTableARB;
  tbl.glGetnCompressedTexImageARB = gmock_glGetnCompressedTexImageARB;
  tbl.glGetnConvolutionFilterARB = gmock_glGetnConvolutionFilterARB;
  tbl.glGetnHistogramARB = gmock_glGetnHistogramARB;
  tbl.glGetnMapdvARB = gmock_glGetnMapdvARB;
  tbl.glGetnMapfvARB = gmock_glGetnMapfvARB;
  tbl.glGetnMapivARB = gmock_glGetnMapivARB;
  tbl.glGetnMinmaxARB = gmock_glGetnMinmaxARB;
  tbl.glGetnPixelMapfvARB = gmock_glGetnPixelMapfvARB;
  tbl.glGetnPixelMapuivARB = gmock_glGetnPixelMapuivARB;
  tbl.glGetnPixelMapusvARB = gmock_glGetnPixelMapusvARB;
  tbl.glGetnPolygonStippleARB = gmock_glGetnPolygonStippleARB;
  tbl.glGetnSeparableFilterARB = gmock_glGetnSeparableFilterARB;
  tbl.glGetnTexImageARB = gmock_glGetnTexImageARB;
  tbl.glGetnUniformdvARB = gmock_glGetnUniformdvARB;
  tbl.glGetnUniformfvARB = gmock_glGetnUniformfvARB;
  tbl.glGetnUniformivARB = gmock_glGetnUniformivARB;
  tbl.glGetnUniformuivARB = gmock_glGetnUniformuivARB;
  tbl.glReadnPixelsARB = gmock_glReadnPixelsARB;
  tbl.glMinSampleShading = gmock_glMinSampleShading;
  tbl.glMinSampleShadingARB = gmock_glMinSampleShadingARB;
  tbl.glBindSampler = gmock_glBindSampler;
  tbl.glDeleteSamplers = gmock_glDeleteSamplers;
  tbl.glGenSamplers = gmock_glGenSamplers;
  tbl.glGetSamplerParameterIiv = gmock_glGetSamplerParameterIiv;
  tbl.glGetSamplerParameterIuiv = gmock_glGetSamplerParameterIuiv;
  tbl.glGetSamplerParameterfv = gmock_glGetSamplerParameterfv;
  tbl.glGetSamplerParameteriv = gmock_glGetSamplerParameteriv;
  tbl.glIsSampler = gmock_glIsSampler;
  tbl.glSamplerParameterIiv = gmock_glSamplerParameterIiv;
  tbl.glSamplerParameterIuiv = gmock_glSamplerParameterIuiv;
  tbl.glSamplerParameterf = gmock_glSamplerParameterf;
  tbl.glSamplerParameterfv = gmock_glSamplerParameterfv;
  tbl.glSamplerParameteri = gmock_glSamplerParameteri;
  tbl.glSamplerParameteriv = gmock_glSamplerParameteriv;
  tbl.glActiveShaderProgram = gmock_glActiveShaderProgram;
  tbl.glBindProgramPipeline = gmock_glBindProgramPipeline;
  tbl.glCreateShaderProgramv = gmock_glCreateShaderProgramv;
  tbl.glDeleteProgramPipelines = gmock_glDeleteProgramPipelines;
  tbl.glGenProgramPipelines = gmock_glGenProgramPipelines;
  tbl.glGetProgramPipelineInfoLog = gmock_glGetProgramPipelineInfoLog;
  tbl.glGetProgramPipelineiv = gmock_glGetProgramPipelineiv;
  tbl.glIsProgramPipeline = gmock_glIsProgramPipeline;
  tbl.glProgramUniform1d = gmock_glProgramUniform1d;
  tbl.glProgramUniform1dv = gmock_glProgramUniform1dv;
  tbl.glProgramUniform1f = gmock_glProgramUniform1f;
  tbl.glProgramUniform1fv = gmock_glProgramUniform1fv;
  tbl.glProgramUniform1i = gmock_glProgramUniform1i;
  tbl.glProgramUniform1iv = gmock_glProgramUniform1iv;
  tbl.glProgramUniform1ui = gmock_glProgramUniform1ui;
  tbl.glProgramUniform1uiv = gmock_glProgramUniform1uiv;
  tbl.glProgramUniform2d = gmock_glProgramUniform2d;
  tbl.glProgramUniform2dv = gmock_glProgramUniform2dv;
  tbl.glProgramUniform2f = gmock_glProgramUniform2f;
  tbl.glProgramUniform2fv = gmock_glProgramUniform2fv;
  tbl.glProgramUniform2i = gmock_glProgramUniform2i;
  tbl.glProgramUniform2iv = gmock_glProgramUniform2iv;
  tbl.glProgramUniform2ui = gmock_glProgramUniform2ui;
  tbl.glProgramUniform2uiv = gmock_glProgramUniform2uiv;
  tbl.glProgramUniform3d = gmock_glProgramUniform3d;
  tbl.glProgramUniform3dv = gmock_glProgramUniform3dv;
  tbl.glProgramUniform3f = gmock_glProgramUniform3f;
  tbl.glProgramUniform3fv = gmock_glProgramUniform3fv;
  tbl.glProgramUniform3i = gmock_glProgramUniform3i;
  tbl.glProgramUniform3iv = gmock_glProgramUniform3iv;
  tbl.glProgramUniform3ui = gmock_glProgramUniform3ui;
  tbl.glProgramUniform3uiv = gmock_glProgramUniform3uiv;
  tbl.glProgramUniform4d = gmock_glProgramUniform4d;
  tbl.glProgramUniform4dv = gmock_glProgramUniform4dv;
  tbl.glProgramUniform4f = gmock_glProgramUniform4f;
  tbl.glProgramUniform4fv = gmock_glProgramUniform4fv;
  tbl.glProgramUniform4i = gmock_glProgramUniform4i;
  tbl.glProgramUniform4iv = gmock_glProgramUniform4iv;
  tbl.glProgramUniform4ui = gmock_glProgramUniform4ui;
  tbl.glProgramUniform4uiv = gmock_glProgramUniform4uiv;
  tbl.glProgramUniformMatrix2dv = gmock_glProgramUniformMatrix2dv;
  tbl.glProgramUniformMatrix2fv = gmock_glProgramUniformMatrix2fv;
  tbl.glProgramUniformMatrix2x3dv = gmock_glProgramUniformMatrix2x3dv;
  tbl.glProgramUniformMatrix2x3fv = gmock_glProgramUniformMatrix2x3fv;
  tbl.glProgramUniformMatrix2x4dv = gmock_glProgramUniformMatrix2x4dv;
  tbl.glProgramUniformMatrix2x4fv = gmock_glProgramUniformMatrix2x4fv;
  tbl.glProgramUniformMatrix3dv = gmock_glProgramUniformMatrix3dv;
  tbl.glProgramUniformMatrix3fv = gmock_glProgramUniformMatrix3fv;
  tbl.glProgramUniformMatrix3x2dv = gmock_glProgramUniformMatrix3x2dv;
  tbl.glProgramUniformMatrix3x2fv = gmock_glProgramUniformMatrix3x2fv;
  tbl.glProgramUniformMatrix3x4dv = gmock_glProgramUniformMatrix3x4dv;
  tbl.glProgramUniformMatrix3x4fv = gmock_glProgramUniformMatrix3x4fv;
  tbl.glProgramUniformMatrix4dv = gmock_glProgramUniformMatrix4dv;
  tbl.glProgramUniformMatrix4fv = gmock_glProgramUniformMatrix4fv;
  tbl.glProgramUniformMatrix4x2dv = gmock_glProgramUniformMatrix4x2dv;
  tbl.glProgramUniformMatrix4x2fv = gmock_glProgramUniformMatrix4x2fv;
  tbl.glProgramUniformMatrix4x3dv = gmock_glProgramUniformMatrix4x3dv;
  tbl.glProgramUniformMatrix4x3fv = gmock_glProgramUniformMatrix4x3fv;
  tbl.glUseProgramStages = gmock_glUseProgramStages;
  tbl.glValidateProgramPipeline = gmock_glValidateProgramPipeline;
  tbl.glGetActiveAtomicCounterBufferiv = gmock_glGetActiveAtomicCounterBufferiv;
  tbl.glBindImageTexture = gmock_glBindImageTexture;
  tbl.glMemoryBarrier = gmock_glMemoryBarrier;
  tbl.glAttachObjectARB = gmock_glAttachObjectARB;
  tbl.glCompileShaderARB = gmock_glCompileShaderARB;
  tbl.glCreateProgramObjectARB = gmock_glCreateProgramObjectARB;
  tbl.glCreateShaderObjectARB = gmock_glCreateShaderObjectARB;
  tbl.glDeleteObjectARB = gmock_glDeleteObjectARB;
  tbl.glDetachObjectARB = gmock_glDetachObjectARB;
  tbl.glGetActiveUniformARB = gmock_glGetActiveUniformARB;
  tbl.glGetAttachedObjectsARB = gmock_glGetAttachedObjectsARB;
  tbl.glGetHandleARB = gmock_glGetHandleARB;
  tbl.glGetInfoLogARB = gmock_glGetInfoLogARB;
  tbl.glGetObjectParameterfvARB = gmock_glGetObjectParameterfvARB;
  tbl.glGetObjectParameterivARB = gmock_glGetObjectParameterivARB;
  tbl.glGetShaderSourceARB = gmock_glGetShaderSourceARB;
  tbl.glGetUniformLocationARB = gmock_glGetUniformLocationARB;
  tbl.glGetUniformfvARB = gmock_glGetUniformfvARB;
  tbl.glGetUniformivARB = gmock_glGetUniformivARB;
  tbl.glLinkProgramARB = gmock_glLinkProgramARB;
  tbl.glShaderSourceARB = gmock_glShaderSourceARB;
  tbl.glUniform1fARB = gmock_glUniform1fARB;
  tbl.glUniform1fvARB = gmock_glUniform1fvARB;
  tbl.glUniform1iARB = gmock_glUniform1iARB;
  tbl.glUniform1ivARB = gmock_glUniform1ivARB;
  tbl.glUniform2fARB = gmock_glUniform2fARB;
  tbl.glUniform2fvARB = gmock_glUniform2fvARB;
  tbl.glUniform2iARB = gmock_glUniform2iARB;
  tbl.glUniform2ivARB = gmock_glUniform2ivARB;
  tbl.glUniform3fARB = gmock_glUniform3fARB;
  tbl.glUniform3fvARB = gmock_glUniform3fvARB;
  tbl.glUniform3iARB = gmock_glUniform3iARB;
  tbl.glUniform3ivARB = gmock_glUniform3ivARB;
  tbl.glUniform4fARB = gmock_glUniform4fARB;
  tbl.glUniform4fvARB = gmock_glUniform4fvARB;
  tbl.glUniform4iARB = gmock_glUniform4iARB;
  tbl.glUniform4ivARB = gmock_glUniform4ivARB;
  tbl.glUniformMatrix2fvARB = gmock_glUniformMatrix2fvARB;
  tbl.glUniformMatrix3fvARB = gmock_glUniformMatrix3fvARB;
  tbl.glUniformMatrix4fvARB = gmock_glUniformMatrix4fvARB;
  tbl.glUseProgramObjectARB = gmock_glUseProgramObjectARB;
  tbl.glValidateProgramARB = gmock_glValidateProgramARB;
  tbl.glShaderStorageBlockBinding = gmock_glShaderStorageBlockBinding;
  tbl.glGetActiveSubroutineName = gmock_glGetActiveSubroutineName;
  tbl.glGetActiveSubroutineUniformName = gmock_glGetActiveSubroutineUniformName;
  tbl.glGetActiveSubroutineUniformiv = gmock_glGetActiveSubroutineUniformiv;
  tbl.glGetProgramStageiv = gmock_glGetProgramStageiv;
  tbl.glGetSubroutineIndex = gmock_glGetSubroutineIndex;
  tbl.glGetSubroutineUniformLocation = gmock_glGetSubroutineUniformLocation;
  tbl.glGetUniformSubroutineuiv = gmock_glGetUniformSubroutineuiv;
  tbl.glUniformSubroutinesuiv = gmock_glUniformSubroutinesuiv;
  tbl.glCompileShaderIncludeARB = gmock_glCompileShaderIncludeARB;
  tbl.glDeleteNamedStringARB = gmock_glDeleteNamedStringARB;
  tbl.glGetNamedStringARB = gmock_glGetNamedStringARB;
  tbl.glGetNamedStringivARB = gmock_glGetNamedStringivARB;
  tbl.glIsNamedStringARB = gmock_glIsNamedStringARB;
  tbl.glNamedStringARB = gmock_glNamedStringARB;
  tbl.glClientWaitSync = gmock_glClientWaitSync;
  tbl.glDeleteSync = gmock_glDeleteSync;
  tbl.glFenceSync = gmock_glFenceSync;
  tbl.glGetInteger64v = gmock_glGetInteger64v;
  tbl.glGetSynciv = gmock_glGetSynciv;
  tbl.glIsSync = gmock_glIsSync;
  tbl.glWaitSync = gmock_glWaitSync;
  tbl.glPatchParameterfv = gmock_glPatchParameterfv;
  tbl.glPatchParameteri = gmock_glPatchParameteri;
  tbl.glTexBufferARB = gmock_glTexBufferARB;
  tbl.glTexBufferRange = gmock_glTexBufferRange;
  tbl.glTextureBufferRangeEXT = gmock_glTextureBufferRangeEXT;
  tbl.glCompressedTexImage1DARB = gmock_glCompressedTexImage1DARB;
  tbl.glCompressedTexImage2DARB = gmock_glCompressedTexImage2DARB;
  tbl.glCompressedTexImage3DARB = gmock_glCompressedTexImage3DARB;
  tbl.glCompressedTexSubImage1DARB = gmock_glCompressedTexSubImage1DARB;
  tbl.glCompressedTexSubImage2DARB = gmock_glCompressedTexSubImage2DARB;
  tbl.glCompressedTexSubImage3DARB = gmock_glCompressedTexSubImage3DARB;
  tbl.glGetCompressedTexImageARB = gmock_glGetCompressedTexImageARB;
  tbl.glGetMultisamplefv = gmock_glGetMultisamplefv;
  tbl.glSampleMaski = gmock_glSampleMaski;
  tbl.glTexImage2DMultisample = gmock_glTexImage2DMultisample;
  tbl.glTexImage3DMultisample = gmock_glTexImage3DMultisample;
  tbl.glTexStorage1D = gmock_glTexStorage1D;
  tbl.glTexStorage2D = gmock_glTexStorage2D;
  tbl.glTexStorage3D = gmock_glTexStorage3D;
  tbl.glTextureStorage1DEXT = gmock_glTextureStorage1DEXT;
  tbl.glTextureStorage2DEXT = gmock_glTextureStorage2DEXT;
  tbl.glTextureStorage3DEXT = gmock_glTextureStorage3DEXT;
  tbl.glTexStorage2DMultisample = gmock_glTexStorage2DMultisample;
  tbl.glTexStorage3DMultisample = gmock_glTexStorage3DMultisample;
  tbl.glTextureStorage2DMultisampleEXT = gmock_glTextureStorage2DMultisampleEXT;
  tbl.glTextureStorage3DMultisampleEXT = gmock_glTextureStorage3DMultisampleEXT;
  tbl.glTextureView = gmock_glTextureView;
  tbl.glGetQueryObjecti64v = gmock_glGetQueryObjecti64v;
  tbl.glGetQueryObjectui64v = gmock_glGetQueryObjectui64v;
  tbl.glQueryCounter = gmock_glQueryCounter;
  tbl.glBindTransformFeedback = gmock_glBindTransformFeedback;
  tbl.glDeleteTransformFeedbacks = gmock_glDeleteTransformFeedbacks;
  tbl.glDrawTransformFeedback = gmock_glDrawTransformFeedback;
  tbl.glGenTransformFeedbacks = gmock_glGenTransformFeedbacks;
  tbl.glIsTransformFeedback = gmock_glIsTransformFeedback;
  tbl.glPauseTransformFeedback = gmock_glPauseTransformFeedback;
  tbl.glResumeTransformFeedback = gmock_glResumeTransformFeedback;
  tbl.glBeginQueryIndexed = gmock_glBeginQueryIndexed;
  tbl.glDrawTransformFeedbackStream = gmock_glDrawTransformFeedbackStream;
  tbl.glEndQueryIndexed = gmock_glEndQueryIndexed;
  tbl.glGetQueryIndexediv = gmock_glGetQueryIndexediv;
  tbl.glDrawTransformFeedbackInstanced = gmock_glDrawTransformFeedbackInstanced;
  tbl.glDrawTransformFeedbackStreamInstanced = gmock_glDrawTransformFeedbackStreamInstanced;
  tbl.glLoadTransposeMatrixdARB = gmock_glLoadTransposeMatrixdARB;
  tbl.glLoadTransposeMatrixfARB = gmock_glLoadTransposeMatrixfARB;
  tbl.glMultTransposeMatrixdARB = gmock_glMultTransposeMatrixdARB;
  tbl.glMultTransposeMatrixfARB = gmock_glMultTransposeMatrixfARB;
  tbl.glBindBufferBase = gmock_glBindBufferBase;
  tbl.glBindBufferRange = gmock_glBindBufferRange;
  tbl.glGetActiveUniformBlockName = gmock_glGetActiveUniformBlockName;
  tbl.glGetActiveUniformBlockiv = gmock_glGetActiveUniformBlockiv;
  tbl.glGetActiveUniformName = gmock_glGetActiveUniformName;
  tbl.glGetActiveUniformsiv = gmock_glGetActiveUniformsiv;
  tbl.glGetIntegeri_v = gmock_glGetIntegeri_v;
  tbl.glGetUniformBlockIndex = gmock_glGetUniformBlockIndex;
  tbl.glGetUniformIndices = gmock_glGetUniformIndices;
  tbl.glUniformBlockBinding = gmock_glUniformBlockBinding;
  tbl.glBindVertexArray = gmock_glBindVertexArray;
  tbl.glDeleteVertexArrays = gmock_glDeleteVertexArrays;
  tbl.glGenVertexArrays = gmock_glGenVertexArrays;
  tbl.glIsVertexArray = gmock_glIsVertexArray;
  tbl.glGetVertexAttribLdv = gmock_glGetVertexAttribLdv;
  tbl.glVertexAttribL1d = gmock_glVertexAttribL1d;
  tbl.glVertexAttribL1dv = gmock_glVertexAttribL1dv;
  tbl.glVertexAttribL2d = gmock_glVertexAttribL2d;
  tbl.glVertexAttribL2dv = gmock_glVertexAttribL2dv;
  tbl.glVertexAttribL3d = gmock_glVertexAttribL3d;
  tbl.glVertexAttribL3dv = gmock_glVertexAttribL3dv;
  tbl.glVertexAttribL4d = gmock_glVertexAttribL4d;
  tbl.glVertexAttribL4dv = gmock_glVertexAttribL4dv;
  tbl.glVertexAttribLPointer = gmock_glVertexAttribLPointer;
  tbl.glBindVertexBuffer = gmock_glBindVertexBuffer;
  tbl.glVertexAttribBinding = gmock_glVertexAttribBinding;
  tbl.glVertexAttribFormat = gmock_glVertexAttribFormat;
  tbl.glVertexAttribIFormat = gmock_glVertexAttribIFormat;
  tbl.glVertexAttribLFormat = gmock_glVertexAttribLFormat;
  tbl.glVertexBindingDivisor = gmock_glVertexBindingDivisor;
  tbl.glVertexBlendARB = gmock_glVertexBlendARB;
  tbl.glWeightPointerARB = gmock_glWeightPointerARB;
  tbl.glWeightbvARB = gmock_glWeightbvARB;
  tbl.glWeightdvARB = gmock_glWeightdvARB;
  tbl.glWeightfvARB = gmock_glWeightfvARB;
  tbl.glWeightivARB = gmock_glWeightivARB;
  tbl.glWeightsvARB = gmock_glWeightsvARB;
  tbl.glWeightubvARB = gmock_glWeightubvARB;
  tbl.glWeightuivARB = gmock_glWeightuivARB;
  tbl.glWeightusvARB = gmock_glWeightusvARB;
  tbl.glBindBufferARB = gmock_glBindBufferARB;
  tbl.glBufferDataARB = gmock_glBufferDataARB;
  tbl.glBufferSubDataARB = gmock_glBufferSubDataARB;
  tbl.glDeleteBuffersARB = gmock_glDeleteBuffersARB;
  tbl.glGenBuffersARB = gmock_glGenBuffersARB;
  tbl.glGetBufferParameterivARB = gmock_glGetBufferParameterivARB;
  tbl.glGetBufferPointervARB = gmock_glGetBufferPointervARB;
  tbl.glGetBufferSubDataARB = gmock_glGetBufferSubDataARB;
  tbl.glIsBufferARB = gmock_glIsBufferARB;
  tbl.glMapBufferARB = gmock_glMapBufferARB;
  tbl.glUnmapBufferARB = gmock_glUnmapBufferARB;
  tbl.glBindProgramARB = gmock_glBindProgramARB;
  tbl.glDeleteProgramsARB = gmock_glDeleteProgramsARB;
  tbl.glDisableVertexAttribArrayARB = gmock_glDisableVertexAttribArrayARB;
  tbl.glEnableVertexAttribArrayARB = gmock_glEnableVertexAttribArrayARB;
  tbl.glGenProgramsARB = gmock_glGenProgramsARB;
  tbl.glGetProgramEnvParameterdvARB = gmock_glGetProgramEnvParameterdvARB;
  tbl.glGetProgramEnvParameterfvARB = gmock_glGetProgramEnvParameterfvARB;
  tbl.glGetProgramLocalParameterdvARB = gmock_glGetProgramLocalParameterdvARB;
  tbl.glGetProgramLocalParameterfvARB = gmock_glGetProgramLocalParameterfvARB;
  tbl.glGetProgramStringARB = gmock_glGetProgramStringARB;
  tbl.glGetProgramivARB = gmock_glGetProgramivARB;
  tbl.glGetVertexAttribPointervARB = gmock_glGetVertexAttribPointervARB;
  tbl.glGetVertexAttribdvARB = gmock_glGetVertexAttribdvARB;
  tbl.glGetVertexAttribfvARB = gmock_glGetVertexAttribfvARB;
  tbl.glGetVertexAttribivARB = gmock_glGetVertexAttribivARB;
  tbl.glIsProgramARB = gmock_glIsProgramARB;
  tbl.glProgramEnvParameter4dARB = gmock_glProgramEnvParameter4dARB;
  tbl.glProgramEnvParameter4dvARB = gmock_glProgramEnvParameter4dvARB;
  tbl.glProgramEnvParameter4fARB = gmock_glProgramEnvParameter4fARB;
  tbl.glProgramEnvParameter4fvARB = gmock_glProgramEnvParameter4fvARB;
  tbl.glProgramLocalParameter4dARB = gmock_glProgramLocalParameter4dARB;
  tbl.glProgramLocalParameter4dvARB = gmock_glProgramLocalParameter4dvARB;
  tbl.glProgramLocalParameter4fARB = gmock_glProgramLocalParameter4fARB;
  tbl.glProgramLocalParameter4fvARB = gmock_glProgramLocalParameter4fvARB;
  tbl.glProgramStringARB = gmock_glProgramStringARB;
  tbl.glVertexAttrib1dARB = gmock_glVertexAttrib1dARB;
  tbl.glVertexAttrib1dvARB = gmock_glVertexAttrib1dvARB;
  tbl.glVertexAttrib1fARB = gmock_glVertexAttrib1fARB;
  tbl.glVertexAttrib1fvARB = gmock_glVertexAttrib1fvARB;
  tbl.glVertexAttrib1sARB = gmock_glVertexAttrib1sARB;
  tbl.glVertexAttrib1svARB = gmock_glVertexAttrib1svARB;
  tbl.glVertexAttrib2dARB = gmock_glVertexAttrib2dARB;
  tbl.glVertexAttrib2dvARB = gmock_glVertexAttrib2dvARB;
  tbl.glVertexAttrib2fARB = gmock_glVertexAttrib2fARB;
  tbl.glVertexAttrib2fvARB = gmock_glVertexAttrib2fvARB;
  tbl.glVertexAttrib2sARB = gmock_glVertexAttrib2sARB;
  tbl.glVertexAttrib2svARB = gmock_glVertexAttrib2svARB;
  tbl.glVertexAttrib3dARB = gmock_glVertexAttrib3dARB;
  tbl.glVertexAttrib3dvARB = gmock_glVertexAttrib3dvARB;
  tbl.glVertexAttrib3fARB = gmock_glVertexAttrib3fARB;
  tbl.glVertexAttrib3fvARB = gmock_glVertexAttrib3fvARB;
  tbl.glVertexAttrib3sARB = gmock_glVertexAttrib3sARB;
  tbl.glVertexAttrib3svARB = gmock_glVertexAttrib3svARB;
  tbl.glVertexAttrib4NbvARB = gmock_glVertexAttrib4NbvARB;
  tbl.glVertexAttrib4NivARB = gmock_glVertexAttrib4NivARB;
  tbl.glVertexAttrib4NsvARB = gmock_glVertexAttrib4NsvARB;
  tbl.glVertexAttrib4NubARB = gmock_glVertexAttrib4NubARB;
  tbl.glVertexAttrib4NubvARB = gmock_glVertexAttrib4NubvARB;
  tbl.glVertexAttrib4NuivARB = gmock_glVertexAttrib4NuivARB;
  tbl.glVertexAttrib4NusvARB = gmock_glVertexAttrib4NusvARB;
  tbl.glVertexAttrib4bvARB = gmock_glVertexAttrib4bvARB;
  tbl.glVertexAttrib4dARB = gmock_glVertexAttrib4dARB;
  tbl.glVertexAttrib4dvARB = gmock_glVertexAttrib4dvARB;
  tbl.glVertexAttrib4fARB = gmock_glVertexAttrib4fARB;
  tbl.glVertexAttrib4fvARB = gmock_glVertexAttrib4fvARB;
  tbl.glVertexAttrib4ivARB = gmock_glVertexAttrib4ivARB;
  tbl.glVertexAttrib4sARB = gmock_glVertexAttrib4sARB;
  tbl.glVertexAttrib4svARB = gmock_glVertexAttrib4svARB;
  tbl.glVertexAttrib4ubvARB = gmock_glVertexAttrib4ubvARB;
  tbl.glVertexAttrib4uivARB = gmock_glVertexAttrib4uivARB;
  tbl.glVertexAttrib4usvARB = gmock_glVertexAttrib4usvARB;
  tbl.glVertexAttribPointerARB = gmock_glVertexAttribPointerARB;
  tbl.glBindAttribLocationARB = gmock_glBindAttribLocationARB;
  tbl.glGetActiveAttribARB = gmock_glGetActiveAttribARB;
  tbl.glGetAttribLocationARB = gmock_glGetAttribLocationARB;
  tbl.glColorP3ui = gmock_glColorP3ui;
  tbl.glColorP3uiv = gmock_glColorP3uiv;
  tbl.glColorP4ui = gmock_glColorP4ui;
  tbl.glColorP4uiv = gmock_glColorP4uiv;
  tbl.glMultiTexCoordP1ui = gmock_glMultiTexCoordP1ui;
  tbl.glMultiTexCoordP1uiv = gmock_glMultiTexCoordP1uiv;
  tbl.glMultiTexCoordP2ui = gmock_glMultiTexCoordP2ui;
  tbl.glMultiTexCoordP2uiv = gmock_glMultiTexCoordP2uiv;
  tbl.glMultiTexCoordP3ui = gmock_glMultiTexCoordP3ui;
  tbl.glMultiTexCoordP3uiv = gmock_glMultiTexCoordP3uiv;
  tbl.glMultiTexCoordP4ui = gmock_glMultiTexCoordP4ui;
  tbl.glMultiTexCoordP4uiv = gmock_glMultiTexCoordP4uiv;
  tbl.glNormalP3ui = gmock_glNormalP3ui;
  tbl.glNormalP3uiv = gmock_glNormalP3uiv;
  tbl.glSecondaryColorP3ui = gmock_glSecondaryColorP3ui;
  tbl.glSecondaryColorP3uiv = gmock_glSecondaryColorP3uiv;
  tbl.glTexCoordP1ui = gmock_glTexCoordP1ui;
  tbl.glTexCoordP1uiv = gmock_glTexCoordP1uiv;
  tbl.glTexCoordP2ui = gmock_glTexCoordP2ui;
  tbl.glTexCoordP2uiv = gmock_glTexCoordP2uiv;
  tbl.glTexCoordP3ui = gmock_glTexCoordP3ui;
  tbl.glTexCoordP3uiv = gmock_glTexCoordP3uiv;
  tbl.glTexCoordP4ui = gmock_glTexCoordP4ui;
  tbl.glTexCoordP4uiv = gmock_glTexCoordP4uiv;
  tbl.glVertexAttribP1ui = gmock_glVertexAttribP1ui;
  tbl.glVertexAttribP1uiv = gmock_glVertexAttribP1uiv;
  tbl.glVertexAttribP2ui = gmock_glVertexAttribP2ui;
  tbl.glVertexAttribP2uiv = gmock_glVertexAttribP2uiv;
  tbl.glVertexAttribP3ui = gmock_glVertexAttribP3ui;
  tbl.glVertexAttribP3uiv = gmock_glVertexAttribP3uiv;
  tbl.glVertexAttribP4ui = gmock_glVertexAttribP4ui;
  tbl.glVertexAttribP4uiv = gmock_glVertexAttribP4uiv;
  tbl.glVertexP2ui = gmock_glVertexP2ui;
  tbl.glVertexP2uiv = gmock_glVertexP2uiv;
  tbl.glVertexP3ui = gmock_glVertexP3ui;
  tbl.glVertexP3uiv = gmock_glVertexP3uiv;
  tbl.glVertexP4ui = gmock_glVertexP4ui;
  tbl.glVertexP4uiv = gmock_glVertexP4uiv;
  tbl.glDepthRangeArrayv = gmock_glDepthRangeArrayv;
  tbl.glDepthRangeIndexed = gmock_glDepthRangeIndexed;
  tbl.glGetDoublei_v = gmock_glGetDoublei_v;
  tbl.glGetFloati_v = gmock_glGetFloati_v;
  tbl.glScissorArrayv = gmock_glScissorArrayv;
  tbl.glScissorIndexed = gmock_glScissorIndexed;
  tbl.glScissorIndexedv = gmock_glScissorIndexedv;
  tbl.glViewportArrayv = gmock_glViewportArrayv;
  tbl.glViewportIndexedf = gmock_glViewportIndexedf;
  tbl.glViewportIndexedfv = gmock_glViewportIndexedfv;
  tbl.glWindowPos2dARB = gmock_glWindowPos2dARB;
  tbl.glWindowPos2dvARB = gmock_glWindowPos2dvARB;
  tbl.glWindowPos2fARB = gmock_glWindowPos2fARB;
  tbl.glWindowPos2fvARB = gmock_glWindowPos2fvARB;
  tbl.glWindowPos2iARB = gmock_glWindowPos2iARB;
  tbl.glWindowPos2ivARB = gmock_glWindowPos2ivARB;
  tbl.glWindowPos2sARB = gmock_glWindowPos2sARB;
  tbl.glWindowPos2svARB = gmock_glWindowPos2svARB;
  tbl.glWindowPos3dARB = gmock_glWindowPos3dARB;
  tbl.glWindowPos3dvARB = gmock_glWindowPos3dvARB;
  tbl.glWindowPos3fARB = gmock_glWindowPos3fARB;
  tbl.glWindowPos3fvARB = gmock_glWindowPos3fvARB;
  tbl.glWindowPos3iARB = gmock_glWindowPos3iARB;
  tbl.glWindowPos3ivARB = gmock_glWindowPos3ivARB;
  tbl.glWindowPos3sARB = gmock_glWindowPos3sARB;
  tbl.glWindowPos3svARB = gmock_glWindowPos3svARB;
  tbl.glDrawBuffersATI = gmock_glDrawBuffersATI;
  tbl.glDrawElementArrayATI = gmock_glDrawElementArrayATI;
  tbl.glDrawRangeElementArrayATI = gmock_glDrawRangeElementArrayATI;
  tbl.glElementPointerATI = gmock_glElementPointerATI;
  tbl.glGetTexBumpParameterfvATI = gmock_glGetTexBumpParameterfvATI;
  tbl.glGetTexBumpParameterivATI = gmock_glGetTexBumpParameterivATI;
  tbl.glTexBumpParameterfvATI = gmock_glTexBumpParameterfvATI;
  tbl.glTexBumpParameterivATI = gmock_glTexBumpParameterivATI;
  tbl.glAlphaFragmentOp1ATI = gmock_glAlphaFragmentOp1ATI;
  tbl.glAlphaFragmentOp2ATI = gmock_glAlphaFragmentOp2ATI;
  tbl.glAlphaFragmentOp3ATI = gmock_glAlphaFragmentOp3ATI;
  tbl.glBeginFragmentShaderATI = gmock_glBeginFragmentShaderATI;
  tbl.glBindFragmentShaderATI = gmock_glBindFragmentShaderATI;
  tbl.glColorFragmentOp1ATI = gmock_glColorFragmentOp1ATI;
  tbl.glColorFragmentOp2ATI = gmock_glColorFragmentOp2ATI;
  tbl.glColorFragmentOp3ATI = gmock_glColorFragmentOp3ATI;
  tbl.glDeleteFragmentShaderATI = gmock_glDeleteFragmentShaderATI;
  tbl.glEndFragmentShaderATI = gmock_glEndFragmentShaderATI;
  tbl.glGenFragmentShadersATI = gmock_glGenFragmentShadersATI;
  tbl.glPassTexCoordATI = gmock_glPassTexCoordATI;
  tbl.glSampleMapATI = gmock_glSampleMapATI;
  tbl.glSetFragmentShaderConstantATI = gmock_glSetFragmentShaderConstantATI;
  tbl.glMapObjectBufferATI = gmock_glMapObjectBufferATI;
  tbl.glUnmapObjectBufferATI = gmock_glUnmapObjectBufferATI;
  tbl.glPNTrianglesfATI = gmock_glPNTrianglesfATI;
  tbl.glPNTrianglesiATI = gmock_glPNTrianglesiATI;
  tbl.glStencilFuncSeparateATI = gmock_glStencilFuncSeparateATI;
  tbl.glStencilOpSeparateATI = gmock_glStencilOpSeparateATI;
  tbl.glArrayObjectATI = gmock_glArrayObjectATI;
  tbl.glFreeObjectBufferATI = gmock_glFreeObjectBufferATI;
  tbl.glGetArrayObjectfvATI = gmock_glGetArrayObjectfvATI;
  tbl.glGetArrayObjectivATI = gmock_glGetArrayObjectivATI;
  tbl.glGetObjectBufferfvATI = gmock_glGetObjectBufferfvATI;
  tbl.glGetObjectBufferivATI = gmock_glGetObjectBufferivATI;
  tbl.glGetVariantArrayObjectfvATI = gmock_glGetVariantArrayObjectfvATI;
  tbl.glGetVariantArrayObjectivATI = gmock_glGetVariantArrayObjectivATI;
  tbl.glIsObjectBufferATI = gmock_glIsObjectBufferATI;
  tbl.glNewObjectBufferATI = gmock_glNewObjectBufferATI;
  tbl.glUpdateObjectBufferATI = gmock_glUpdateObjectBufferATI;
  tbl.glVariantArrayObjectATI = gmock_glVariantArrayObjectATI;
  tbl.glGetVertexAttribArrayObjectfvATI = gmock_glGetVertexAttribArrayObjectfvATI;
  tbl.glGetVertexAttribArrayObjectivATI = gmock_glGetVertexAttribArrayObjectivATI;
  tbl.glVertexAttribArrayObjectATI = gmock_glVertexAttribArrayObjectATI;
  tbl.glClientActiveVertexStreamATI = gmock_glClientActiveVertexStreamATI;
  tbl.glNormalStream3bATI = gmock_glNormalStream3bATI;
  tbl.glNormalStream3bvATI = gmock_glNormalStream3bvATI;
  tbl.glNormalStream3dATI = gmock_glNormalStream3dATI;
  tbl.glNormalStream3dvATI = gmock_glNormalStream3dvATI;
  tbl.glNormalStream3fATI = gmock_glNormalStream3fATI;
  tbl.glNormalStream3fvATI = gmock_glNormalStream3fvATI;
  tbl.glNormalStream3iATI = gmock_glNormalStream3iATI;
  tbl.glNormalStream3ivATI = gmock_glNormalStream3ivATI;
  tbl.glNormalStream3sATI = gmock_glNormalStream3sATI;
  tbl.glNormalStream3svATI = gmock_glNormalStream3svATI;
  tbl.glVertexBlendEnvfATI = gmock_glVertexBlendEnvfATI;
  tbl.glVertexBlendEnviATI = gmock_glVertexBlendEnviATI;
  tbl.glVertexStream1dATI = gmock_glVertexStream1dATI;
  tbl.glVertexStream1dvATI = gmock_glVertexStream1dvATI;
  tbl.glVertexStream1fATI = gmock_glVertexStream1fATI;
  tbl.glVertexStream1fvATI = gmock_glVertexStream1fvATI;
  tbl.glVertexStream1iATI = gmock_glVertexStream1iATI;
  tbl.glVertexStream1ivATI = gmock_glVertexStream1ivATI;
  tbl.glVertexStream1sATI = gmock_glVertexStream1sATI;
  tbl.glVertexStream1svATI = gmock_glVertexStream1svATI;
  tbl.glVertexStream2dATI = gmock_glVertexStream2dATI;
  tbl.glVertexStream2dvATI = gmock_glVertexStream2dvATI;
  tbl.glVertexStream2fATI = gmock_glVertexStream2fATI;
  tbl.glVertexStream2fvATI = gmock_glVertexStream2fvATI;
  tbl.glVertexStream2iATI = gmock_glVertexStream2iATI;
  tbl.glVertexStream2ivATI = gmock_glVertexStream2ivATI;
  tbl.glVertexStream2sATI = gmock_glVertexStream2sATI;
  tbl.glVertexStream2svATI = gmock_glVertexStream2svATI;
  tbl.glVertexStream3dATI = gmock_glVertexStream3dATI;
  tbl.glVertexStream3dvATI = gmock_glVertexStream3dvATI;
  tbl.glVertexStream3fATI = gmock_glVertexStream3fATI;
  tbl.glVertexStream3fvATI = gmock_glVertexStream3fvATI;
  tbl.glVertexStream3iATI = gmock_glVertexStream3iATI;
  tbl.glVertexStream3ivATI = gmock_glVertexStream3ivATI;
  tbl.glVertexStream3sATI = gmock_glVertexStream3sATI;
  tbl.glVertexStream3svATI = gmock_glVertexStream3svATI;
  tbl.glVertexStream4dATI = gmock_glVertexStream4dATI;
  tbl.glVertexStream4dvATI = gmock_glVertexStream4dvATI;
  tbl.glVertexStream4fATI = gmock_glVertexStream4fATI;
  tbl.glVertexStream4fvATI = gmock_glVertexStream4fvATI;
  tbl.glVertexStream4iATI = gmock_glVertexStream4iATI;
  tbl.glVertexStream4ivATI = gmock_glVertexStream4ivATI;
  tbl.glVertexStream4sATI = gmock_glVertexStream4sATI;
  tbl.glVertexStream4svATI = gmock_glVertexStream4svATI;
  tbl.glGetUniformBufferSizeEXT = gmock_glGetUniformBufferSizeEXT;
  tbl.glGetUniformOffsetEXT = gmock_glGetUniformOffsetEXT;
  tbl.glUniformBufferEXT = gmock_glUniformBufferEXT;
  tbl.glBlendColorEXT = gmock_glBlendColorEXT;
  tbl.glBlendEquationSeparateEXT = gmock_glBlendEquationSeparateEXT;
  tbl.glBlendFuncSeparateEXT = gmock_glBlendFuncSeparateEXT;
  tbl.glBlendEquationEXT = gmock_glBlendEquationEXT;
  tbl.glColorSubTableEXT = gmock_glColorSubTableEXT;
  tbl.glCopyColorSubTableEXT = gmock_glCopyColorSubTableEXT;
  tbl.glLockArraysEXT = gmock_glLockArraysEXT;
  tbl.glUnlockArraysEXT = gmock_glUnlockArraysEXT;
  tbl.glConvolutionFilter1DEXT = gmock_glConvolutionFilter1DEXT;
  tbl.glConvolutionFilter2DEXT = gmock_glConvolutionFilter2DEXT;
  tbl.glConvolutionParameterfEXT = gmock_glConvolutionParameterfEXT;
  tbl.glConvolutionParameterfvEXT = gmock_glConvolutionParameterfvEXT;
  tbl.glConvolutionParameteriEXT = gmock_glConvolutionParameteriEXT;
  tbl.glConvolutionParameterivEXT = gmock_glConvolutionParameterivEXT;
  tbl.glCopyConvolutionFilter1DEXT = gmock_glCopyConvolutionFilter1DEXT;
  tbl.glCopyConvolutionFilter2DEXT = gmock_glCopyConvolutionFilter2DEXT;
  tbl.glGetConvolutionFilterEXT = gmock_glGetConvolutionFilterEXT;
  tbl.glGetConvolutionParameterfvEXT = gmock_glGetConvolutionParameterfvEXT;
  tbl.glGetConvolutionParameterivEXT = gmock_glGetConvolutionParameterivEXT;
  tbl.glGetSeparableFilterEXT = gmock_glGetSeparableFilterEXT;
  tbl.glSeparableFilter2DEXT = gmock_glSeparableFilter2DEXT;
  tbl.glBinormal3bEXT = gmock_glBinormal3bEXT;
  tbl.glBinormal3bvEXT = gmock_glBinormal3bvEXT;
  tbl.glBinormal3dEXT = gmock_glBinormal3dEXT;
  tbl.glBinormal3dvEXT = gmock_glBinormal3dvEXT;
  tbl.glBinormal3fEXT = gmock_glBinormal3fEXT;
  tbl.glBinormal3fvEXT = gmock_glBinormal3fvEXT;
  tbl.glBinormal3iEXT = gmock_glBinormal3iEXT;
  tbl.glBinormal3ivEXT = gmock_glBinormal3ivEXT;
  tbl.glBinormal3sEXT = gmock_glBinormal3sEXT;
  tbl.glBinormal3svEXT = gmock_glBinormal3svEXT;
  tbl.glBinormalPointerEXT = gmock_glBinormalPointerEXT;
  tbl.glTangent3bEXT = gmock_glTangent3bEXT;
  tbl.glTangent3bvEXT = gmock_glTangent3bvEXT;
  tbl.glTangent3dEXT = gmock_glTangent3dEXT;
  tbl.glTangent3dvEXT = gmock_glTangent3dvEXT;
  tbl.glTangent3fEXT = gmock_glTangent3fEXT;
  tbl.glTangent3fvEXT = gmock_glTangent3fvEXT;
  tbl.glTangent3iEXT = gmock_glTangent3iEXT;
  tbl.glTangent3ivEXT = gmock_glTangent3ivEXT;
  tbl.glTangent3sEXT = gmock_glTangent3sEXT;
  tbl.glTangent3svEXT = gmock_glTangent3svEXT;
  tbl.glTangentPointerEXT = gmock_glTangentPointerEXT;
  tbl.glCopyTexImage1DEXT = gmock_glCopyTexImage1DEXT;
  tbl.glCopyTexImage2DEXT = gmock_glCopyTexImage2DEXT;
  tbl.glCopyTexSubImage1DEXT = gmock_glCopyTexSubImage1DEXT;
  tbl.glCopyTexSubImage2DEXT = gmock_glCopyTexSubImage2DEXT;
  tbl.glCopyTexSubImage3DEXT = gmock_glCopyTexSubImage3DEXT;
  tbl.glCullParameterdvEXT = gmock_glCullParameterdvEXT;
  tbl.glCullParameterfvEXT = gmock_glCullParameterfvEXT;
  tbl.glGetObjectLabelEXT = gmock_glGetObjectLabelEXT;
  tbl.glLabelObjectEXT = gmock_glLabelObjectEXT;
  tbl.glInsertEventMarkerEXT = gmock_glInsertEventMarkerEXT;
  tbl.glPopGroupMarkerEXT = gmock_glPopGroupMarkerEXT;
  tbl.glPushGroupMarkerEXT = gmock_glPushGroupMarkerEXT;
  tbl.glDepthBoundsEXT = gmock_glDepthBoundsEXT;
  tbl.glBindMultiTextureEXT = gmock_glBindMultiTextureEXT;
  tbl.glCheckNamedFramebufferStatusEXT = gmock_glCheckNamedFramebufferStatusEXT;
  tbl.glClientAttribDefaultEXT = gmock_glClientAttribDefaultEXT;
  tbl.glCompressedMultiTexImage1DEXT = gmock_glCompressedMultiTexImage1DEXT;
  tbl.glCompressedMultiTexImage2DEXT = gmock_glCompressedMultiTexImage2DEXT;
  tbl.glCompressedMultiTexImage3DEXT = gmock_glCompressedMultiTexImage3DEXT;
  tbl.glCompressedMultiTexSubImage1DEXT = gmock_glCompressedMultiTexSubImage1DEXT;
  tbl.glCompressedMultiTexSubImage2DEXT = gmock_glCompressedMultiTexSubImage2DEXT;
  tbl.glCompressedMultiTexSubImage3DEXT = gmock_glCompressedMultiTexSubImage3DEXT;
  tbl.glCompressedTextureImage1DEXT = gmock_glCompressedTextureImage1DEXT;
  tbl.glCompressedTextureImage2DEXT = gmock_glCompressedTextureImage2DEXT;
  tbl.glCompressedTextureImage3DEXT = gmock_glCompressedTextureImage3DEXT;
  tbl.glCompressedTextureSubImage1DEXT = gmock_glCompressedTextureSubImage1DEXT;
  tbl.glCompressedTextureSubImage2DEXT = gmock_glCompressedTextureSubImage2DEXT;
  tbl.glCompressedTextureSubImage3DEXT = gmock_glCompressedTextureSubImage3DEXT;
  tbl.glCopyMultiTexImage1DEXT = gmock_glCopyMultiTexImage1DEXT;
  tbl.glCopyMultiTexImage2DEXT = gmock_glCopyMultiTexImage2DEXT;
  tbl.glCopyMultiTexSubImage1DEXT = gmock_glCopyMultiTexSubImage1DEXT;
  tbl.glCopyMultiTexSubImage2DEXT = gmock_glCopyMultiTexSubImage2DEXT;
  tbl.glCopyMultiTexSubImage3DEXT = gmock_glCopyMultiTexSubImage3DEXT;
  tbl.glCopyTextureImage1DEXT = gmock_glCopyTextureImage1DEXT;
  tbl.glCopyTextureImage2DEXT = gmock_glCopyTextureImage2DEXT;
  tbl.glCopyTextureSubImage1DEXT = gmock_glCopyTextureSubImage1DEXT;
  tbl.glCopyTextureSubImage2DEXT = gmock_glCopyTextureSubImage2DEXT;
  tbl.glCopyTextureSubImage3DEXT = gmock_glCopyTextureSubImage3DEXT;
  tbl.glDisableClientStateIndexedEXT = gmock_glDisableClientStateIndexedEXT;
  tbl.glDisableClientStateiEXT = gmock_glDisableClientStateiEXT;
  tbl.glDisableVertexArrayAttribEXT = gmock_glDisableVertexArrayAttribEXT;
  tbl.glDisableVertexArrayEXT = gmock_glDisableVertexArrayEXT;
  tbl.glEnableClientStateIndexedEXT = gmock_glEnableClientStateIndexedEXT;
  tbl.glEnableClientStateiEXT = gmock_glEnableClientStateiEXT;
  tbl.glEnableVertexArrayAttribEXT = gmock_glEnableVertexArrayAttribEXT;
  tbl.glEnableVertexArrayEXT = gmock_glEnableVertexArrayEXT;
  tbl.glFlushMappedNamedBufferRangeEXT = gmock_glFlushMappedNamedBufferRangeEXT;
  tbl.glFramebufferDrawBufferEXT = gmock_glFramebufferDrawBufferEXT;
  tbl.glFramebufferDrawBuffersEXT = gmock_glFramebufferDrawBuffersEXT;
  tbl.glFramebufferReadBufferEXT = gmock_glFramebufferReadBufferEXT;
  tbl.glGenerateMultiTexMipmapEXT = gmock_glGenerateMultiTexMipmapEXT;
  tbl.glGenerateTextureMipmapEXT = gmock_glGenerateTextureMipmapEXT;
  tbl.glGetCompressedMultiTexImageEXT = gmock_glGetCompressedMultiTexImageEXT;
  tbl.glGetCompressedTextureImageEXT = gmock_glGetCompressedTextureImageEXT;
  tbl.glGetDoubleIndexedvEXT = gmock_glGetDoubleIndexedvEXT;
  tbl.glGetDoublei_vEXT = gmock_glGetDoublei_vEXT;
  tbl.glGetFloatIndexedvEXT = gmock_glGetFloatIndexedvEXT;
  tbl.glGetFloati_vEXT = gmock_glGetFloati_vEXT;
  tbl.glGetFramebufferParameterivEXT = gmock_glGetFramebufferParameterivEXT;
  tbl.glGetMultiTexEnvfvEXT = gmock_glGetMultiTexEnvfvEXT;
  tbl.glGetMultiTexEnvivEXT = gmock_glGetMultiTexEnvivEXT;
  tbl.glGetMultiTexGendvEXT = gmock_glGetMultiTexGendvEXT;
  tbl.glGetMultiTexGenfvEXT = gmock_glGetMultiTexGenfvEXT;
  tbl.glGetMultiTexGenivEXT = gmock_glGetMultiTexGenivEXT;
  tbl.glGetMultiTexImageEXT = gmock_glGetMultiTexImageEXT;
  tbl.glGetMultiTexLevelParameterfvEXT = gmock_glGetMultiTexLevelParameterfvEXT;
  tbl.glGetMultiTexLevelParameterivEXT = gmock_glGetMultiTexLevelParameterivEXT;
  tbl.glGetMultiTexParameterIivEXT = gmock_glGetMultiTexParameterIivEXT;
  tbl.glGetMultiTexParameterIuivEXT = gmock_glGetMultiTexParameterIuivEXT;
  tbl.glGetMultiTexParameterfvEXT = gmock_glGetMultiTexParameterfvEXT;
  tbl.glGetMultiTexParameterivEXT = gmock_glGetMultiTexParameterivEXT;
  tbl.glGetNamedBufferParameterivEXT = gmock_glGetNamedBufferParameterivEXT;
  tbl.glGetNamedBufferPointervEXT = gmock_glGetNamedBufferPointervEXT;
  tbl.glGetNamedBufferSubDataEXT = gmock_glGetNamedBufferSubDataEXT;
  tbl.glGetNamedFramebufferAttachmentParameterivEXT = gmock_glGetNamedFramebufferAttachmentParameterivEXT;
  tbl.glGetNamedProgramLocalParameterIivEXT = gmock_glGetNamedProgramLocalParameterIivEXT;
  tbl.glGetNamedProgramLocalParameterIuivEXT = gmock_glGetNamedProgramLocalParameterIuivEXT;
  tbl.glGetNamedProgramLocalParameterdvEXT = gmock_glGetNamedProgramLocalParameterdvEXT;
  tbl.glGetNamedProgramLocalParameterfvEXT = gmock_glGetNamedProgramLocalParameterfvEXT;
  tbl.glGetNamedProgramStringEXT = gmock_glGetNamedProgramStringEXT;
  tbl.glGetNamedProgramivEXT = gmock_glGetNamedProgramivEXT;
  tbl.glGetNamedRenderbufferParameterivEXT = gmock_glGetNamedRenderbufferParameterivEXT;
  tbl.glGetPointerIndexedvEXT = gmock_glGetPointerIndexedvEXT;
  tbl.glGetPointeri_vEXT = gmock_glGetPointeri_vEXT;
  tbl.glGetTextureImageEXT = gmock_glGetTextureImageEXT;
  tbl.glGetTextureLevelParameterfvEXT = gmock_glGetTextureLevelParameterfvEXT;
  tbl.glGetTextureLevelParameterivEXT = gmock_glGetTextureLevelParameterivEXT;
  tbl.glGetTextureParameterIivEXT = gmock_glGetTextureParameterIivEXT;
  tbl.glGetTextureParameterIuivEXT = gmock_glGetTextureParameterIuivEXT;
  tbl.glGetTextureParameterfvEXT = gmock_glGetTextureParameterfvEXT;
  tbl.glGetTextureParameterivEXT = gmock_glGetTextureParameterivEXT;
  tbl.glGetVertexArrayIntegeri_vEXT = gmock_glGetVertexArrayIntegeri_vEXT;
  tbl.glGetVertexArrayIntegervEXT = gmock_glGetVertexArrayIntegervEXT;
  tbl.glGetVertexArrayPointeri_vEXT = gmock_glGetVertexArrayPointeri_vEXT;
  tbl.glGetVertexArrayPointervEXT = gmock_glGetVertexArrayPointervEXT;
  tbl.glMapNamedBufferEXT = gmock_glMapNamedBufferEXT;
  tbl.glMapNamedBufferRangeEXT = gmock_glMapNamedBufferRangeEXT;
  tbl.glMatrixFrustumEXT = gmock_glMatrixFrustumEXT;
  tbl.glMatrixLoadIdentityEXT = gmock_glMatrixLoadIdentityEXT;
  tbl.glMatrixLoadTransposedEXT = gmock_glMatrixLoadTransposedEXT;
  tbl.glMatrixLoadTransposefEXT = gmock_glMatrixLoadTransposefEXT;
  tbl.glMatrixLoaddEXT = gmock_glMatrixLoaddEXT;
  tbl.glMatrixLoadfEXT = gmock_glMatrixLoadfEXT;
  tbl.glMatrixMultTransposedEXT = gmock_glMatrixMultTransposedEXT;
  tbl.glMatrixMultTransposefEXT = gmock_glMatrixMultTransposefEXT;
  tbl.glMatrixMultdEXT = gmock_glMatrixMultdEXT;
  tbl.glMatrixMultfEXT = gmock_glMatrixMultfEXT;
  tbl.glMatrixOrthoEXT = gmock_glMatrixOrthoEXT;
  tbl.glMatrixPopEXT = gmock_glMatrixPopEXT;
  tbl.glMatrixPushEXT = gmock_glMatrixPushEXT;
  tbl.glMatrixRotatedEXT = gmock_glMatrixRotatedEXT;
  tbl.glMatrixRotatefEXT = gmock_glMatrixRotatefEXT;
  tbl.glMatrixScaledEXT = gmock_glMatrixScaledEXT;
  tbl.glMatrixScalefEXT = gmock_glMatrixScalefEXT;
  tbl.glMatrixTranslatedEXT = gmock_glMatrixTranslatedEXT;
  tbl.glMatrixTranslatefEXT = gmock_glMatrixTranslatefEXT;
  tbl.glMultiTexBufferEXT = gmock_glMultiTexBufferEXT;
  tbl.glMultiTexCoordPointerEXT = gmock_glMultiTexCoordPointerEXT;
  tbl.glMultiTexEnvfEXT = gmock_glMultiTexEnvfEXT;
  tbl.glMultiTexEnvfvEXT = gmock_glMultiTexEnvfvEXT;
  tbl.glMultiTexEnviEXT = gmock_glMultiTexEnviEXT;
  tbl.glMultiTexEnvivEXT = gmock_glMultiTexEnvivEXT;
  tbl.glMultiTexGendEXT = gmock_glMultiTexGendEXT;
  tbl.glMultiTexGendvEXT = gmock_glMultiTexGendvEXT;
  tbl.glMultiTexGenfEXT = gmock_glMultiTexGenfEXT;
  tbl.glMultiTexGenfvEXT = gmock_glMultiTexGenfvEXT;
  tbl.glMultiTexGeniEXT = gmock_glMultiTexGeniEXT;
  tbl.glMultiTexGenivEXT = gmock_glMultiTexGenivEXT;
  tbl.glMultiTexImage1DEXT = gmock_glMultiTexImage1DEXT;
  tbl.glMultiTexImage2DEXT = gmock_glMultiTexImage2DEXT;
  tbl.glMultiTexImage3DEXT = gmock_glMultiTexImage3DEXT;
  tbl.glMultiTexParameterIivEXT = gmock_glMultiTexParameterIivEXT;
  tbl.glMultiTexParameterIuivEXT = gmock_glMultiTexParameterIuivEXT;
  tbl.glMultiTexParameterfEXT = gmock_glMultiTexParameterfEXT;
  tbl.glMultiTexParameterfvEXT = gmock_glMultiTexParameterfvEXT;
  tbl.glMultiTexParameteriEXT = gmock_glMultiTexParameteriEXT;
  tbl.glMultiTexParameterivEXT = gmock_glMultiTexParameterivEXT;
  tbl.glMultiTexRenderbufferEXT = gmock_glMultiTexRenderbufferEXT;
  tbl.glMultiTexSubImage1DEXT = gmock_glMultiTexSubImage1DEXT;
  tbl.glMultiTexSubImage2DEXT = gmock_glMultiTexSubImage2DEXT;
  tbl.glMultiTexSubImage3DEXT = gmock_glMultiTexSubImage3DEXT;
  tbl.glNamedBufferDataEXT = gmock_glNamedBufferDataEXT;
  tbl.glNamedBufferSubDataEXT = gmock_glNamedBufferSubDataEXT;
  tbl.glNamedCopyBufferSubDataEXT = gmock_glNamedCopyBufferSubDataEXT;
  tbl.glNamedFramebufferRenderbufferEXT = gmock_glNamedFramebufferRenderbufferEXT;
  tbl.glNamedFramebufferTexture1DEXT = gmock_glNamedFramebufferTexture1DEXT;
  tbl.glNamedFramebufferTexture2DEXT = gmock_glNamedFramebufferTexture2DEXT;
  tbl.glNamedFramebufferTexture3DEXT = gmock_glNamedFramebufferTexture3DEXT;
  tbl.glNamedFramebufferTextureEXT = gmock_glNamedFramebufferTextureEXT;
  tbl.glNamedFramebufferTextureFaceEXT = gmock_glNamedFramebufferTextureFaceEXT;
  tbl.glNamedFramebufferTextureLayerEXT = gmock_glNamedFramebufferTextureLayerEXT;
  tbl.glNamedProgramLocalParameter4dEXT = gmock_glNamedProgramLocalParameter4dEXT;
  tbl.glNamedProgramLocalParameter4dvEXT = gmock_glNamedProgramLocalParameter4dvEXT;
  tbl.glNamedProgramLocalParameter4fEXT = gmock_glNamedProgramLocalParameter4fEXT;
  tbl.glNamedProgramLocalParameter4fvEXT = gmock_glNamedProgramLocalParameter4fvEXT;
  tbl.glNamedProgramLocalParameterI4iEXT = gmock_glNamedProgramLocalParameterI4iEXT;
  tbl.glNamedProgramLocalParameterI4ivEXT = gmock_glNamedProgramLocalParameterI4ivEXT;
  tbl.glNamedProgramLocalParameterI4uiEXT = gmock_glNamedProgramLocalParameterI4uiEXT;
  tbl.glNamedProgramLocalParameterI4uivEXT = gmock_glNamedProgramLocalParameterI4uivEXT;
  tbl.glNamedProgramLocalParameters4fvEXT = gmock_glNamedProgramLocalParameters4fvEXT;
  tbl.glNamedProgramLocalParametersI4ivEXT = gmock_glNamedProgramLocalParametersI4ivEXT;
  tbl.glNamedProgramLocalParametersI4uivEXT = gmock_glNamedProgramLocalParametersI4uivEXT;
  tbl.glNamedProgramStringEXT = gmock_glNamedProgramStringEXT;
  tbl.glNamedRenderbufferStorageEXT = gmock_glNamedRenderbufferStorageEXT;
  tbl.glNamedRenderbufferStorageMultisampleCoverageEXT = gmock_glNamedRenderbufferStorageMultisampleCoverageEXT;
  tbl.glNamedRenderbufferStorageMultisampleEXT = gmock_glNamedRenderbufferStorageMultisampleEXT;
  tbl.glProgramUniform1dEXT = gmock_glProgramUniform1dEXT;
  tbl.glProgramUniform1dvEXT = gmock_glProgramUniform1dvEXT;
  tbl.glProgramUniform1fEXT = gmock_glProgramUniform1fEXT;
  tbl.glProgramUniform1fvEXT = gmock_glProgramUniform1fvEXT;
  tbl.glProgramUniform1iEXT = gmock_glProgramUniform1iEXT;
  tbl.glProgramUniform1ivEXT = gmock_glProgramUniform1ivEXT;
  tbl.glProgramUniform1uiEXT = gmock_glProgramUniform1uiEXT;
  tbl.glProgramUniform1uivEXT = gmock_glProgramUniform1uivEXT;
  tbl.glProgramUniform2dEXT = gmock_glProgramUniform2dEXT;
  tbl.glProgramUniform2dvEXT = gmock_glProgramUniform2dvEXT;
  tbl.glProgramUniform2fEXT = gmock_glProgramUniform2fEXT;
  tbl.glProgramUniform2fvEXT = gmock_glProgramUniform2fvEXT;
  tbl.glProgramUniform2iEXT = gmock_glProgramUniform2iEXT;
  tbl.glProgramUniform2ivEXT = gmock_glProgramUniform2ivEXT;
  tbl.glProgramUniform2uiEXT = gmock_glProgramUniform2uiEXT;
  tbl.glProgramUniform2uivEXT = gmock_glProgramUniform2uivEXT;
  tbl.glProgramUniform3dEXT = gmock_glProgramUniform3dEXT;
  tbl.glProgramUniform3dvEXT = gmock_glProgramUniform3dvEXT;
  tbl.glProgramUniform3fEXT = gmock_glProgramUniform3fEXT;
  tbl.glProgramUniform3fvEXT = gmock_glProgramUniform3fvEXT;
  tbl.glProgramUniform3iEXT = gmock_glProgramUniform3iEXT;
  tbl.glProgramUniform3ivEXT = gmock_glProgramUniform3ivEXT;
  tbl.glProgramUniform3uiEXT = gmock_glProgramUniform3uiEXT;
  tbl.glProgramUniform3uivEXT = gmock_glProgramUniform3uivEXT;
  tbl.glProgramUniform4dEXT = gmock_glProgramUniform4dEXT;
  tbl.glProgramUniform4dvEXT = gmock_glProgramUniform4dvEXT;
  tbl.glProgramUniform4fEXT = gmock_glProgramUniform4fEXT;
  tbl.glProgramUniform4fvEXT = gmock_glProgramUniform4fvEXT;
  tbl.glProgramUniform4iEXT = gmock_glProgramUniform4iEXT;
  tbl.glProgramUniform4ivEXT = gmock_glProgramUniform4ivEXT;
  tbl.glProgramUniform4uiEXT = gmock_glProgramUniform4uiEXT;
  tbl.glProgramUniform4uivEXT = gmock_glProgramUniform4uivEXT;
  tbl.glProgramUniformMatrix2dvEXT = gmock_glProgramUniformMatrix2dvEXT;
  tbl.glProgramUniformMatrix2fvEXT = gmock_glProgramUniformMatrix2fvEXT;
  tbl.glProgramUniformMatrix2x3dvEXT = gmock_glProgramUniformMatrix2x3dvEXT;
  tbl.glProgramUniformMatrix2x3fvEXT = gmock_glProgramUniformMatrix2x3fvEXT;
  tbl.glProgramUniformMatrix2x4dvEXT = gmock_glProgramUniformMatrix2x4dvEXT;
  tbl.glProgramUniformMatrix2x4fvEXT = gmock_glProgramUniformMatrix2x4fvEXT;
  tbl.glProgramUniformMatrix3dvEXT = gmock_glProgramUniformMatrix3dvEXT;
  tbl.glProgramUniformMatrix3fvEXT = gmock_glProgramUniformMatrix3fvEXT;
  tbl.glProgramUniformMatrix3x2dvEXT = gmock_glProgramUniformMatrix3x2dvEXT;
  tbl.glProgramUniformMatrix3x2fvEXT = gmock_glProgramUniformMatrix3x2fvEXT;
  tbl.glProgramUniformMatrix3x4dvEXT = gmock_glProgramUniformMatrix3x4dvEXT;
  tbl.glProgramUniformMatrix3x4fvEXT = gmock_glProgramUniformMatrix3x4fvEXT;
  tbl.glProgramUniformMatrix4dvEXT = gmock_glProgramUniformMatrix4dvEXT;
  tbl.glProgramUniformMatrix4fvEXT = gmock_glProgramUniformMatrix4fvEXT;
  tbl.glProgramUniformMatrix4x2dvEXT = gmock_glProgramUniformMatrix4x2dvEXT;
  tbl.glProgramUniformMatrix4x2fvEXT = gmock_glProgramUniformMatrix4x2fvEXT;
  tbl.glProgramUniformMatrix4x3dvEXT = gmock_glProgramUniformMatrix4x3dvEXT;
  tbl.glProgramUniformMatrix4x3fvEXT = gmock_glProgramUniformMatrix4x3fvEXT;
  tbl.glPushClientAttribDefaultEXT = gmock_glPushClientAttribDefaultEXT;
  tbl.glTextureBufferEXT = gmock_glTextureBufferEXT;
  tbl.glTextureImage1DEXT = gmock_glTextureImage1DEXT;
  tbl.glTextureImage2DEXT = gmock_glTextureImage2DEXT;
  tbl.glTextureImage3DEXT = gmock_glTextureImage3DEXT;
  tbl.glTextureParameterIivEXT = gmock_glTextureParameterIivEXT;
  tbl.glTextureParameterIuivEXT = gmock_glTextureParameterIuivEXT;
  tbl.glTextureParameterfEXT = gmock_glTextureParameterfEXT;
  tbl.glTextureParameterfvEXT = gmock_glTextureParameterfvEXT;
  tbl.glTextureParameteriEXT = gmock_glTextureParameteriEXT;
  tbl.glTextureParameterivEXT = gmock_glTextureParameterivEXT;
  tbl.glTextureRenderbufferEXT = gmock_glTextureRenderbufferEXT;
  tbl.glTextureSubImage1DEXT = gmock_glTextureSubImage1DEXT;
  tbl.glTextureSubImage2DEXT = gmock_glTextureSubImage2DEXT;
  tbl.glTextureSubImage3DEXT = gmock_glTextureSubImage3DEXT;
  tbl.glUnmapNamedBufferEXT = gmock_glUnmapNamedBufferEXT;
  tbl.glVertexArrayColorOffsetEXT = gmock_glVertexArrayColorOffsetEXT;
  tbl.glVertexArrayEdgeFlagOffsetEXT = gmock_glVertexArrayEdgeFlagOffsetEXT;
  tbl.glVertexArrayFogCoordOffsetEXT = gmock_glVertexArrayFogCoordOffsetEXT;
  tbl.glVertexArrayIndexOffsetEXT = gmock_glVertexArrayIndexOffsetEXT;
  tbl.glVertexArrayMultiTexCoordOffsetEXT = gmock_glVertexArrayMultiTexCoordOffsetEXT;
  tbl.glVertexArrayNormalOffsetEXT = gmock_glVertexArrayNormalOffsetEXT;
  tbl.glVertexArraySecondaryColorOffsetEXT = gmock_glVertexArraySecondaryColorOffsetEXT;
  tbl.glVertexArrayTexCoordOffsetEXT = gmock_glVertexArrayTexCoordOffsetEXT;
  tbl.glVertexArrayVertexAttribIOffsetEXT = gmock_glVertexArrayVertexAttribIOffsetEXT;
  tbl.glVertexArrayVertexAttribOffsetEXT = gmock_glVertexArrayVertexAttribOffsetEXT;
  tbl.glVertexArrayVertexOffsetEXT = gmock_glVertexArrayVertexOffsetEXT;
  tbl.glDiscardFramebufferEXT = gmock_glDiscardFramebufferEXT;
  tbl.glColorMaskIndexedEXT = gmock_glColorMaskIndexedEXT;
  tbl.glDisableIndexedEXT = gmock_glDisableIndexedEXT;
  tbl.glEnableIndexedEXT = gmock_glEnableIndexedEXT;
  tbl.glGetBooleanIndexedvEXT = gmock_glGetBooleanIndexedvEXT;
  tbl.glGetIntegerIndexedvEXT = gmock_glGetIntegerIndexedvEXT;
  tbl.glIsEnabledIndexedEXT = gmock_glIsEnabledIndexedEXT;
  tbl.glDrawArraysInstancedEXT = gmock_glDrawArraysInstancedEXT;
  tbl.glDrawElementsInstancedEXT = gmock_glDrawElementsInstancedEXT;
  tbl.glDrawRangeElementsEXT = gmock_glDrawRangeElementsEXT;
  tbl.glFogCoordPointerEXT = gmock_glFogCoordPointerEXT;
  tbl.glFogCoorddEXT = gmock_glFogCoorddEXT;
  tbl.glFogCoorddvEXT = gmock_glFogCoorddvEXT;
  tbl.glFogCoordfEXT = gmock_glFogCoordfEXT;
  tbl.glFogCoordfvEXT = gmock_glFogCoordfvEXT;
  tbl.glFragmentColorMaterialEXT = gmock_glFragmentColorMaterialEXT;
  tbl.glFragmentLightModelfEXT = gmock_glFragmentLightModelfEXT;
  tbl.glFragmentLightModelfvEXT = gmock_glFragmentLightModelfvEXT;
  tbl.glFragmentLightModeliEXT = gmock_glFragmentLightModeliEXT;
  tbl.glFragmentLightModelivEXT = gmock_glFragmentLightModelivEXT;
  tbl.glFragmentLightfEXT = gmock_glFragmentLightfEXT;
  tbl.glFragmentLightfvEXT = gmock_glFragmentLightfvEXT;
  tbl.glFragmentLightiEXT = gmock_glFragmentLightiEXT;
  tbl.glFragmentLightivEXT = gmock_glFragmentLightivEXT;
  tbl.glFragmentMaterialfEXT = gmock_glFragmentMaterialfEXT;
  tbl.glFragmentMaterialfvEXT = gmock_glFragmentMaterialfvEXT;
  tbl.glFragmentMaterialiEXT = gmock_glFragmentMaterialiEXT;
  tbl.glFragmentMaterialivEXT = gmock_glFragmentMaterialivEXT;
  tbl.glGetFragmentLightfvEXT = gmock_glGetFragmentLightfvEXT;
  tbl.glGetFragmentLightivEXT = gmock_glGetFragmentLightivEXT;
  tbl.glGetFragmentMaterialfvEXT = gmock_glGetFragmentMaterialfvEXT;
  tbl.glGetFragmentMaterialivEXT = gmock_glGetFragmentMaterialivEXT;
  tbl.glLightEnviEXT = gmock_glLightEnviEXT;
  tbl.glBlitFramebufferEXT = gmock_glBlitFramebufferEXT;
  tbl.glRenderbufferStorageMultisampleEXT = gmock_glRenderbufferStorageMultisampleEXT;
  tbl.glBindFramebufferEXT = gmock_glBindFramebufferEXT;
  tbl.glBindRenderbufferEXT = gmock_glBindRenderbufferEXT;
  tbl.glCheckFramebufferStatusEXT = gmock_glCheckFramebufferStatusEXT;
  tbl.glDeleteFramebuffersEXT = gmock_glDeleteFramebuffersEXT;
  tbl.glDeleteRenderbuffersEXT = gmock_glDeleteRenderbuffersEXT;
  tbl.glFramebufferRenderbufferEXT = gmock_glFramebufferRenderbufferEXT;
  tbl.glFramebufferTexture1DEXT = gmock_glFramebufferTexture1DEXT;
  tbl.glFramebufferTexture2DEXT = gmock_glFramebufferTexture2DEXT;
  tbl.glFramebufferTexture3DEXT = gmock_glFramebufferTexture3DEXT;
  tbl.glGenFramebuffersEXT = gmock_glGenFramebuffersEXT;
  tbl.glGenRenderbuffersEXT = gmock_glGenRenderbuffersEXT;
  tbl.glGenerateMipmapEXT = gmock_glGenerateMipmapEXT;
  tbl.glGetFramebufferAttachmentParameterivEXT = gmock_glGetFramebufferAttachmentParameterivEXT;
  tbl.glGetRenderbufferParameterivEXT = gmock_glGetRenderbufferParameterivEXT;
  tbl.glIsFramebufferEXT = gmock_glIsFramebufferEXT;
  tbl.glIsRenderbufferEXT = gmock_glIsRenderbufferEXT;
  tbl.glRenderbufferStorageEXT = gmock_glRenderbufferStorageEXT;
  tbl.glFramebufferTextureEXT = gmock_glFramebufferTextureEXT;
  tbl.glFramebufferTextureFaceEXT = gmock_glFramebufferTextureFaceEXT;
  tbl.glProgramParameteriEXT = gmock_glProgramParameteriEXT;
  tbl.glProgramEnvParameters4fvEXT = gmock_glProgramEnvParameters4fvEXT;
  tbl.glProgramLocalParameters4fvEXT = gmock_glProgramLocalParameters4fvEXT;
  tbl.glBindFragDataLocationEXT = gmock_glBindFragDataLocationEXT;
  tbl.glGetFragDataLocationEXT = gmock_glGetFragDataLocationEXT;
  tbl.glGetUniformuivEXT = gmock_glGetUniformuivEXT;
  tbl.glGetVertexAttribIivEXT = gmock_glGetVertexAttribIivEXT;
  tbl.glGetVertexAttribIuivEXT = gmock_glGetVertexAttribIuivEXT;
  tbl.glUniform1uiEXT = gmock_glUniform1uiEXT;
  tbl.glUniform1uivEXT = gmock_glUniform1uivEXT;
  tbl.glUniform2uiEXT = gmock_glUniform2uiEXT;
  tbl.glUniform2uivEXT = gmock_glUniform2uivEXT;
  tbl.glUniform3uiEXT = gmock_glUniform3uiEXT;
  tbl.glUniform3uivEXT = gmock_glUniform3uivEXT;
  tbl.glUniform4uiEXT = gmock_glUniform4uiEXT;
  tbl.glUniform4uivEXT = gmock_glUniform4uivEXT;
  tbl.glVertexAttribI1iEXT = gmock_glVertexAttribI1iEXT;
  tbl.glVertexAttribI1ivEXT = gmock_glVertexAttribI1ivEXT;
  tbl.glVertexAttribI1uiEXT = gmock_glVertexAttribI1uiEXT;
  tbl.glVertexAttribI1uivEXT = gmock_glVertexAttribI1uivEXT;
  tbl.glVertexAttribI2iEXT = gmock_glVertexAttribI2iEXT;
  tbl.glVertexAttribI2ivEXT = gmock_glVertexAttribI2ivEXT;
  tbl.glVertexAttribI2uiEXT = gmock_glVertexAttribI2uiEXT;
  tbl.glVertexAttribI2uivEXT = gmock_glVertexAttribI2uivEXT;
  tbl.glVertexAttribI3iEXT = gmock_glVertexAttribI3iEXT;
  tbl.glVertexAttribI3ivEXT = gmock_glVertexAttribI3ivEXT;
  tbl.glVertexAttribI3uiEXT = gmock_glVertexAttribI3uiEXT;
  tbl.glVertexAttribI3uivEXT = gmock_glVertexAttribI3uivEXT;
  tbl.glVertexAttribI4bvEXT = gmock_glVertexAttribI4bvEXT;
  tbl.glVertexAttribI4iEXT = gmock_glVertexAttribI4iEXT;
  tbl.glVertexAttribI4ivEXT = gmock_glVertexAttribI4ivEXT;
  tbl.glVertexAttribI4svEXT = gmock_glVertexAttribI4svEXT;
  tbl.glVertexAttribI4ubvEXT = gmock_glVertexAttribI4ubvEXT;
  tbl.glVertexAttribI4uiEXT = gmock_glVertexAttribI4uiEXT;
  tbl.glVertexAttribI4uivEXT = gmock_glVertexAttribI4uivEXT;
  tbl.glVertexAttribI4usvEXT = gmock_glVertexAttribI4usvEXT;
  tbl.glVertexAttribIPointerEXT = gmock_glVertexAttribIPointerEXT;
  tbl.glGetHistogramEXT = gmock_glGetHistogramEXT;
  tbl.glGetHistogramParameterfvEXT = gmock_glGetHistogramParameterfvEXT;
  tbl.glGetHistogramParameterivEXT = gmock_glGetHistogramParameterivEXT;
  tbl.glGetMinmaxEXT = gmock_glGetMinmaxEXT;
  tbl.glGetMinmaxParameterfvEXT = gmock_glGetMinmaxParameterfvEXT;
  tbl.glGetMinmaxParameterivEXT = gmock_glGetMinmaxParameterivEXT;
  tbl.glHistogramEXT = gmock_glHistogramEXT;
  tbl.glMinmaxEXT = gmock_glMinmaxEXT;
  tbl.glResetHistogramEXT = gmock_glResetHistogramEXT;
  tbl.glResetMinmaxEXT = gmock_glResetMinmaxEXT;
  tbl.glIndexFuncEXT = gmock_glIndexFuncEXT;
  tbl.glIndexMaterialEXT = gmock_glIndexMaterialEXT;
  tbl.glApplyTextureEXT = gmock_glApplyTextureEXT;
  tbl.glTextureLightEXT = gmock_glTextureLightEXT;
  tbl.glTextureMaterialEXT = gmock_glTextureMaterialEXT;
  tbl.glFlushMappedBufferRangeEXT = gmock_glFlushMappedBufferRangeEXT;
  tbl.glMapBufferRangeEXT = gmock_glMapBufferRangeEXT;
  tbl.glMultiDrawArraysEXT = gmock_glMultiDrawArraysEXT;
  tbl.glMultiDrawElementsEXT = gmock_glMultiDrawElementsEXT;
  tbl.glSampleMaskEXT = gmock_glSampleMaskEXT;
  tbl.glSamplePatternEXT = gmock_glSamplePatternEXT;
  tbl.glFramebufferTexture2DMultisampleEXT = gmock_glFramebufferTexture2DMultisampleEXT;
  tbl.glDrawBuffersIndexedEXT = gmock_glDrawBuffersIndexedEXT;
  tbl.glGetIntegeri_vEXT = gmock_glGetIntegeri_vEXT;
  tbl.glReadBufferIndexedEXT = gmock_glReadBufferIndexedEXT;
  tbl.glBeginQueryEXT = gmock_glBeginQueryEXT;
  tbl.glDeleteQueriesEXT = gmock_glDeleteQueriesEXT;
  tbl.glEndQueryEXT = gmock_glEndQueryEXT;
  tbl.glGenQueriesEXT = gmock_glGenQueriesEXT;
  tbl.glGetQueryObjectuivEXT = gmock_glGetQueryObjectuivEXT;
  tbl.glGetQueryivEXT = gmock_glGetQueryivEXT;
  tbl.glIsQueryEXT = gmock_glIsQueryEXT;
  tbl.glColorTableEXT = gmock_glColorTableEXT;
  tbl.glGetColorTableEXT = gmock_glGetColorTableEXT;
  tbl.glGetColorTableParameterfvEXT = gmock_glGetColorTableParameterfvEXT;
  tbl.glGetColorTableParameterivEXT = gmock_glGetColorTableParameterivEXT;
  tbl.glGetPixelTransformParameterfvEXT = gmock_glGetPixelTransformParameterfvEXT;
  tbl.glGetPixelTransformParameterivEXT = gmock_glGetPixelTransformParameterivEXT;
  tbl.glPixelTransformParameterfEXT = gmock_glPixelTransformParameterfEXT;
  tbl.glPixelTransformParameterfvEXT = gmock_glPixelTransformParameterfvEXT;
  tbl.glPixelTransformParameteriEXT = gmock_glPixelTransformParameteriEXT;
  tbl.glPixelTransformParameterivEXT = gmock_glPixelTransformParameterivEXT;
  tbl.glPointParameterfEXT = gmock_glPointParameterfEXT;
  tbl.glPointParameterfvEXT = gmock_glPointParameterfvEXT;
  tbl.glPolygonOffsetEXT = gmock_glPolygonOffsetEXT;
  tbl.glProvokingVertexEXT = gmock_glProvokingVertexEXT;
  tbl.glGetnUniformfvEXT = gmock_glGetnUniformfvEXT;
  tbl.glGetnUniformivEXT = gmock_glGetnUniformivEXT;
  tbl.glReadnPixelsEXT = gmock_glReadnPixelsEXT;
  tbl.glBeginSceneEXT = gmock_glBeginSceneEXT;
  tbl.glEndSceneEXT = gmock_glEndSceneEXT;
  tbl.glSecondaryColor3bEXT = gmock_glSecondaryColor3bEXT;
  tbl.glSecondaryColor3bvEXT = gmock_glSecondaryColor3bvEXT;
  tbl.glSecondaryColor3dEXT = gmock_glSecondaryColor3dEXT;
  tbl.glSecondaryColor3dvEXT = gmock_glSecondaryColor3dvEXT;
  tbl.glSecondaryColor3fEXT = gmock_glSecondaryColor3fEXT;
  tbl.glSecondaryColor3fvEXT = gmock_glSecondaryColor3fvEXT;
  tbl.glSecondaryColor3iEXT = gmock_glSecondaryColor3iEXT;
  tbl.glSecondaryColor3ivEXT = gmock_glSecondaryColor3ivEXT;
  tbl.glSecondaryColor3sEXT = gmock_glSecondaryColor3sEXT;
  tbl.glSecondaryColor3svEXT = gmock_glSecondaryColor3svEXT;
  tbl.glSecondaryColor3ubEXT = gmock_glSecondaryColor3ubEXT;
  tbl.glSecondaryColor3ubvEXT = gmock_glSecondaryColor3ubvEXT;
  tbl.glSecondaryColor3uiEXT = gmock_glSecondaryColor3uiEXT;
  tbl.glSecondaryColor3uivEXT = gmock_glSecondaryColor3uivEXT;
  tbl.glSecondaryColor3usEXT = gmock_glSecondaryColor3usEXT;
  tbl.glSecondaryColor3usvEXT = gmock_glSecondaryColor3usvEXT;
  tbl.glSecondaryColorPointerEXT = gmock_glSecondaryColorPointerEXT;
  tbl.glActiveProgramEXT = gmock_glActiveProgramEXT;
  tbl.glCreateShaderProgramEXT = gmock_glCreateShaderProgramEXT;
  tbl.glUseShaderProgramEXT = gmock_glUseShaderProgramEXT;
  tbl.glBindImageTextureEXT = gmock_glBindImageTextureEXT;
  tbl.glMemoryBarrierEXT = gmock_glMemoryBarrierEXT;
  tbl.glStencilClearTagEXT = gmock_glStencilClearTagEXT;
  tbl.glActiveStencilFaceEXT = gmock_glActiveStencilFaceEXT;
  tbl.glTexSubImage1DEXT = gmock_glTexSubImage1DEXT;
  tbl.glTexSubImage2DEXT = gmock_glTexSubImage2DEXT;
  tbl.glTexSubImage3DEXT = gmock_glTexSubImage3DEXT;
  tbl.glTexImage3DEXT = gmock_glTexImage3DEXT;
  tbl.glFramebufferTextureLayerEXT = gmock_glFramebufferTextureLayerEXT;
  tbl.glTexBufferEXT = gmock_glTexBufferEXT;
  tbl.glClearColorIiEXT = gmock_glClearColorIiEXT;
  tbl.glClearColorIuiEXT = gmock_glClearColorIuiEXT;
  tbl.glGetTexParameterIivEXT = gmock_glGetTexParameterIivEXT;
  tbl.glGetTexParameterIuivEXT = gmock_glGetTexParameterIuivEXT;
  tbl.glTexParameterIivEXT = gmock_glTexParameterIivEXT;
  tbl.glTexParameterIuivEXT = gmock_glTexParameterIuivEXT;
  tbl.glAreTexturesResidentEXT = gmock_glAreTexturesResidentEXT;
  tbl.glBindTextureEXT = gmock_glBindTextureEXT;
  tbl.glDeleteTexturesEXT = gmock_glDeleteTexturesEXT;
  tbl.glGenTexturesEXT = gmock_glGenTexturesEXT;
  tbl.glIsTextureEXT = gmock_glIsTextureEXT;
  tbl.glPrioritizeTexturesEXT = gmock_glPrioritizeTexturesEXT;
  tbl.glTextureNormalEXT = gmock_glTextureNormalEXT;
  tbl.glTexStorage1DEXT = gmock_glTexStorage1DEXT;
  tbl.glTexStorage2DEXT = gmock_glTexStorage2DEXT;
  tbl.glTexStorage3DEXT = gmock_glTexStorage3DEXT;
  tbl.glGetQueryObjecti64vEXT = gmock_glGetQueryObjecti64vEXT;
  tbl.glGetQueryObjectui64vEXT = gmock_glGetQueryObjectui64vEXT;
  tbl.glBeginTransformFeedbackEXT = gmock_glBeginTransformFeedbackEXT;
  tbl.glBindBufferBaseEXT = gmock_glBindBufferBaseEXT;
  tbl.glBindBufferOffsetEXT = gmock_glBindBufferOffsetEXT;
  tbl.glBindBufferRangeEXT = gmock_glBindBufferRangeEXT;
  tbl.glEndTransformFeedbackEXT = gmock_glEndTransformFeedbackEXT;
  tbl.glGetTransformFeedbackVaryingEXT = gmock_glGetTransformFeedbackVaryingEXT;
  tbl.glTransformFeedbackVaryingsEXT = gmock_glTransformFeedbackVaryingsEXT;
  tbl.glArrayElementEXT = gmock_glArrayElementEXT;
  tbl.glColorPointerEXT = gmock_glColorPointerEXT;
  tbl.glDrawArraysEXT = gmock_glDrawArraysEXT;
  tbl.glEdgeFlagPointerEXT = gmock_glEdgeFlagPointerEXT;
  tbl.glGetPointervEXT = gmock_glGetPointervEXT;
  tbl.glIndexPointerEXT = gmock_glIndexPointerEXT;
  tbl.glNormalPointerEXT = gmock_glNormalPointerEXT;
  tbl.glTexCoordPointerEXT = gmock_glTexCoordPointerEXT;
  tbl.glVertexPointerEXT = gmock_glVertexPointerEXT;
  tbl.glGetVertexAttribLdvEXT = gmock_glGetVertexAttribLdvEXT;
  tbl.glVertexArrayVertexAttribLOffsetEXT = gmock_glVertexArrayVertexAttribLOffsetEXT;
  tbl.glVertexAttribL1dEXT = gmock_glVertexAttribL1dEXT;
  tbl.glVertexAttribL1dvEXT = gmock_glVertexAttribL1dvEXT;
  tbl.glVertexAttribL2dEXT = gmock_glVertexAttribL2dEXT;
  tbl.glVertexAttribL2dvEXT = gmock_glVertexAttribL2dvEXT;
  tbl.glVertexAttribL3dEXT = gmock_glVertexAttribL3dEXT;
  tbl.glVertexAttribL3dvEXT = gmock_glVertexAttribL3dvEXT;
  tbl.glVertexAttribL4dEXT = gmock_glVertexAttribL4dEXT;
  tbl.glVertexAttribL4dvEXT = gmock_glVertexAttribL4dvEXT;
  tbl.glVertexAttribLPointerEXT = gmock_glVertexAttribLPointerEXT;
  tbl.glBeginVertexShaderEXT = gmock_glBeginVertexShaderEXT;
  tbl.glBindLightParameterEXT = gmock_glBindLightParameterEXT;
  tbl.glBindMaterialParameterEXT = gmock_glBindMaterialParameterEXT;
  tbl.glBindParameterEXT = gmock_glBindParameterEXT;
  tbl.glBindTexGenParameterEXT = gmock_glBindTexGenParameterEXT;
  tbl.glBindTextureUnitParameterEXT = gmock_glBindTextureUnitParameterEXT;
  tbl.glBindVertexShaderEXT = gmock_glBindVertexShaderEXT;
  tbl.glDeleteVertexShaderEXT = gmock_glDeleteVertexShaderEXT;
  tbl.glDisableVariantClientStateEXT = gmock_glDisableVariantClientStateEXT;
  tbl.glEnableVariantClientStateEXT = gmock_glEnableVariantClientStateEXT;
  tbl.glEndVertexShaderEXT = gmock_glEndVertexShaderEXT;
  tbl.glExtractComponentEXT = gmock_glExtractComponentEXT;
  tbl.glGenSymbolsEXT = gmock_glGenSymbolsEXT;
  tbl.glGenVertexShadersEXT = gmock_glGenVertexShadersEXT;
  tbl.glGetInvariantBooleanvEXT = gmock_glGetInvariantBooleanvEXT;
  tbl.glGetInvariantFloatvEXT = gmock_glGetInvariantFloatvEXT;
  tbl.glGetInvariantIntegervEXT = gmock_glGetInvariantIntegervEXT;
  tbl.glGetLocalConstantBooleanvEXT = gmock_glGetLocalConstantBooleanvEXT;
  tbl.glGetLocalConstantFloatvEXT = gmock_glGetLocalConstantFloatvEXT;
  tbl.glGetLocalConstantIntegervEXT = gmock_glGetLocalConstantIntegervEXT;
  tbl.glGetVariantBooleanvEXT = gmock_glGetVariantBooleanvEXT;
  tbl.glGetVariantFloatvEXT = gmock_glGetVariantFloatvEXT;
  tbl.glGetVariantIntegervEXT = gmock_glGetVariantIntegervEXT;
  tbl.glGetVariantPointervEXT = gmock_glGetVariantPointervEXT;
  tbl.glInsertComponentEXT = gmock_glInsertComponentEXT;
  tbl.glIsVariantEnabledEXT = gmock_glIsVariantEnabledEXT;
  tbl.glSetInvariantEXT = gmock_glSetInvariantEXT;
  tbl.glSetLocalConstantEXT = gmock_glSetLocalConstantEXT;
  tbl.glShaderOp1EXT = gmock_glShaderOp1EXT;
  tbl.glShaderOp2EXT = gmock_glShaderOp2EXT;
  tbl.glShaderOp3EXT = gmock_glShaderOp3EXT;
  tbl.glSwizzleEXT = gmock_glSwizzleEXT;
  tbl.glVariantPointerEXT = gmock_glVariantPointerEXT;
  tbl.glVariantbvEXT = gmock_glVariantbvEXT;
  tbl.glVariantdvEXT = gmock_glVariantdvEXT;
  tbl.glVariantfvEXT = gmock_glVariantfvEXT;
  tbl.glVariantivEXT = gmock_glVariantivEXT;
  tbl.glVariantsvEXT = gmock_glVariantsvEXT;
  tbl.glVariantubvEXT = gmock_glVariantubvEXT;
  tbl.glVariantuivEXT = gmock_glVariantuivEXT;
  tbl.glVariantusvEXT = gmock_glVariantusvEXT;
  tbl.glWriteMaskEXT = gmock_glWriteMaskEXT;
  tbl.glVertexWeightPointerEXT = gmock_glVertexWeightPointerEXT;
  tbl.glVertexWeightfEXT = gmock_glVertexWeightfEXT;
  tbl.glVertexWeightfvEXT = gmock_glVertexWeightfvEXT;
  tbl.glImportSyncEXT = gmock_glImportSyncEXT;
  tbl.glFrameTerminatorGREMEDY = gmock_glFrameTerminatorGREMEDY;
  tbl.glStringMarkerGREMEDY = gmock_glStringMarkerGREMEDY;
  tbl.glGetImageTransformParameterfvHP = gmock_glGetImageTransformParameterfvHP;
  tbl.glGetImageTransformParameterivHP = gmock_glGetImageTransformParameterivHP;
  tbl.glImageTransformParameterfHP = gmock_glImageTransformParameterfHP;
  tbl.glImageTransformParameterfvHP = gmock_glImageTransformParameterfvHP;
  tbl.glImageTransformParameteriHP = gmock_glImageTransformParameteriHP;
  tbl.glImageTransformParameterivHP = gmock_glImageTransformParameterivHP;
  tbl.glMultiModeDrawArraysIBM = gmock_glMultiModeDrawArraysIBM;
  tbl.glMultiModeDrawElementsIBM = gmock_glMultiModeDrawElementsIBM;
  tbl.glColorPointerListIBM = gmock_glColorPointerListIBM;
  tbl.glEdgeFlagPointerListIBM = gmock_glEdgeFlagPointerListIBM;
  tbl.glFogCoordPointerListIBM = gmock_glFogCoordPointerListIBM;
  tbl.glIndexPointerListIBM = gmock_glIndexPointerListIBM;
  tbl.glNormalPointerListIBM = gmock_glNormalPointerListIBM;
  tbl.glSecondaryColorPointerListIBM = gmock_glSecondaryColorPointerListIBM;
  tbl.glTexCoordPointerListIBM = gmock_glTexCoordPointerListIBM;
  tbl.glVertexPointerListIBM = gmock_glVertexPointerListIBM;
  tbl.glFramebufferTexture2DMultisampleIMG = gmock_glFramebufferTexture2DMultisampleIMG;
  tbl.glRenderbufferStorageMultisampleIMG = gmock_glRenderbufferStorageMultisampleIMG;
  tbl.glBlendFuncSeparateINGR = gmock_glBlendFuncSeparateINGR;
  tbl.glColorPointervINTEL = gmock_glColorPointervINTEL;
  tbl.glNormalPointervINTEL = gmock_glNormalPointervINTEL;
  tbl.glTexCoordPointervINTEL = gmock_glTexCoordPointervINTEL;
  tbl.glVertexPointervINTEL = gmock_glVertexPointervINTEL;
  tbl.glTexScissorFuncINTEL = gmock_glTexScissorFuncINTEL;
  tbl.glTexScissorINTEL = gmock_glTexScissorINTEL;
  tbl.glDebugMessageCallback = gmock_glDebugMessageCallback;
  tbl.glDebugMessageControl = gmock_glDebugMessageControl;
  tbl.glDebugMessageInsert = gmock_glDebugMessageInsert;
  tbl.glGetDebugMessageLog = gmock_glGetDebugMessageLog;
  tbl.glGetObjectLabel = gmock_glGetObjectLabel;
  tbl.glGetObjectPtrLabel = gmock_glGetObjectPtrLabel;
  tbl.glObjectLabel = gmock_glObjectLabel;
  tbl.glObjectPtrLabel = gmock_glObjectPtrLabel;
  tbl.glPopDebugGroup = gmock_glPopDebugGroup;
  tbl.glPushDebugGroup = gmock_glPushDebugGroup;
  tbl.glBufferRegionEnabled = gmock_glBufferRegionEnabled;
  tbl.glDeleteBufferRegion = gmock_glDeleteBufferRegion;
  tbl.glDrawBufferRegion = gmock_glDrawBufferRegion;
  tbl.glNewBufferRegion = gmock_glNewBufferRegion;
  tbl.glReadBufferRegion = gmock_glReadBufferRegion;
  tbl.glResizeBuffersMESA = gmock_glResizeBuffersMESA;
  tbl.glWindowPos2dMESA = gmock_glWindowPos2dMESA;
  tbl.glWindowPos2dvMESA = gmock_glWindowPos2dvMESA;
  tbl.glWindowPos2fMESA = gmock_glWindowPos2fMESA;
  tbl.glWindowPos2fvMESA = gmock_glWindowPos2fvMESA;
  tbl.glWindowPos2iMESA = gmock_glWindowPos2iMESA;
  tbl.glWindowPos2ivMESA = gmock_glWindowPos2ivMESA;
  tbl.glWindowPos2sMESA = gmock_glWindowPos2sMESA;
  tbl.glWindowPos2svMESA = gmock_glWindowPos2svMESA;
  tbl.glWindowPos3dMESA = gmock_glWindowPos3dMESA;
  tbl.glWindowPos3dvMESA = gmock_glWindowPos3dvMESA;
  tbl.glWindowPos3fMESA = gmock_glWindowPos3fMESA;
  tbl.glWindowPos3fvMESA = gmock_glWindowPos3fvMESA;
  tbl.glWindowPos3iMESA = gmock_glWindowPos3iMESA;
  tbl.glWindowPos3ivMESA = gmock_glWindowPos3ivMESA;
  tbl.glWindowPos3sMESA = gmock_glWindowPos3sMESA;
  tbl.glWindowPos3svMESA = gmock_glWindowPos3svMESA;
  tbl.glWindowPos4dMESA = gmock_glWindowPos4dMESA;
  tbl.glWindowPos4dvMESA = gmock_glWindowPos4dvMESA;
  tbl.glWindowPos4fMESA = gmock_glWindowPos4fMESA;
  tbl.glWindowPos4fvMESA = gmock_glWindowPos4fvMESA;
  tbl.glWindowPos4iMESA = gmock_glWindowPos4iMESA;
  tbl.glWindowPos4ivMESA = gmock_glWindowPos4ivMESA;
  tbl.glWindowPos4sMESA = gmock_glWindowPos4sMESA;
  tbl.glWindowPos4svMESA = gmock_glWindowPos4svMESA;
  tbl.glBeginConditionalRenderNVX = gmock_glBeginConditionalRenderNVX;
  tbl.glEndConditionalRenderNVX = gmock_glEndConditionalRenderNVX;
  tbl.glGetImageHandleNV = gmock_glGetImageHandleNV;
  tbl.glGetTextureHandleNV = gmock_glGetTextureHandleNV;
  tbl.glGetTextureSamplerHandleNV = gmock_glGetTextureSamplerHandleNV;
  tbl.glIsImageHandleResidentNV = gmock_glIsImageHandleResidentNV;
  tbl.glIsTextureHandleResidentNV = gmock_glIsTextureHandleResidentNV;
  tbl.glMakeImageHandleNonResidentNV = gmock_glMakeImageHandleNonResidentNV;
  tbl.glMakeImageHandleResidentNV = gmock_glMakeImageHandleResidentNV;
  tbl.glMakeTextureHandleNonResidentNV = gmock_glMakeTextureHandleNonResidentNV;
  tbl.glMakeTextureHandleResidentNV = gmock_glMakeTextureHandleResidentNV;
  tbl.glProgramUniformHandleui64NV = gmock_glProgramUniformHandleui64NV;
  tbl.glProgramUniformHandleui64vNV = gmock_glProgramUniformHandleui64vNV;
  tbl.glUniformHandleui64NV = gmock_glUniformHandleui64NV;
  tbl.glUniformHandleui64vNV = gmock_glUniformHandleui64vNV;
  tbl.glBeginConditionalRenderNV = gmock_glBeginConditionalRenderNV;
  tbl.glEndConditionalRenderNV = gmock_glEndConditionalRenderNV;
  tbl.glCopyImageSubDataNV = gmock_glCopyImageSubDataNV;
  tbl.glCoverageMaskNV = gmock_glCoverageMaskNV;
  tbl.glCoverageOperationNV = gmock_glCoverageOperationNV;
  tbl.glClearDepthdNV = gmock_glClearDepthdNV;
  tbl.glDepthBoundsdNV = gmock_glDepthBoundsdNV;
  tbl.glDepthRangedNV = gmock_glDepthRangedNV;
  tbl.glDrawBuffersNV = gmock_glDrawBuffersNV;
  tbl.glEvalMapsNV = gmock_glEvalMapsNV;
  tbl.glGetMapAttribParameterfvNV = gmock_glGetMapAttribParameterfvNV;
  tbl.glGetMapAttribParameterivNV = gmock_glGetMapAttribParameterivNV;
  tbl.glGetMapControlPointsNV = gmock_glGetMapControlPointsNV;
  tbl.glGetMapParameterfvNV = gmock_glGetMapParameterfvNV;
  tbl.glGetMapParameterivNV = gmock_glGetMapParameterivNV;
  tbl.glMapControlPointsNV = gmock_glMapControlPointsNV;
  tbl.glMapParameterfvNV = gmock_glMapParameterfvNV;
  tbl.glMapParameterivNV = gmock_glMapParameterivNV;
  tbl.glGetMultisamplefvNV = gmock_glGetMultisamplefvNV;
  tbl.glSampleMaskIndexedNV = gmock_glSampleMaskIndexedNV;
  tbl.glTexRenderbufferNV = gmock_glTexRenderbufferNV;
  tbl.glDeleteFencesNV = gmock_glDeleteFencesNV;
  tbl.glFinishFenceNV = gmock_glFinishFenceNV;
  tbl.glGenFencesNV = gmock_glGenFencesNV;
  tbl.glGetFenceivNV = gmock_glGetFenceivNV;
  tbl.glIsFenceNV = gmock_glIsFenceNV;
  tbl.glSetFenceNV = gmock_glSetFenceNV;
  tbl.glTestFenceNV = gmock_glTestFenceNV;
  tbl.glGetProgramNamedParameterdvNV = gmock_glGetProgramNamedParameterdvNV;
  tbl.glGetProgramNamedParameterfvNV = gmock_glGetProgramNamedParameterfvNV;
  tbl.glProgramNamedParameter4dNV = gmock_glProgramNamedParameter4dNV;
  tbl.glProgramNamedParameter4dvNV = gmock_glProgramNamedParameter4dvNV;
  tbl.glProgramNamedParameter4fNV = gmock_glProgramNamedParameter4fNV;
  tbl.glProgramNamedParameter4fvNV = gmock_glProgramNamedParameter4fvNV;
  tbl.glRenderbufferStorageMultisampleCoverageNV = gmock_glRenderbufferStorageMultisampleCoverageNV;
  tbl.glProgramVertexLimitNV = gmock_glProgramVertexLimitNV;
  tbl.glGetProgramEnvParameterIivNV = gmock_glGetProgramEnvParameterIivNV;
  tbl.glGetProgramEnvParameterIuivNV = gmock_glGetProgramEnvParameterIuivNV;
  tbl.glGetProgramLocalParameterIivNV = gmock_glGetProgramLocalParameterIivNV;
  tbl.glGetProgramLocalParameterIuivNV = gmock_glGetProgramLocalParameterIuivNV;
  tbl.glProgramEnvParameterI4iNV = gmock_glProgramEnvParameterI4iNV;
  tbl.glProgramEnvParameterI4ivNV = gmock_glProgramEnvParameterI4ivNV;
  tbl.glProgramEnvParameterI4uiNV = gmock_glProgramEnvParameterI4uiNV;
  tbl.glProgramEnvParameterI4uivNV = gmock_glProgramEnvParameterI4uivNV;
  tbl.glProgramEnvParametersI4ivNV = gmock_glProgramEnvParametersI4ivNV;
  tbl.glProgramEnvParametersI4uivNV = gmock_glProgramEnvParametersI4uivNV;
  tbl.glProgramLocalParameterI4iNV = gmock_glProgramLocalParameterI4iNV;
  tbl.glProgramLocalParameterI4ivNV = gmock_glProgramLocalParameterI4ivNV;
  tbl.glProgramLocalParameterI4uiNV = gmock_glProgramLocalParameterI4uiNV;
  tbl.glProgramLocalParameterI4uivNV = gmock_glProgramLocalParameterI4uivNV;
  tbl.glProgramLocalParametersI4ivNV = gmock_glProgramLocalParametersI4ivNV;
  tbl.glProgramLocalParametersI4uivNV = gmock_glProgramLocalParametersI4uivNV;
  tbl.glGetUniformi64vNV = gmock_glGetUniformi64vNV;
  tbl.glProgramUniform1i64NV = gmock_glProgramUniform1i64NV;
  tbl.glProgramUniform1i64vNV = gmock_glProgramUniform1i64vNV;
  tbl.glProgramUniform1ui64NV = gmock_glProgramUniform1ui64NV;
  tbl.glProgramUniform1ui64vNV = gmock_glProgramUniform1ui64vNV;
  tbl.glProgramUniform2i64NV = gmock_glProgramUniform2i64NV;
  tbl.glProgramUniform2i64vNV = gmock_glProgramUniform2i64vNV;
  tbl.glProgramUniform2ui64NV = gmock_glProgramUniform2ui64NV;
  tbl.glProgramUniform2ui64vNV = gmock_glProgramUniform2ui64vNV;
  tbl.glProgramUniform3i64NV = gmock_glProgramUniform3i64NV;
  tbl.glProgramUniform3i64vNV = gmock_glProgramUniform3i64vNV;
  tbl.glProgramUniform3ui64NV = gmock_glProgramUniform3ui64NV;
  tbl.glProgramUniform3ui64vNV = gmock_glProgramUniform3ui64vNV;
  tbl.glProgramUniform4i64NV = gmock_glProgramUniform4i64NV;
  tbl.glProgramUniform4i64vNV = gmock_glProgramUniform4i64vNV;
  tbl.glProgramUniform4ui64NV = gmock_glProgramUniform4ui64NV;
  tbl.glProgramUniform4ui64vNV = gmock_glProgramUniform4ui64vNV;
  tbl.glUniform1i64NV = gmock_glUniform1i64NV;
  tbl.glUniform1i64vNV = gmock_glUniform1i64vNV;
  tbl.glUniform1ui64NV = gmock_glUniform1ui64NV;
  tbl.glUniform1ui64vNV = gmock_glUniform1ui64vNV;
  tbl.glUniform2i64NV = gmock_glUniform2i64NV;
  tbl.glUniform2i64vNV = gmock_glUniform2i64vNV;
  tbl.glUniform2ui64NV = gmock_glUniform2ui64NV;
  tbl.glUniform2ui64vNV = gmock_glUniform2ui64vNV;
  tbl.glUniform3i64NV = gmock_glUniform3i64NV;
  tbl.glUniform3i64vNV = gmock_glUniform3i64vNV;
  tbl.glUniform3ui64NV = gmock_glUniform3ui64NV;
  tbl.glUniform3ui64vNV = gmock_glUniform3ui64vNV;
  tbl.glUniform4i64NV = gmock_glUniform4i64NV;
  tbl.glUniform4i64vNV = gmock_glUniform4i64vNV;
  tbl.glUniform4ui64NV = gmock_glUniform4ui64NV;
  tbl.glUniform4ui64vNV = gmock_glUniform4ui64vNV;
  tbl.glColor3hNV = gmock_glColor3hNV;
  tbl.glColor3hvNV = gmock_glColor3hvNV;
  tbl.glColor4hNV = gmock_glColor4hNV;
  tbl.glColor4hvNV = gmock_glColor4hvNV;
  tbl.glFogCoordhNV = gmock_glFogCoordhNV;
  tbl.glFogCoordhvNV = gmock_glFogCoordhvNV;
  tbl.glMultiTexCoord1hNV = gmock_glMultiTexCoord1hNV;
  tbl.glMultiTexCoord1hvNV = gmock_glMultiTexCoord1hvNV;
  tbl.glMultiTexCoord2hNV = gmock_glMultiTexCoord2hNV;
  tbl.glMultiTexCoord2hvNV = gmock_glMultiTexCoord2hvNV;
  tbl.glMultiTexCoord3hNV = gmock_glMultiTexCoord3hNV;
  tbl.glMultiTexCoord3hvNV = gmock_glMultiTexCoord3hvNV;
  tbl.glMultiTexCoord4hNV = gmock_glMultiTexCoord4hNV;
  tbl.glMultiTexCoord4hvNV = gmock_glMultiTexCoord4hvNV;
  tbl.glNormal3hNV = gmock_glNormal3hNV;
  tbl.glNormal3hvNV = gmock_glNormal3hvNV;
  tbl.glSecondaryColor3hNV = gmock_glSecondaryColor3hNV;
  tbl.glSecondaryColor3hvNV = gmock_glSecondaryColor3hvNV;
  tbl.glTexCoord1hNV = gmock_glTexCoord1hNV;
  tbl.glTexCoord1hvNV = gmock_glTexCoord1hvNV;
  tbl.glTexCoord2hNV = gmock_glTexCoord2hNV;
  tbl.glTexCoord2hvNV = gmock_glTexCoord2hvNV;
  tbl.glTexCoord3hNV = gmock_glTexCoord3hNV;
  tbl.glTexCoord3hvNV = gmock_glTexCoord3hvNV;
  tbl.glTexCoord4hNV = gmock_glTexCoord4hNV;
  tbl.glTexCoord4hvNV = gmock_glTexCoord4hvNV;
  tbl.glVertex2hNV = gmock_glVertex2hNV;
  tbl.glVertex2hvNV = gmock_glVertex2hvNV;
  tbl.glVertex3hNV = gmock_glVertex3hNV;
  tbl.glVertex3hvNV = gmock_glVertex3hvNV;
  tbl.glVertex4hNV = gmock_glVertex4hNV;
  tbl.glVertex4hvNV = gmock_glVertex4hvNV;
  tbl.glVertexAttrib1hNV = gmock_glVertexAttrib1hNV;
  tbl.glVertexAttrib1hvNV = gmock_glVertexAttrib1hvNV;
  tbl.glVertexAttrib2hNV = gmock_glVertexAttrib2hNV;
  tbl.glVertexAttrib2hvNV = gmock_glVertexAttrib2hvNV;
  tbl.glVertexAttrib3hNV = gmock_glVertexAttrib3hNV;
  tbl.glVertexAttrib3hvNV = gmock_glVertexAttrib3hvNV;
  tbl.glVertexAttrib4hNV = gmock_glVertexAttrib4hNV;
  tbl.glVertexAttrib4hvNV = gmock_glVertexAttrib4hvNV;
  tbl.glVertexAttribs1hvNV = gmock_glVertexAttribs1hvNV;
  tbl.glVertexAttribs2hvNV = gmock_glVertexAttribs2hvNV;
  tbl.glVertexAttribs3hvNV = gmock_glVertexAttribs3hvNV;
  tbl.glVertexAttribs4hvNV = gmock_glVertexAttribs4hvNV;
  tbl.glVertexWeighthNV = gmock_glVertexWeighthNV;
  tbl.glVertexWeighthvNV = gmock_glVertexWeighthvNV;
  tbl.glBeginOcclusionQueryNV = gmock_glBeginOcclusionQueryNV;
  tbl.glDeleteOcclusionQueriesNV = gmock_glDeleteOcclusionQueriesNV;
  tbl.glEndOcclusionQueryNV = gmock_glEndOcclusionQueryNV;
  tbl.glGenOcclusionQueriesNV = gmock_glGenOcclusionQueriesNV;
  tbl.glGetOcclusionQueryivNV = gmock_glGetOcclusionQueryivNV;
  tbl.glGetOcclusionQueryuivNV = gmock_glGetOcclusionQueryuivNV;
  tbl.glIsOcclusionQueryNV = gmock_glIsOcclusionQueryNV;
  tbl.glProgramBufferParametersIivNV = gmock_glProgramBufferParametersIivNV;
  tbl.glProgramBufferParametersIuivNV = gmock_glProgramBufferParametersIuivNV;
  tbl.glProgramBufferParametersfvNV = gmock_glProgramBufferParametersfvNV;
  tbl.glCopyPathNV = gmock_glCopyPathNV;
  tbl.glCoverFillPathInstancedNV = gmock_glCoverFillPathInstancedNV;
  tbl.glCoverFillPathNV = gmock_glCoverFillPathNV;
  tbl.glCoverStrokePathInstancedNV = gmock_glCoverStrokePathInstancedNV;
  tbl.glCoverStrokePathNV = gmock_glCoverStrokePathNV;
  tbl.glDeletePathsNV = gmock_glDeletePathsNV;
  tbl.glGenPathsNV = gmock_glGenPathsNV;
  tbl.glGetPathColorGenfvNV = gmock_glGetPathColorGenfvNV;
  tbl.glGetPathColorGenivNV = gmock_glGetPathColorGenivNV;
  tbl.glGetPathCommandsNV = gmock_glGetPathCommandsNV;
  tbl.glGetPathCoordsNV = gmock_glGetPathCoordsNV;
  tbl.glGetPathDashArrayNV = gmock_glGetPathDashArrayNV;
  tbl.glGetPathLengthNV = gmock_glGetPathLengthNV;
  tbl.glGetPathMetricRangeNV = gmock_glGetPathMetricRangeNV;
  tbl.glGetPathMetricsNV = gmock_glGetPathMetricsNV;
  tbl.glGetPathParameterfvNV = gmock_glGetPathParameterfvNV;
  tbl.glGetPathParameterivNV = gmock_glGetPathParameterivNV;
  tbl.glGetPathSpacingNV = gmock_glGetPathSpacingNV;
  tbl.glGetPathTexGenfvNV = gmock_glGetPathTexGenfvNV;
  tbl.glGetPathTexGenivNV = gmock_glGetPathTexGenivNV;
  tbl.glInterpolatePathsNV = gmock_glInterpolatePathsNV;
  tbl.glIsPathNV = gmock_glIsPathNV;
  tbl.glIsPointInFillPathNV = gmock_glIsPointInFillPathNV;
  tbl.glIsPointInStrokePathNV = gmock_glIsPointInStrokePathNV;
  tbl.glPathColorGenNV = gmock_glPathColorGenNV;
  tbl.glPathCommandsNV = gmock_glPathCommandsNV;
  tbl.glPathCoordsNV = gmock_glPathCoordsNV;
  tbl.glPathCoverDepthFuncNV = gmock_glPathCoverDepthFuncNV;
  tbl.glPathDashArrayNV = gmock_glPathDashArrayNV;
  tbl.glPathFogGenNV = gmock_glPathFogGenNV;
  tbl.glPathGlyphRangeNV = gmock_glPathGlyphRangeNV;
  tbl.glPathGlyphsNV = gmock_glPathGlyphsNV;
  tbl.glPathParameterfNV = gmock_glPathParameterfNV;
  tbl.glPathParameterfvNV = gmock_glPathParameterfvNV;
  tbl.glPathParameteriNV = gmock_glPathParameteriNV;
  tbl.glPathParameterivNV = gmock_glPathParameterivNV;
  tbl.glPathStencilDepthOffsetNV = gmock_glPathStencilDepthOffsetNV;
  tbl.glPathStencilFuncNV = gmock_glPathStencilFuncNV;
  tbl.glPathStringNV = gmock_glPathStringNV;
  tbl.glPathSubCommandsNV = gmock_glPathSubCommandsNV;
  tbl.glPathSubCoordsNV = gmock_glPathSubCoordsNV;
  tbl.glPathTexGenNV = gmock_glPathTexGenNV;
  tbl.glPointAlongPathNV = gmock_glPointAlongPathNV;
  tbl.glStencilFillPathInstancedNV = gmock_glStencilFillPathInstancedNV;
  tbl.glStencilFillPathNV = gmock_glStencilFillPathNV;
  tbl.glStencilStrokePathInstancedNV = gmock_glStencilStrokePathInstancedNV;
  tbl.glStencilStrokePathNV = gmock_glStencilStrokePathNV;
  tbl.glTransformPathNV = gmock_glTransformPathNV;
  tbl.glWeightPathsNV = gmock_glWeightPathsNV;
  tbl.glFlushPixelDataRangeNV = gmock_glFlushPixelDataRangeNV;
  tbl.glPixelDataRangeNV = gmock_glPixelDataRangeNV;
  tbl.glPointParameteriNV = gmock_glPointParameteriNV;
  tbl.glPointParameterivNV = gmock_glPointParameterivNV;
  tbl.glGetVideoi64vNV = gmock_glGetVideoi64vNV;
  tbl.glGetVideoivNV = gmock_glGetVideoivNV;
  tbl.glGetVideoui64vNV = gmock_glGetVideoui64vNV;
  tbl.glGetVideouivNV = gmock_glGetVideouivNV;
  tbl.glPresentFrameDualFillNV = gmock_glPresentFrameDualFillNV;
  tbl.glPresentFrameKeyedNV = gmock_glPresentFrameKeyedNV;
  tbl.glPrimitiveRestartIndexNV = gmock_glPrimitiveRestartIndexNV;
  tbl.glPrimitiveRestartNV = gmock_glPrimitiveRestartNV;
  tbl.glReadBufferNV = gmock_glReadBufferNV;
  tbl.glCombinerInputNV = gmock_glCombinerInputNV;
  tbl.glCombinerOutputNV = gmock_glCombinerOutputNV;
  tbl.glCombinerParameterfNV = gmock_glCombinerParameterfNV;
  tbl.glCombinerParameterfvNV = gmock_glCombinerParameterfvNV;
  tbl.glCombinerParameteriNV = gmock_glCombinerParameteriNV;
  tbl.glCombinerParameterivNV = gmock_glCombinerParameterivNV;
  tbl.glFinalCombinerInputNV = gmock_glFinalCombinerInputNV;
  tbl.glGetCombinerInputParameterfvNV = gmock_glGetCombinerInputParameterfvNV;
  tbl.glGetCombinerInputParameterivNV = gmock_glGetCombinerInputParameterivNV;
  tbl.glGetCombinerOutputParameterfvNV = gmock_glGetCombinerOutputParameterfvNV;
  tbl.glGetCombinerOutputParameterivNV = gmock_glGetCombinerOutputParameterivNV;
  tbl.glGetFinalCombinerInputParameterfvNV = gmock_glGetFinalCombinerInputParameterfvNV;
  tbl.glGetFinalCombinerInputParameterivNV = gmock_glGetFinalCombinerInputParameterivNV;
  tbl.glCombinerStageParameterfvNV = gmock_glCombinerStageParameterfvNV;
  tbl.glGetCombinerStageParameterfvNV = gmock_glGetCombinerStageParameterfvNV;
  tbl.glGetBufferParameterui64vNV = gmock_glGetBufferParameterui64vNV;
  tbl.glGetIntegerui64vNV = gmock_glGetIntegerui64vNV;
  tbl.glGetNamedBufferParameterui64vNV = gmock_glGetNamedBufferParameterui64vNV;
  tbl.glGetUniformui64vNV = gmock_glGetUniformui64vNV;
  tbl.glIsBufferResidentNV = gmock_glIsBufferResidentNV;
  tbl.glIsNamedBufferResidentNV = gmock_glIsNamedBufferResidentNV;
  tbl.glMakeBufferNonResidentNV = gmock_glMakeBufferNonResidentNV;
  tbl.glMakeBufferResidentNV = gmock_glMakeBufferResidentNV;
  tbl.glMakeNamedBufferNonResidentNV = gmock_glMakeNamedBufferNonResidentNV;
  tbl.glMakeNamedBufferResidentNV = gmock_glMakeNamedBufferResidentNV;
  tbl.glProgramUniformui64NV = gmock_glProgramUniformui64NV;
  tbl.glProgramUniformui64vNV = gmock_glProgramUniformui64vNV;
  tbl.glUniformui64NV = gmock_glUniformui64NV;
  tbl.glUniformui64vNV = gmock_glUniformui64vNV;
  tbl.glTextureBarrierNV = gmock_glTextureBarrierNV;
  tbl.glTexImage2DMultisampleCoverageNV = gmock_glTexImage2DMultisampleCoverageNV;
  tbl.glTexImage3DMultisampleCoverageNV = gmock_glTexImage3DMultisampleCoverageNV;
  tbl.glTextureImage2DMultisampleCoverageNV = gmock_glTextureImage2DMultisampleCoverageNV;
  tbl.glTextureImage2DMultisampleNV = gmock_glTextureImage2DMultisampleNV;
  tbl.glTextureImage3DMultisampleCoverageNV = gmock_glTextureImage3DMultisampleCoverageNV;
  tbl.glTextureImage3DMultisampleNV = gmock_glTextureImage3DMultisampleNV;
  tbl.glActiveVaryingNV = gmock_glActiveVaryingNV;
  tbl.glBeginTransformFeedbackNV = gmock_glBeginTransformFeedbackNV;
  tbl.glBindBufferBaseNV = gmock_glBindBufferBaseNV;
  tbl.glBindBufferOffsetNV = gmock_glBindBufferOffsetNV;
  tbl.glBindBufferRangeNV = gmock_glBindBufferRangeNV;
  tbl.glEndTransformFeedbackNV = gmock_glEndTransformFeedbackNV;
  tbl.glGetActiveVaryingNV = gmock_glGetActiveVaryingNV;
  tbl.glGetTransformFeedbackVaryingNV = gmock_glGetTransformFeedbackVaryingNV;
  tbl.glGetVaryingLocationNV = gmock_glGetVaryingLocationNV;
  tbl.glTransformFeedbackAttribsNV = gmock_glTransformFeedbackAttribsNV;
  tbl.glTransformFeedbackVaryingsNV = gmock_glTransformFeedbackVaryingsNV;
  tbl.glBindTransformFeedbackNV = gmock_glBindTransformFeedbackNV;
  tbl.glDeleteTransformFeedbacksNV = gmock_glDeleteTransformFeedbacksNV;
  tbl.glDrawTransformFeedbackNV = gmock_glDrawTransformFeedbackNV;
  tbl.glGenTransformFeedbacksNV = gmock_glGenTransformFeedbacksNV;
  tbl.glIsTransformFeedbackNV = gmock_glIsTransformFeedbackNV;
  tbl.glPauseTransformFeedbackNV = gmock_glPauseTransformFeedbackNV;
  tbl.glResumeTransformFeedbackNV = gmock_glResumeTransformFeedbackNV;
  tbl.glVDPAUFiniNV = gmock_glVDPAUFiniNV;
  tbl.glVDPAUGetSurfaceivNV = gmock_glVDPAUGetSurfaceivNV;
  tbl.glVDPAUInitNV = gmock_glVDPAUInitNV;
  tbl.glVDPAUIsSurfaceNV = gmock_glVDPAUIsSurfaceNV;
  tbl.glVDPAUMapSurfacesNV = gmock_glVDPAUMapSurfacesNV;
  tbl.glVDPAURegisterOutputSurfaceNV = gmock_glVDPAURegisterOutputSurfaceNV;
  tbl.glVDPAURegisterVideoSurfaceNV = gmock_glVDPAURegisterVideoSurfaceNV;
  tbl.glVDPAUSurfaceAccessNV = gmock_glVDPAUSurfaceAccessNV;
  tbl.glVDPAUUnmapSurfacesNV = gmock_glVDPAUUnmapSurfacesNV;
  tbl.glVDPAUUnregisterSurfaceNV = gmock_glVDPAUUnregisterSurfaceNV;
  tbl.glFlushVertexArrayRangeNV = gmock_glFlushVertexArrayRangeNV;
  tbl.glVertexArrayRangeNV = gmock_glVertexArrayRangeNV;
  tbl.glGetVertexAttribLi64vNV = gmock_glGetVertexAttribLi64vNV;
  tbl.glGetVertexAttribLui64vNV = gmock_glGetVertexAttribLui64vNV;
  tbl.glVertexAttribL1i64NV = gmock_glVertexAttribL1i64NV;
  tbl.glVertexAttribL1i64vNV = gmock_glVertexAttribL1i64vNV;
  tbl.glVertexAttribL1ui64NV = gmock_glVertexAttribL1ui64NV;
  tbl.glVertexAttribL1ui64vNV = gmock_glVertexAttribL1ui64vNV;
  tbl.glVertexAttribL2i64NV = gmock_glVertexAttribL2i64NV;
  tbl.glVertexAttribL2i64vNV = gmock_glVertexAttribL2i64vNV;
  tbl.glVertexAttribL2ui64NV = gmock_glVertexAttribL2ui64NV;
  tbl.glVertexAttribL2ui64vNV = gmock_glVertexAttribL2ui64vNV;
  tbl.glVertexAttribL3i64NV = gmock_glVertexAttribL3i64NV;
  tbl.glVertexAttribL3i64vNV = gmock_glVertexAttribL3i64vNV;
  tbl.glVertexAttribL3ui64NV = gmock_glVertexAttribL3ui64NV;
  tbl.glVertexAttribL3ui64vNV = gmock_glVertexAttribL3ui64vNV;
  tbl.glVertexAttribL4i64NV = gmock_glVertexAttribL4i64NV;
  tbl.glVertexAttribL4i64vNV = gmock_glVertexAttribL4i64vNV;
  tbl.glVertexAttribL4ui64NV = gmock_glVertexAttribL4ui64NV;
  tbl.glVertexAttribL4ui64vNV = gmock_glVertexAttribL4ui64vNV;
  tbl.glVertexAttribLFormatNV = gmock_glVertexAttribLFormatNV;
  tbl.glBufferAddressRangeNV = gmock_glBufferAddressRangeNV;
  tbl.glColorFormatNV = gmock_glColorFormatNV;
  tbl.glEdgeFlagFormatNV = gmock_glEdgeFlagFormatNV;
  tbl.glFogCoordFormatNV = gmock_glFogCoordFormatNV;
  tbl.glGetIntegerui64i_vNV = gmock_glGetIntegerui64i_vNV;
  tbl.glIndexFormatNV = gmock_glIndexFormatNV;
  tbl.glNormalFormatNV = gmock_glNormalFormatNV;
  tbl.glSecondaryColorFormatNV = gmock_glSecondaryColorFormatNV;
  tbl.glTexCoordFormatNV = gmock_glTexCoordFormatNV;
  tbl.glVertexAttribFormatNV = gmock_glVertexAttribFormatNV;
  tbl.glVertexAttribIFormatNV = gmock_glVertexAttribIFormatNV;
  tbl.glVertexFormatNV = gmock_glVertexFormatNV;
  tbl.glAreProgramsResidentNV = gmock_glAreProgramsResidentNV;
  tbl.glBindProgramNV = gmock_glBindProgramNV;
  tbl.glDeleteProgramsNV = gmock_glDeleteProgramsNV;
  tbl.glExecuteProgramNV = gmock_glExecuteProgramNV;
  tbl.glGenProgramsNV = gmock_glGenProgramsNV;
  tbl.glGetProgramParameterdvNV = gmock_glGetProgramParameterdvNV;
  tbl.glGetProgramParameterfvNV = gmock_glGetProgramParameterfvNV;
  tbl.glGetProgramStringNV = gmock_glGetProgramStringNV;
  tbl.glGetProgramivNV = gmock_glGetProgramivNV;
  tbl.glGetTrackMatrixivNV = gmock_glGetTrackMatrixivNV;
  tbl.glGetVertexAttribPointervNV = gmock_glGetVertexAttribPointervNV;
  tbl.glGetVertexAttribdvNV = gmock_glGetVertexAttribdvNV;
  tbl.glGetVertexAttribfvNV = gmock_glGetVertexAttribfvNV;
  tbl.glGetVertexAttribivNV = gmock_glGetVertexAttribivNV;
  tbl.glIsProgramNV = gmock_glIsProgramNV;
  tbl.glLoadProgramNV = gmock_glLoadProgramNV;
  tbl.glProgramParameter4dNV = gmock_glProgramParameter4dNV;
  tbl.glProgramParameter4dvNV = gmock_glProgramParameter4dvNV;
  tbl.glProgramParameter4fNV = gmock_glProgramParameter4fNV;
  tbl.glProgramParameter4fvNV = gmock_glProgramParameter4fvNV;
  tbl.glProgramParameters4dvNV = gmock_glProgramParameters4dvNV;
  tbl.glProgramParameters4fvNV = gmock_glProgramParameters4fvNV;
  tbl.glRequestResidentProgramsNV = gmock_glRequestResidentProgramsNV;
  tbl.glTrackMatrixNV = gmock_glTrackMatrixNV;
  tbl.glVertexAttrib1dNV = gmock_glVertexAttrib1dNV;
  tbl.glVertexAttrib1dvNV = gmock_glVertexAttrib1dvNV;
  tbl.glVertexAttrib1fNV = gmock_glVertexAttrib1fNV;
  tbl.glVertexAttrib1fvNV = gmock_glVertexAttrib1fvNV;
  tbl.glVertexAttrib1sNV = gmock_glVertexAttrib1sNV;
  tbl.glVertexAttrib1svNV = gmock_glVertexAttrib1svNV;
  tbl.glVertexAttrib2dNV = gmock_glVertexAttrib2dNV;
  tbl.glVertexAttrib2dvNV = gmock_glVertexAttrib2dvNV;
  tbl.glVertexAttrib2fNV = gmock_glVertexAttrib2fNV;
  tbl.glVertexAttrib2fvNV = gmock_glVertexAttrib2fvNV;
  tbl.glVertexAttrib2sNV = gmock_glVertexAttrib2sNV;
  tbl.glVertexAttrib2svNV = gmock_glVertexAttrib2svNV;
  tbl.glVertexAttrib3dNV = gmock_glVertexAttrib3dNV;
  tbl.glVertexAttrib3dvNV = gmock_glVertexAttrib3dvNV;
  tbl.glVertexAttrib3fNV = gmock_glVertexAttrib3fNV;
  tbl.glVertexAttrib3fvNV = gmock_glVertexAttrib3fvNV;
  tbl.glVertexAttrib3sNV = gmock_glVertexAttrib3sNV;
  tbl.glVertexAttrib3svNV = gmock_glVertexAttrib3svNV;
  tbl.glVertexAttrib4dNV = gmock_glVertexAttrib4dNV;
  tbl.glVertexAttrib4dvNV = gmock_glVertexAttrib4dvNV;
  tbl.glVertexAttrib4fNV = gmock_glVertexAttrib4fNV;
  tbl.glVertexAttrib4fvNV = gmock_glVertexAttrib4fvNV;
  tbl.glVertexAttrib4sNV = gmock_glVertexAttrib4sNV;
  tbl.glVertexAttrib4svNV = gmock_glVertexAttrib4svNV;
  tbl.glVertexAttrib4ubNV = gmock_glVertexAttrib4ubNV;
  tbl.glVertexAttrib4ubvNV = gmock_glVertexAttrib4ubvNV;
  tbl.glVertexAttribPointerNV = gmock_glVertexAttribPointerNV;
  tbl.glVertexAttribs1dvNV = gmock_glVertexAttribs1dvNV;
  tbl.glVertexAttribs1fvNV = gmock_glVertexAttribs1fvNV;
  tbl.glVertexAttribs1svNV = gmock_glVertexAttribs1svNV;
  tbl.glVertexAttribs2dvNV = gmock_glVertexAttribs2dvNV;
  tbl.glVertexAttribs2fvNV = gmock_glVertexAttribs2fvNV;
  tbl.glVertexAttribs2svNV = gmock_glVertexAttribs2svNV;
  tbl.glVertexAttribs3dvNV = gmock_glVertexAttribs3dvNV;
  tbl.glVertexAttribs3fvNV = gmock_glVertexAttribs3fvNV;
  tbl.glVertexAttribs3svNV = gmock_glVertexAttribs3svNV;
  tbl.glVertexAttribs4dvNV = gmock_glVertexAttribs4dvNV;
  tbl.glVertexAttribs4fvNV = gmock_glVertexAttribs4fvNV;
  tbl.glVertexAttribs4svNV = gmock_glVertexAttribs4svNV;
  tbl.glVertexAttribs4ubvNV = gmock_glVertexAttribs4ubvNV;
  tbl.glBeginVideoCaptureNV = gmock_glBeginVideoCaptureNV;
  tbl.glBindVideoCaptureStreamBufferNV = gmock_glBindVideoCaptureStreamBufferNV;
  tbl.glBindVideoCaptureStreamTextureNV = gmock_glBindVideoCaptureStreamTextureNV;
  tbl.glEndVideoCaptureNV = gmock_glEndVideoCaptureNV;
  tbl.glGetVideoCaptureStreamdvNV = gmock_glGetVideoCaptureStreamdvNV;
  tbl.glGetVideoCaptureStreamfvNV = gmock_glGetVideoCaptureStreamfvNV;
  tbl.glGetVideoCaptureStreamivNV = gmock_glGetVideoCaptureStreamivNV;
  tbl.glGetVideoCaptureivNV = gmock_glGetVideoCaptureivNV;
  tbl.glVideoCaptureNV = gmock_glVideoCaptureNV;
  tbl.glVideoCaptureStreamParameterdvNV = gmock_glVideoCaptureStreamParameterdvNV;
  tbl.glVideoCaptureStreamParameterfvNV = gmock_glVideoCaptureStreamParameterfvNV;
  tbl.glVideoCaptureStreamParameterivNV = gmock_glVideoCaptureStreamParameterivNV;
  tbl.glBlendEquationSeparateOES = gmock_glBlendEquationSeparateOES;
  tbl.glBlendFuncSeparateOES = gmock_glBlendFuncSeparateOES;
  tbl.glBlendEquationOES = gmock_glBlendEquationOES;
  tbl.glBindFramebufferOES = gmock_glBindFramebufferOES;
  tbl.glBindRenderbufferOES = gmock_glBindRenderbufferOES;
  tbl.glCheckFramebufferStatusOES = gmock_glCheckFramebufferStatusOES;
  tbl.glDeleteFramebuffersOES = gmock_glDeleteFramebuffersOES;
  tbl.glDeleteRenderbuffersOES = gmock_glDeleteRenderbuffersOES;
  tbl.glFramebufferRenderbufferOES = gmock_glFramebufferRenderbufferOES;
  tbl.glFramebufferTexture2DOES = gmock_glFramebufferTexture2DOES;
  tbl.glGenFramebuffersOES = gmock_glGenFramebuffersOES;
  tbl.glGenRenderbuffersOES = gmock_glGenRenderbuffersOES;
  tbl.glGenerateMipmapOES = gmock_glGenerateMipmapOES;
  tbl.glGetFramebufferAttachmentParameterivOES = gmock_glGetFramebufferAttachmentParameterivOES;
  tbl.glGetRenderbufferParameterivOES = gmock_glGetRenderbufferParameterivOES;
  tbl.glIsFramebufferOES = gmock_glIsFramebufferOES;
  tbl.glIsRenderbufferOES = gmock_glIsRenderbufferOES;
  tbl.glRenderbufferStorageOES = gmock_glRenderbufferStorageOES;
  tbl.glGetProgramBinaryOES = gmock_glGetProgramBinaryOES;
  tbl.glProgramBinaryOES = gmock_glProgramBinaryOES;
  tbl.glGetBufferPointervOES = gmock_glGetBufferPointervOES;
  tbl.glMapBufferOES = gmock_glMapBufferOES;
  tbl.glUnmapBufferOES = gmock_glUnmapBufferOES;
  tbl.glCurrentPaletteMatrixOES = gmock_glCurrentPaletteMatrixOES;
  tbl.glMatrixIndexPointerOES = gmock_glMatrixIndexPointerOES;
  tbl.glWeightPointerOES = gmock_glWeightPointerOES;
  tbl.glClearDepthfOES = gmock_glClearDepthfOES;
  tbl.glClipPlanefOES = gmock_glClipPlanefOES;
  tbl.glDepthRangefOES = gmock_glDepthRangefOES;
  tbl.glFrustumfOES = gmock_glFrustumfOES;
  tbl.glGetClipPlanefOES = gmock_glGetClipPlanefOES;
  tbl.glOrthofOES = gmock_glOrthofOES;
  tbl.glCompressedTexImage3DOES = gmock_glCompressedTexImage3DOES;
  tbl.glCompressedTexSubImage3DOES = gmock_glCompressedTexSubImage3DOES;
  tbl.glCopyTexSubImage3DOES = gmock_glCopyTexSubImage3DOES;
  tbl.glFramebufferTexture3DOES = gmock_glFramebufferTexture3DOES;
  tbl.glTexImage3DOES = gmock_glTexImage3DOES;
  tbl.glTexSubImage3DOES = gmock_glTexSubImage3DOES;
  tbl.glGetTexGenfvOES = gmock_glGetTexGenfvOES;
  tbl.glGetTexGenivOES = gmock_glGetTexGenivOES;
  tbl.glGetTexGenxvOES = gmock_glGetTexGenxvOES;
  tbl.glTexGenfOES = gmock_glTexGenfOES;
  tbl.glTexGenfvOES = gmock_glTexGenfvOES;
  tbl.glTexGeniOES = gmock_glTexGeniOES;
  tbl.glTexGenivOES = gmock_glTexGenivOES;
  tbl.glTexGenxOES = gmock_glTexGenxOES;
  tbl.glTexGenxvOES = gmock_glTexGenxvOES;
  tbl.glBindVertexArrayOES = gmock_glBindVertexArrayOES;
  tbl.glDeleteVertexArraysOES = gmock_glDeleteVertexArraysOES;
  tbl.glGenVertexArraysOES = gmock_glGenVertexArraysOES;
  tbl.glIsVertexArrayOES = gmock_glIsVertexArrayOES;
  tbl.glHintPGI = gmock_glHintPGI;
  tbl.glAlphaFuncQCOM = gmock_glAlphaFuncQCOM;
  tbl.glDisableDriverControlQCOM = gmock_glDisableDriverControlQCOM;
  tbl.glEnableDriverControlQCOM = gmock_glEnableDriverControlQCOM;
  tbl.glGetDriverControlStringQCOM = gmock_glGetDriverControlStringQCOM;
  tbl.glGetDriverControlsQCOM = gmock_glGetDriverControlsQCOM;
  tbl.glExtGetBufferPointervQCOM = gmock_glExtGetBufferPointervQCOM;
  tbl.glExtGetBuffersQCOM = gmock_glExtGetBuffersQCOM;
  tbl.glExtGetFramebuffersQCOM = gmock_glExtGetFramebuffersQCOM;
  tbl.glExtGetRenderbuffersQCOM = gmock_glExtGetRenderbuffersQCOM;
  tbl.glExtGetTexLevelParameterivQCOM = gmock_glExtGetTexLevelParameterivQCOM;
  tbl.glExtGetTexSubImageQCOM = gmock_glExtGetTexSubImageQCOM;
  tbl.glExtGetTexturesQCOM = gmock_glExtGetTexturesQCOM;
  tbl.glExtTexObjectStateOverrideiQCOM = gmock_glExtTexObjectStateOverrideiQCOM;
  tbl.glExtGetProgramBinarySourceQCOM = gmock_glExtGetProgramBinarySourceQCOM;
  tbl.glExtGetProgramsQCOM = gmock_glExtGetProgramsQCOM;
  tbl.glExtGetShadersQCOM = gmock_glExtGetShadersQCOM;
  tbl.glExtIsProgramBinaryQCOM = gmock_glExtIsProgramBinaryQCOM;
  tbl.glEndTilingQCOM = gmock_glEndTilingQCOM;
  tbl.glStartTilingQCOM = gmock_glStartTilingQCOM;
  tbl.glPointSizePointerOES = gmock_glPointSizePointerOES;
  tbl.glLogMessageCallbackREGAL = gmock_glLogMessageCallbackREGAL;
  tbl.glDetailTexFuncSGIS = gmock_glDetailTexFuncSGIS;
  tbl.glGetDetailTexFuncSGIS = gmock_glGetDetailTexFuncSGIS;
  tbl.glFogFuncSGIS = gmock_glFogFuncSGIS;
  tbl.glGetFogFuncSGIS = gmock_glGetFogFuncSGIS;
  tbl.glSampleMaskSGIS = gmock_glSampleMaskSGIS;
  tbl.glSamplePatternSGIS = gmock_glSamplePatternSGIS;
  tbl.glGetPixelTexGenParameterfvSGIS = gmock_glGetPixelTexGenParameterfvSGIS;
  tbl.glGetPixelTexGenParameterivSGIS = gmock_glGetPixelTexGenParameterivSGIS;
  tbl.glPixelTexGenParameterfSGIS = gmock_glPixelTexGenParameterfSGIS;
  tbl.glPixelTexGenParameterfvSGIS = gmock_glPixelTexGenParameterfvSGIS;
  tbl.glPixelTexGenParameteriSGIS = gmock_glPixelTexGenParameteriSGIS;
  tbl.glPixelTexGenParameterivSGIS = gmock_glPixelTexGenParameterivSGIS;
  tbl.glPointParameterfSGIS = gmock_glPointParameterfSGIS;
  tbl.glPointParameterfvSGIS = gmock_glPointParameterfvSGIS;
  tbl.glGetSharpenTexFuncSGIS = gmock_glGetSharpenTexFuncSGIS;
  tbl.glSharpenTexFuncSGIS = gmock_glSharpenTexFuncSGIS;
  tbl.glTexImage4DSGIS = gmock_glTexImage4DSGIS;
  tbl.glTexSubImage4DSGIS = gmock_glTexSubImage4DSGIS;
  tbl.glTextureColorMaskSGIS = gmock_glTextureColorMaskSGIS;
  tbl.glGetTexFilterFuncSGIS = gmock_glGetTexFilterFuncSGIS;
  tbl.glTexFilterFuncSGIS = gmock_glTexFilterFuncSGIS;
  tbl.glAsyncMarkerSGIX = gmock_glAsyncMarkerSGIX;
  tbl.glDeleteAsyncMarkersSGIX = gmock_glDeleteAsyncMarkersSGIX;
  tbl.glFinishAsyncSGIX = gmock_glFinishAsyncSGIX;
  tbl.glGenAsyncMarkersSGIX = gmock_glGenAsyncMarkersSGIX;
  tbl.glIsAsyncMarkerSGIX = gmock_glIsAsyncMarkerSGIX;
  tbl.glPollAsyncSGIX = gmock_glPollAsyncSGIX;
  tbl.glFlushRasterSGIX = gmock_glFlushRasterSGIX;
  tbl.glTextureFogSGIX = gmock_glTextureFogSGIX;
  tbl.glFragmentColorMaterialSGIX = gmock_glFragmentColorMaterialSGIX;
  tbl.glFragmentLightModelfSGIX = gmock_glFragmentLightModelfSGIX;
  tbl.glFragmentLightModelfvSGIX = gmock_glFragmentLightModelfvSGIX;
  tbl.glFragmentLightModeliSGIX = gmock_glFragmentLightModeliSGIX;
  tbl.glFragmentLightModelivSGIX = gmock_glFragmentLightModelivSGIX;
  tbl.glFragmentLightfSGIX = gmock_glFragmentLightfSGIX;
  tbl.glFragmentLightfvSGIX = gmock_glFragmentLightfvSGIX;
  tbl.glFragmentLightiSGIX = gmock_glFragmentLightiSGIX;
  tbl.glFragmentLightivSGIX = gmock_glFragmentLightivSGIX;
  tbl.glFragmentMaterialfSGIX = gmock_glFragmentMaterialfSGIX;
  tbl.glFragmentMaterialfvSGIX = gmock_glFragmentMaterialfvSGIX;
  tbl.glFragmentMaterialiSGIX = gmock_glFragmentMaterialiSGIX;
  tbl.glFragmentMaterialivSGIX = gmock_glFragmentMaterialivSGIX;
  tbl.glGetFragmentLightfvSGIX = gmock_glGetFragmentLightfvSGIX;
  tbl.glGetFragmentLightivSGIX = gmock_glGetFragmentLightivSGIX;
  tbl.glGetFragmentMaterialfvSGIX = gmock_glGetFragmentMaterialfvSGIX;
  tbl.glGetFragmentMaterialivSGIX = gmock_glGetFragmentMaterialivSGIX;
  tbl.glLightEnviSGIX = gmock_glLightEnviSGIX;
  tbl.glFrameZoomSGIX = gmock_glFrameZoomSGIX;
  tbl.glIglooInterfaceSGIX = gmock_glIglooInterfaceSGIX;
  tbl.glGetInstrumentsSGIX = gmock_glGetInstrumentsSGIX;
  tbl.glInstrumentsBufferSGIX = gmock_glInstrumentsBufferSGIX;
  tbl.glPollInstrumentsSGIX = gmock_glPollInstrumentsSGIX;
  tbl.glReadInstrumentsSGIX = gmock_glReadInstrumentsSGIX;
  tbl.glStartInstrumentsSGIX = gmock_glStartInstrumentsSGIX;
  tbl.glStopInstrumentsSGIX = gmock_glStopInstrumentsSGIX;
  tbl.glGetListParameterfvSGIX = gmock_glGetListParameterfvSGIX;
  tbl.glGetListParameterivSGIX = gmock_glGetListParameterivSGIX;
  tbl.glListParameterfSGIX = gmock_glListParameterfSGIX;
  tbl.glListParameterfvSGIX = gmock_glListParameterfvSGIX;
  tbl.glListParameteriSGIX = gmock_glListParameteriSGIX;
  tbl.glListParameterivSGIX = gmock_glListParameterivSGIX;
  tbl.glPixelTexGenSGIX = gmock_glPixelTexGenSGIX;
  tbl.glDeformSGIX = gmock_glDeformSGIX;
  tbl.glDeformationMap3dSGIX = gmock_glDeformationMap3dSGIX;
  tbl.glDeformationMap3fSGIX = gmock_glDeformationMap3fSGIX;
  tbl.glLoadIdentityDeformationMapSGIX = gmock_glLoadIdentityDeformationMapSGIX;
  tbl.glReferencePlaneSGIX = gmock_glReferencePlaneSGIX;
  tbl.glSpriteParameterfSGIX = gmock_glSpriteParameterfSGIX;
  tbl.glSpriteParameterfvSGIX = gmock_glSpriteParameterfvSGIX;
  tbl.glSpriteParameteriSGIX = gmock_glSpriteParameteriSGIX;
  tbl.glSpriteParameterivSGIX = gmock_glSpriteParameterivSGIX;
  tbl.glTagSampleBufferSGIX = gmock_glTagSampleBufferSGIX;
  tbl.glColorTableParameterfvSGI = gmock_glColorTableParameterfvSGI;
  tbl.glColorTableParameterivSGI = gmock_glColorTableParameterivSGI;
  tbl.glColorTableSGI = gmock_glColorTableSGI;
  tbl.glCopyColorTableSGI = gmock_glCopyColorTableSGI;
  tbl.glGetColorTableParameterfvSGI = gmock_glGetColorTableParameterfvSGI;
  tbl.glGetColorTableParameterivSGI = gmock_glGetColorTableParameterivSGI;
  tbl.glGetColorTableSGI = gmock_glGetColorTableSGI;
  tbl.glFinishTextureSUNX = gmock_glFinishTextureSUNX;
  tbl.glGlobalAlphaFactorbSUN = gmock_glGlobalAlphaFactorbSUN;
  tbl.glGlobalAlphaFactordSUN = gmock_glGlobalAlphaFactordSUN;
  tbl.glGlobalAlphaFactorfSUN = gmock_glGlobalAlphaFactorfSUN;
  tbl.glGlobalAlphaFactoriSUN = gmock_glGlobalAlphaFactoriSUN;
  tbl.glGlobalAlphaFactorsSUN = gmock_glGlobalAlphaFactorsSUN;
  tbl.glGlobalAlphaFactorubSUN = gmock_glGlobalAlphaFactorubSUN;
  tbl.glGlobalAlphaFactoruiSUN = gmock_glGlobalAlphaFactoruiSUN;
  tbl.glGlobalAlphaFactorusSUN = gmock_glGlobalAlphaFactorusSUN;
  tbl.glDrawMeshArraysSUN = gmock_glDrawMeshArraysSUN;
  tbl.glReadVideoPixelsSUN = gmock_glReadVideoPixelsSUN;
  tbl.glReplacementCodePointerSUN = gmock_glReplacementCodePointerSUN;
  tbl.glReplacementCodeubSUN = gmock_glReplacementCodeubSUN;
  tbl.glReplacementCodeubvSUN = gmock_glReplacementCodeubvSUN;
  tbl.glReplacementCodeuiSUN = gmock_glReplacementCodeuiSUN;
  tbl.glReplacementCodeuivSUN = gmock_glReplacementCodeuivSUN;
  tbl.glReplacementCodeusSUN = gmock_glReplacementCodeusSUN;
  tbl.glReplacementCodeusvSUN = gmock_glReplacementCodeusvSUN;
  tbl.glColor3fVertex3fSUN = gmock_glColor3fVertex3fSUN;
  tbl.glColor3fVertex3fvSUN = gmock_glColor3fVertex3fvSUN;
  tbl.glColor4fNormal3fVertex3fSUN = gmock_glColor4fNormal3fVertex3fSUN;
  tbl.glColor4fNormal3fVertex3fvSUN = gmock_glColor4fNormal3fVertex3fvSUN;
  tbl.glColor4ubVertex2fSUN = gmock_glColor4ubVertex2fSUN;
  tbl.glColor4ubVertex2fvSUN = gmock_glColor4ubVertex2fvSUN;
  tbl.glColor4ubVertex3fSUN = gmock_glColor4ubVertex3fSUN;
  tbl.glColor4ubVertex3fvSUN = gmock_glColor4ubVertex3fvSUN;
  tbl.glNormal3fVertex3fSUN = gmock_glNormal3fVertex3fSUN;
  tbl.glNormal3fVertex3fvSUN = gmock_glNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiColor3fVertex3fSUN = gmock_glReplacementCodeuiColor3fVertex3fSUN;
  tbl.glReplacementCodeuiColor3fVertex3fvSUN = gmock_glReplacementCodeuiColor3fVertex3fvSUN;
  tbl.glReplacementCodeuiColor4fNormal3fVertex3fSUN = gmock_glReplacementCodeuiColor4fNormal3fVertex3fSUN;
  tbl.glReplacementCodeuiColor4fNormal3fVertex3fvSUN = gmock_glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiColor4ubVertex3fSUN = gmock_glReplacementCodeuiColor4ubVertex3fSUN;
  tbl.glReplacementCodeuiColor4ubVertex3fvSUN = gmock_glReplacementCodeuiColor4ubVertex3fvSUN;
  tbl.glReplacementCodeuiNormal3fVertex3fSUN = gmock_glReplacementCodeuiNormal3fVertex3fSUN;
  tbl.glReplacementCodeuiNormal3fVertex3fvSUN = gmock_glReplacementCodeuiNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = gmock_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
  tbl.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = gmock_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = gmock_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
  tbl.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = gmock_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiTexCoord2fVertex3fSUN = gmock_glReplacementCodeuiTexCoord2fVertex3fSUN;
  tbl.glReplacementCodeuiTexCoord2fVertex3fvSUN = gmock_glReplacementCodeuiTexCoord2fVertex3fvSUN;
  tbl.glReplacementCodeuiVertex3fSUN = gmock_glReplacementCodeuiVertex3fSUN;
  tbl.glReplacementCodeuiVertex3fvSUN = gmock_glReplacementCodeuiVertex3fvSUN;
  tbl.glTexCoord2fColor3fVertex3fSUN = gmock_glTexCoord2fColor3fVertex3fSUN;
  tbl.glTexCoord2fColor3fVertex3fvSUN = gmock_glTexCoord2fColor3fVertex3fvSUN;
  tbl.glTexCoord2fColor4fNormal3fVertex3fSUN = gmock_glTexCoord2fColor4fNormal3fVertex3fSUN;
  tbl.glTexCoord2fColor4fNormal3fVertex3fvSUN = gmock_glTexCoord2fColor4fNormal3fVertex3fvSUN;
  tbl.glTexCoord2fColor4ubVertex3fSUN = gmock_glTexCoord2fColor4ubVertex3fSUN;
  tbl.glTexCoord2fColor4ubVertex3fvSUN = gmock_glTexCoord2fColor4ubVertex3fvSUN;
  tbl.glTexCoord2fNormal3fVertex3fSUN = gmock_glTexCoord2fNormal3fVertex3fSUN;
  tbl.glTexCoord2fNormal3fVertex3fvSUN = gmock_glTexCoord2fNormal3fVertex3fvSUN;
  tbl.glTexCoord2fVertex3fSUN = gmock_glTexCoord2fVertex3fSUN;
  tbl.glTexCoord2fVertex3fvSUN = gmock_glTexCoord2fVertex3fvSUN;
  tbl.glTexCoord4fColor4fNormal3fVertex4fSUN = gmock_glTexCoord4fColor4fNormal3fVertex4fSUN;
  tbl.glTexCoord4fColor4fNormal3fVertex4fvSUN = gmock_glTexCoord4fColor4fNormal3fVertex4fvSUN;
  tbl.glTexCoord4fVertex4fSUN = gmock_glTexCoord4fVertex4fSUN;
  tbl.glTexCoord4fVertex4fvSUN = gmock_glTexCoord4fVertex4fvSUN;
  tbl.glAddSwapHintRectWIN = gmock_glAddSwapHintRectWIN;
}

REGAL_NAMESPACE_END
